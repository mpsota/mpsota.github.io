{
"version":3,
"file":"module$node_modules$web3_core_requestmanager$src$jsonrpc.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA4BrH,IAAIC,QAAU,CACVC,UAAW,CADD,CAYN,UAAYC,QAAS,CAACC,MAAD,CAASC,MAAT,CAAiB,CAC1C,GAAI,CAACD,MAAL,CACI,KAAUE,MAAJ,CAAU,kDAAV,CAA8DC,IAAAC,UAAA,CAAeH,MAAf,CAA9D,CAAsF,IAAtF,CAAN,CAIJJ,OAAAC,UAAA,EAEA,OAAO,CACHO,QAAS,KADN,CAEHC,GAAIT,OAAAC,UAFD,CAGHE,OAAQA,MAHL,CAIHC,OAAQA,MAARA,EAAkB,EAJf,CARmC,CAZhC,CAmCN,gBAAkBM,QAAS,CAACC,QAAD,CAAW,CAG1CC,QAASA,sBAAqB,CAACC,OAAD,CAAS,CACrC,MAAO,CAAC,CAACA,OAAT,EACE,CAACA,OAAAC,MADH,EAEsB,KAFtB,GAEED,OAAAL,QAFF;CAGyB,QAHzB,GAGG,MAAOK,QAAAJ,GAHV,EAG2D,QAH3D,GAGqC,MAAOI,QAAAJ,GAH5C,GAIqBM,IAAAA,EAJrB,GAIEF,OAAAG,OALmC,CAFvC,MAAOC,MAAAC,QAAA,CAAcP,QAAd,CAAA,CAA0BA,QAAAQ,MAAA,CAAeP,qBAAf,CAA1B,CAAkEA,qBAAA,CAAsBD,QAAtB,CAD/B,CAnChC,CAsDN,eAAiBS,QAAS,CAACC,QAAD,CAAW,CACzC,MAAOA,SAAAC,IAAA,CAAa,QAAS,CAACT,OAAD,CAAU,CACnC,MAAOb,QAAAuB,UAAA,CAAkBV,OAAAV,OAAlB,CAAkCU,OAAAT,OAAlC,CAD4B,CAAhC,CADkC,CAtD/B,CA4DdN,OAAAC,QAAA,CAAiBC,OAxFoG;",
"sources":["node_modules/web3-core-requestmanager/src/jsonrpc.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$web3_core_requestmanager$src$jsonrpc\"] = function(global,require,module,exports) {\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file jsonrpc.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */\n\n\"use strict\";\n\n// Initialize Jsonrpc as a simple object with utility functions.\nvar Jsonrpc = {\n    messageId: 0\n};\n\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\nJsonrpc.toPayload = function (method, params) {\n    if (!method) {\n        throw new Error('JSONRPC method should be specified for params: \"'+ JSON.stringify(params) +'\"!');\n    }\n\n    // advance message ID\n    Jsonrpc.messageId++;\n\n    return {\n        jsonrpc: '2.0',\n        id: Jsonrpc.messageId,\n        method: method,\n        params: params || []\n    };\n};\n\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */\nJsonrpc.isValidResponse = function (response) {\n    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n\n    function validateSingleMessage(message){\n      return !!message &&\n        !message.error &&\n        message.jsonrpc === '2.0' &&\n        (typeof message.id === 'number' || typeof message.id === 'string') &&\n        message.result !== undefined; // only undefined is not valid json object\n    }\n};\n\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */\nJsonrpc.toBatchPayload = function (messages) {\n    return messages.map(function (message) {\n        return Jsonrpc.toPayload(message.method, message.params);\n    });\n};\n\nmodule.exports = Jsonrpc;\n\n\n};"],
"names":["shadow$provide","global","require","module","exports","Jsonrpc","messageId","Jsonrpc.toPayload","method","params","Error","JSON","stringify","jsonrpc","id","Jsonrpc.isValidResponse","response","validateSingleMessage","message","error","undefined","result","Array","isArray","every","Jsonrpc.toBatchPayload","messages","map","toPayload"]
}
