{
"version":3,
"file":"module$node_modules$lodash$_baseDifference.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IACnGC,SAAWH,OAAA,CAAQ,sCAAR,CADwF,CAEnGI,cAAgBJ,OAAA,CAAQ,2CAAR,CAFmF,CAGnGK,kBAAoBL,OAAA,CAAQ,+CAAR,CAH+E,CAInGM,SAAWN,OAAA,CAAQ,sCAAR,CAJwF,CAKnGO,UAAYP,OAAA,CAAQ,uCAAR,CALuF,CAMnGQ,SAAWR,OAAA,CAAQ,sCAAR,CA6DfC,OAAAC,QAAA,CA7CAO,QAAuB,CAACC,KAAD;AAAQC,MAAR,CAAgBC,QAAhB,CAA0BC,UAA1B,CAAsC,CAAA,IACvDC,MAAS,EAD8C,CAEvDC,SAAWX,aAF4C,CAGvDY,SAAW,CAAA,CAH4C,CAIvDC,OAASP,KAAAO,OAJ8C,CAKvDC,OAAS,EAL8C,CAMvDC,aAAeR,MAAAM,OAEnB,IAAI,CAACA,MAAL,CACE,MAAOC,OAELN,SAAJ,GACED,MADF,CACWL,QAAA,CAASK,MAAT,CAAiBJ,SAAA,CAAUK,QAAV,CAAjB,CADX,CAGIC,WAAJ,EACEE,QACA,CADWV,iBACX,CAAAW,QAAA,CAAW,CAAA,CAFb,EA3BqBI,GA2BrB,EAIST,MAAAM,OAJT,GAKEF,QAEA,CAFWP,QAEX,CADAQ,QACA,CADW,CAAA,CACX,CAAAL,MAAA,CAAS,IAAIR,QAAJ,CAAaQ,MAAb,CAPX,CASA,EAAA,CACA,IAAA,CAAO,EAAEG,KAAT,CAAiBG,MAAjB,CAAA,CAAyB,CAAA,IACnBI,MAAQX,KAAA,CAAMI,KAAN,CADW,CAEnBQ,SAAuB,IAAZ,EAAAV,QAAA,CAAmBS,KAAnB,CAA2BT,QAAA,CAASS,KAAT,CAE1CA,MAAA,CAASR,UAAD,EAAyB,CAAzB,GAAeQ,KAAf,CAA8BA,KAA9B,CAAsC,CAC9C,IAAIL,QAAJ,EAAgBM,QAAhB,GAA6BA,QAA7B,CAAuC,CAErC,IADA,IAAIC;AAAcJ,YAClB,CAAOI,WAAA,EAAP,CAAA,CACE,GAAIZ,MAAA,CAAOY,WAAP,CAAJ,GAA4BD,QAA5B,CACE,SAAS,CAGbJ,OAAAM,KAAA,CAAYH,KAAZ,CAPqC,CAAvC,IASUN,SAAA,CAASJ,MAAT,CAAiBW,QAAjB,CAA2BT,UAA3B,CAAL,EACHK,MAAAM,KAAA,CAAYH,KAAZ,CAfqB,CAkBzB,MAAOH,OA1CoD,CAtB0C;",
"sources":["node_modules/lodash/_baseDifference.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseDifference\"] = function(global,require,module,exports) {\nvar SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetCache","arrayIncludes","arrayIncludesWith","arrayMap","baseUnary","cacheHas","baseDifference","array","values","iteratee","comparator","index","includes","isCommon","length","result","valuesLength","LARGE_ARRAY_SIZE","value","computed","valuesIndex","push"]
}
