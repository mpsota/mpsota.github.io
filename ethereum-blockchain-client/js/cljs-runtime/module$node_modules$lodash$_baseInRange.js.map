{
"version":3,
"file":"module$node_modules$lodash$_baseInRange.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAEhGC,UAAYC,IAAAC,IAFoF,CAGhGC,UAAYF,IAAAG,IAehBN,OAAAC,QAAA,CAJAM,QAAoB,CAACC,MAAD,CAASC,KAAT,CAAgBC,GAAhB,CAAqB,CACvC,MAAOF,OAAP,EAAiBH,SAAA,CAAUI,KAAV,CAAiBC,GAAjB,CAAjB,EAA0CF,MAA1C,CAAmDN,SAAA,CAAUO,KAAV,CAAiBC,GAAjB,CADZ,CAd2D;",
"sources":["node_modules/lodash/_baseInRange.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseInRange\"] = function(global,require,module,exports) {\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * The base implementation of `_.inRange` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n */\nfunction baseInRange(number, start, end) {\n  return number >= nativeMin(start, end) && number < nativeMax(start, end);\n}\n\nmodule.exports = baseInRange;\n\n};"],
"names":["shadow$provide","global","require","module","exports","nativeMax","Math","max","nativeMin","min","baseInRange","number","start","end"]
}
