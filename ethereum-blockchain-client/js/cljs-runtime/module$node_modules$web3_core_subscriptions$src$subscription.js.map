{
"version":3,
"file":"module$node_modules$web3_core_subscriptions$src$subscription.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/web3-core-subscriptions/src/subscription.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$web3_core_subscriptions$src$subscription\"] = function(global,require,module,exports) {\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file subscription.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar EventEmitter = require('eventemitter3');\n\nfunction Subscription(options) {\n    EventEmitter.call(this);\n\n    this.id = null;\n    this.callback = _.identity;\n    this.arguments = null;\n    this._reconnectIntervalId = null;\n\n    this.options = {\n        subscription: options.subscription,\n        type: options.type,\n        requestManager: options.requestManager\n    };\n}\n\n// INHERIT\nSubscription.prototype = Object.create(EventEmitter.prototype);\nSubscription.prototype.constructor = Subscription;\n\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\nSubscription.prototype._extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\nSubscription.prototype._validateArgs = function (args) {\n    var subscription = this.options.subscription;\n\n    if(!subscription)\n        subscription = {};\n\n    if(!subscription.params)\n        subscription.params = 0;\n\n    if (args.length !== subscription.params) {\n        throw errors.InvalidNumberOfParams(args.length, subscription.params + 1, args[0]);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\nSubscription.prototype._formatInput = function (args) {\n    var subscription = this.options.subscription;\n\n    if (!subscription) {\n        return args;\n    }\n\n    if (!subscription.inputFormatter) {\n        return args;\n    }\n\n    var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {\n        return formatter ? formatter(args[index]) : args[index];\n    });\n\n    return formattedArgs;\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param result {Object}\n * @return {Object}\n */\n\nSubscription.prototype._formatOutput = function (result) {\n    var subscription = this.options.subscription;\n\n    return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nSubscription.prototype._toPayload = function (args) {\n    var params = [];\n    this.callback = this._extractCallback(args) || _.identity;\n\n    if (!this.subscriptionMethod) {\n        this.subscriptionMethod = args.shift();\n\n        // replace subscription with given name\n        if (this.options.subscription.subscriptionName) {\n            this.subscriptionMethod = this.options.subscription.subscriptionName;\n        }\n    }\n\n    if (!this.arguments) {\n        this.arguments = this._formatInput(args);\n        this._validateArgs(this.arguments);\n        args = []; // make empty after validation\n\n    }\n\n    // re-add subscriptionName\n    params.push(this.subscriptionMethod);\n    params = params.concat(this.arguments);\n\n\n    if (args.length) {\n        throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\n    }\n\n    return {\n        method: this.options.type + '_subscribe',\n        params: params\n    };\n};\n\n/**\n * Unsubscribes and clears callbacks\n *\n * @method unsubscribe\n * @return {Object}\n */\nSubscription.prototype.unsubscribe = function(callback) {\n    this.options.requestManager.removeSubscription(this.id, callback);\n    this.id = null;\n    this.removeAllListeners();\n    clearInterval(this._reconnectIntervalId);\n};\n\n/**\n * Subscribes and watches for changes\n *\n * @method subscribe\n * @param {String} subscription the subscription\n * @param {Object} options the options object with address topics and fromBlock\n * @return {Object}\n */\nSubscription.prototype.subscribe = function() {\n    var _this = this;\n    var args = Array.prototype.slice.call(arguments);\n    var payload = this._toPayload(args);\n\n    if(!payload) {\n        return this;\n    }\n\n    if(!this.options.requestManager.provider) {\n        var err1 = new Error('No provider set.');\n        this.callback(err1, null, this);\n        this.emit('error', err1);\n        return this;\n    }\n\n    // throw error, if provider doesnt support subscriptions\n    if(!this.options.requestManager.provider.on) {\n        var err2 = new Error('The current provider doesn\\'t support subscriptions: '+ this.options.requestManager.provider.constructor.name);\n        this.callback(err2, null, this);\n        this.emit('error', err2);\n        return this;\n    }\n\n    // if id is there unsubscribe first\n    if (this.id) {\n        this.unsubscribe();\n    }\n\n    // store the params in the options object\n    this.options.params = payload.params[1];\n\n    // get past logs, if fromBlock is available\n    if(payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {\n        // send the subscription request\n        this.options.requestManager.send({\n            method: 'eth_getLogs',\n            params: [payload.params[1]]\n        }, function (err, logs) {\n            if(!err) {\n                logs.forEach(function(log){\n                    var output = _this._formatOutput(log);\n                    _this.callback(null, output, _this);\n                    _this.emit('data', output);\n                });\n\n                // TODO subscribe here? after the past logs?\n\n            } else {\n                _this.callback(err, null, _this);\n                _this.emit('error', err);\n            }\n        });\n    }\n\n    // create subscription\n    // TODO move to separate function? so that past logs can go first?\n\n    if(typeof payload.params[1] === 'object')\n        delete payload.params[1].fromBlock;\n\n    this.options.requestManager.send(payload, function (err, result) {\n        if(!err && result) {\n            _this.id = result;\n            _this.emit('connected', result);\n\n            // call callback on notifications\n            _this.options.requestManager.addSubscription(_this.id, payload.params[0] , _this.options.type, function(err, result) {\n\n                if (!err) {\n                    if (!_.isArray(result)) {\n                        result = [result];\n                    }\n\n                    result.forEach(function(resultItem) {\n                        var output = _this._formatOutput(resultItem);\n\n                        if (_.isFunction(_this.options.subscription.subscriptionHandler)) {\n                            return _this.options.subscription.subscriptionHandler.call(_this, output);\n                        } else {\n                            _this.emit('data', output);\n                        }\n\n                        // call the callback, last so that unsubscribe there won't affect the emit above\n                        _this.callback(null, output, _this);\n                    });\n                } else {\n                    // unsubscribe, but keep listeners\n                    _this.options.requestManager.removeSubscription(_this.id);\n\n                    // re-subscribe, if connection fails\n                    if(_this.options.requestManager.provider.once) {\n                        _this._reconnectIntervalId = setInterval(function () {\n                            // TODO check if that makes sense!\n                            if (_this.options.requestManager.provider.reconnect) {\n                                _this.options.requestManager.provider.reconnect();\n                            }\n                        }, 500);\n\n                        _this.options.requestManager.provider.once('connect', function () {\n                            clearInterval(_this._reconnectIntervalId);\n                            _this.subscribe(_this.callback);\n                        });\n                    }\n                    _this.emit('error', err);\n\n                     // call the callback, last so that unsubscribe there won't affect the emit above\n                    _this.callback(err, null, _this);\n                }\n            });\n        } else {\n          _this.callback(err, null, _this);\n          _this.emit('error', err);\n        }\n    });\n\n    // return an object to cancel the subscription\n    return this;\n};\n\nmodule.exports = Subscription;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Subscription","options","EventEmitter","call","id","callback","_","identity","_reconnectIntervalId","arguments","subscription","type","requestManager","errors","prototype","Object","create","constructor","_extractCallback","Subscription.prototype._extractCallback","args","isFunction","length","pop","_validateArgs","Subscription.prototype._validateArgs","params","InvalidNumberOfParams","_formatInput","Subscription.prototype._formatInput","inputFormatter","map","formattedArgs","formatter","index","_formatOutput","Subscription.prototype._formatOutput","result","outputFormatter","_toPayload","Subscription.prototype._toPayload","subscriptionMethod","shift","subscriptionName","push","concat","Error","method","unsubscribe","Subscription.prototype.unsubscribe","removeSubscription","removeAllListeners","clearInterval","subscribe","Subscription.prototype.subscribe","_this","Array","slice","payload","provider","err1","emit","on","err2","name","isObject","hasOwnProperty","isFinite","fromBlock","send","err","logs","forEach","log","output","addSubscription","once","setInterval","reconnect","isArray","resultItem","subscriptionHandler"]
}
