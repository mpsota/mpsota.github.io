{
"version":3,
"file":"module$node_modules$idna_uts46_hx$uts46.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/idna-uts46-hx/uts46.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$idna_uts46_hx$uts46\"] = function(global,require,module,exports) {\n(function(root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define(['punycode', './idna-map'], function(punycode, idna_map) {\n      return factory(punycode, idna_map);\n    });\n  }\n  else if (typeof exports === 'object') {\n    module.exports = factory(require('punycode'), require('./idna-map'));\n  }\n  else {\n    root.uts46 = factory(root.punycode, root.idna_map);\n  }\n}(this, function(punycode, idna_map) {\n\n  function mapLabel(label, useStd3ASCII, transitional) {\n    var mapped = [];\n    var chars = punycode.ucs2.decode(label);\n    for (var i = 0; i < chars.length; i++) {\n      var cp = chars[i];\n      var ch = punycode.ucs2.encode([chars[i]]);\n      var composite = idna_map.mapChar(cp);\n      var flags = (composite >> 23);\n      var kind = (composite >> 21) & 3;\n      var index = (composite >> 5) & 0xffff;\n      var length = composite & 0x1f;\n      var value = idna_map.mapStr.substr(index, length);\n      if (kind === 0 || (useStd3ASCII && (flags & 1))) {\n        throw new Error(\"Illegal char \" + ch);\n      }\n      else if (kind === 1) {\n        mapped.push(value);\n      }\n      else if (kind === 2) {\n        mapped.push(transitional ? value : ch);\n      }\n      /* istanbul ignore next */\n      else if (kind === 3) {\n        mapped.push(ch);\n      }\n    }\n\n    var newLabel = mapped.join(\"\").normalize(\"NFC\");\n    return newLabel;\n  }\n\n  function process(domain, transitional, useStd3ASCII) {\n    /* istanbul ignore if */\n    if (useStd3ASCII === undefined)\n      useStd3ASCII = false;\n    var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);\n\n    // Step 3. Break\n    var labels = mappedIDNA.split(\".\");\n\n    // Step 4. Convert/Validate\n    labels = labels.map(function(label) {\n      if (label.startsWith(\"xn--\")) {\n        label = punycode.decode(label.substring(4));\n        validateLabel(label, useStd3ASCII, false);\n      }\n      else {\n        validateLabel(label, useStd3ASCII, transitional);\n      }\n      return label;\n    });\n\n    return labels.join(\".\");\n  }\n\n  function validateLabel(label, useStd3ASCII, transitional) {\n    // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the\n    // third position and fourth positions.\n    if (label[2] === '-' && label[3] === '-')\n      throw new Error(\"Failed to validate \" + label);\n\n    // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS\n    // character.\n    if (label.startsWith('-') || label.endsWith('-'))\n      throw new Error(\"Failed to validate \" + label);\n\n    // 4. The label must not contain a U+002E ( . ) FULL STOP.\n    // this should nerver happen as label is chunked internally by this character\n    /* istanbul ignore if */\n    if (label.includes('.'))\n      throw new Error(\"Failed to validate \" + label);\n\n    if (mapLabel(label, useStd3ASCII, transitional) !== label)\n      throw new Error(\"Failed to validate \" + label);\n\n    // 5. The label must not begin with a combining mark, that is:\n    // General_Category=Mark.\n    var ch = label.codePointAt(0);\n    if (idna_map.mapChar(ch) & (0x2 << 23))\n      throw new Error(\"Label contains illegal character: \" + ch);\n  }\n\n  function toAscii(domain, options) {\n    if (options === undefined)\n      options = {};\n    var transitional = 'transitional' in options ? options.transitional : true;\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;\n    var labels = process(domain, transitional, useStd3ASCII).split('.');\n    var asciiLabels = labels.map(punycode.toASCII);\n    var asciiString = asciiLabels.join('.');\n    var i;\n    if (verifyDnsLength) {\n      if (asciiString.length < 1 || asciiString.length > 253) {\n        throw new Error(\"DNS name has wrong length: \" + asciiString);\n      }\n      for (i = 0; i < asciiLabels.length; i++) {//for .. of replacement\n        var label = asciiLabels[i];\n        if (label.length < 1 || label.length > 63)\n          throw new Error(\"DNS label has wrong length: \" + label);\n      }\n    }\n    return asciiString;\n  }\n\n  function toUnicode(domain, options) {\n    if (options === undefined)\n      options = {};\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    return process(domain, false, useStd3ASCII);\n  }\n\n  return {\n    toUnicode: toUnicode,\n    toAscii: toAscii,\n  };\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","define","amd","punycode","idna_map","uts46","mapLabel","label","useStd3ASCII","transitional","mapped","chars","ucs2","decode","i","length","cp","ch","encode","composite","mapChar","flags","kind","value","mapStr","substr","Error","push","join","normalize","newLabel","process","domain","undefined","labels","mappedIDNA","split","map","startsWith","substring","validateLabel","endsWith","includes","codePointAt","toUnicode","options","toAscii","verifyDnsLength","asciiLabels","toASCII","asciiString"]
}
