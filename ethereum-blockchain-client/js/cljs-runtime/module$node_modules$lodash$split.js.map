{
"version":3,
"file":"module$node_modules$lodash$split.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,iCAAA,CAAqD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IACzFC,aAAeH,OAAA,CAAQ,0CAAR,CAD0E,CAEzFI,UAAYJ,OAAA,CAAQ,uCAAR,CAF6E,CAGzFK,WAAaL,OAAA,CAAQ,wCAAR,CAH4E,CAIzFM,eAAiBN,OAAA,CAAQ,4CAAR,CAJwE,CAKzFO,SAAWP,OAAA,CAAQ,qCAAR,CAL8E,CAMzFQ,cAAgBR,OAAA,CAAQ,2CAAR,CANyE,CAOzFS,SAAWT,OAAA,CAAQ,qCAAR,CA6CfC;MAAAC,QAAA,CArBAQ,QAAc,CAACC,MAAD,CAASC,SAAT,CAAoBC,KAApB,CAA2B,CACnCA,KAAJ,EAA6B,QAA7B,EAAa,MAAOA,MAApB,EAAyCP,cAAA,CAAeK,MAAf,CAAuBC,SAAvB,CAAkCC,KAAlC,CAAzC,GACED,SADF,CACcC,KADd,CACsBC,IAAAA,EADtB,CAGAD,MAAA,CAAkBC,IAAAA,EAAV,GAAAD,KAAA,CAzBaE,UAyBb,CAAyCF,KAAzC,GAAmD,CAC3D,OAAKA,MAAL,CAIA,CADAF,MACA,CADSF,QAAA,CAASE,MAAT,CACT,IAC0B,QAD1B,EACM,MAAOC,UADb,EAEoB,IAFpB,EAEOA,SAFP,EAE4B,CAACL,QAAA,CAASK,SAAT,CAF7B,IAIEA,SACI,CADQT,YAAA,CAAaS,SAAb,CACR,CAAA,CAACA,SAAD,EAAcP,UAAA,CAAWM,MAAX,CALpB,EAMWP,SAAA,CAAUI,aAAA,CAAcG,MAAd,CAAV,CAAiC,CAAjC,CAAoCE,KAApC,CANX,CASOF,MAAAD,MAAA,CAAaE,SAAb,CAAwBC,KAAxB,CAbP,CACS,EAN8B,CA/BoD;",
"sources":["node_modules/lodash/split.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$split\"] = function(global,require,module,exports) {\nvar baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isIterateeCall = require('./_isIterateeCall'),\n    isRegExp = require('./isRegExp'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\n\nmodule.exports = split;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseToString","castSlice","hasUnicode","isIterateeCall","isRegExp","stringToArray","toString","split","string","separator","limit","undefined","MAX_ARRAY_LENGTH"]
}
