shadow$provide.module$node_modules$ethjs_util$lib$index=function(global,require,module,exports){function padToEven(value){if("string"!==typeof value)throw Error("[ethjs-util] while padding to even, value must be string, is currently "+typeof value+", while padToEven.");value.length%2&&(value="0"+value);return value}function intToHex(i){return"0x"+i.toString(16)}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";global=require("module$node_modules$is_hex_prefixed$src$index");
var stripHexPrefix=require("module$node_modules$strip_hex_prefix$src$index");module.exports={arrayContainsArray:function(superset,subset,some){if(!0!==Array.isArray(superset))throw Error("[ethjs-util] method arrayContainsArray requires input 'superset' to be an array got type '"+typeof superset+"'");if(!0!==Array.isArray(subset))throw Error("[ethjs-util] method arrayContainsArray requires input 'subset' to be an array got type '"+typeof subset+"'");return subset[!!some&&"some"||"every"](function(value){return 0<=
superset.indexOf(value)})},intToBuffer:function(i){i=intToHex(i);return new Buffer(padToEven(i.slice(2)),"hex")},getBinarySize:function(str){if("string"!==typeof str)throw Error("[ethjs-util] while getting binary size, method getBinarySize requires input 'str' to be type String, got '"+typeof str+"'.");return Buffer.byteLength(str,"utf8")},isHexPrefixed:global,stripHexPrefix:stripHexPrefix,padToEven:padToEven,intToHex:intToHex,fromAscii:function(stringValue){for(var hex="",i=0;i<stringValue.length;i++){var n=
stringValue.charCodeAt(i).toString(16);hex+=2>n.length?"0"+n:n}return"0x"+hex},fromUtf8:function(stringValue){stringValue=new Buffer(stringValue,"utf8");return"0x"+padToEven(stringValue.toString("hex")).replace(/^0+|0+$/g,"")},toAscii:function(hex){var str="",i=0,l=hex.length;for("0x"===hex.substring(0,2)&&(i=2);i<l;i+=2){var code=parseInt(hex.substr(i,2),16);str+=String.fromCharCode(code)}return str},toUtf8:function(hex){return(new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g,"")),"hex")).toString("utf8")},
getKeys:function(params,key,allowEmpty){if(!Array.isArray(params))throw Error("[ethjs-util] method getKeys expecting type Array as 'params' input, got '"+typeof params+"'");if("string"!==typeof key)throw Error("[ethjs-util] method getKeys expecting type String for input 'key' got '"+typeof key+"'.");for(var result=[],i=0;i<params.length;i++){var value=params[i][key];if(allowEmpty&&!value)value="";else if("string"!==typeof value)throw Error("invalid abi");result.push(value)}return result},isHexString:function(value,
length){return"string"!==typeof value||!value.match(/^0x[0-9A-Fa-f]*$/)||length&&value.length!==2+2*length?!1:!0}}}
//# sourceMappingURL=module$node_modules$ethjs_util$lib$index.js.map
