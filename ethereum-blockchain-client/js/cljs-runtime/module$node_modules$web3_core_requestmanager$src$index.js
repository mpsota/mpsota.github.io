shadow$provide.module$node_modules$web3_core_requestmanager$src$index=function(global,require,module,exports){var _=require("module$node_modules$underscore$underscore"),errors=require("module$node_modules$web3_core_helpers$src$index").errors,Jsonrpc=require("module$node_modules$web3_core_requestmanager$src$jsonrpc");global=require("module$node_modules$web3_core_requestmanager$src$batch");exports=require("module$node_modules$web3_core_requestmanager$src$givenProvider");var RequestManager=function RequestManager(provider){this.provider=
null;this.providers=RequestManager.providers;this.setProvider(provider);this.subscriptions={}};RequestManager.givenProvider=exports;RequestManager.providers={WebsocketProvider:require("module$node_modules$web3_providers_ws$src$index"),HttpProvider:require("module$node_modules$web3_providers_http$src$index"),IpcProvider:require("module$node_modules$web3_providers_ipc$src$index")};RequestManager.prototype.setProvider=function(p,net){var _this=this;if(p&&"string"===typeof p&&this.providers)if(/^http(s)?:\/\//i.test(p))p=
new this.providers.HttpProvider(p);else if(/^ws(s)?:\/\//i.test(p))p=new this.providers.WebsocketProvider(p);else if(p&&"object"===typeof net&&"function"===typeof net.connect)p=new this.providers.IpcProvider(p,net);else if(p)throw Error("Can't autodetect provider for \""+p+'"');this.provider&&this.provider.connected&&this.clearSubscriptions();if((this.provider=p||null)&&this.provider.on)this.provider.on("data",function(result,deprecatedResult){result=result||deprecatedResult;result.method&&_this.subscriptions[result.params.subscription]&&
_this.subscriptions[result.params.subscription].callback&&_this.subscriptions[result.params.subscription].callback(null,result.params.result)})};RequestManager.prototype.send=function(data,callback){callback=callback||function(){};if(!this.provider)return callback(errors.InvalidProvider());var payload=Jsonrpc.toPayload(data.method,data.params);this.provider[this.provider.sendAsync?"sendAsync":"send"](payload,function(err,result){if(result&&result.id&&payload.id!==result.id)return callback(Error('Wrong response id "'+
result.id+'" (expected: "'+payload.id+'") in '+JSON.stringify(payload)));if(err)return callback(err);if(result&&result.error)return callback(errors.ErrorResponse(result));if(!Jsonrpc.isValidResponse(result))return callback(errors.InvalidResponse(result));callback(null,result.result)})};RequestManager.prototype.sendBatch=function(data,callback){if(!this.provider)return callback(errors.InvalidProvider());data=Jsonrpc.toBatchPayload(data);this.provider[this.provider.sendAsync?"sendAsync":"send"](data,
function(err,results){if(err)return callback(err);if(!_.isArray(results))return callback(errors.InvalidResponse(results));callback(null,results)})};RequestManager.prototype.addSubscription=function(id,name,type,callback){if(this.provider.on)this.subscriptions[id]={callback:callback,type:type,name:name};else throw Error("The provider doesn't support subscriptions: "+this.provider.constructor.name);};RequestManager.prototype.removeSubscription=function(id,callback){this.subscriptions[id]&&(this.send({method:this.subscriptions[id].type+
"_unsubscribe",params:[id]},callback),delete this.subscriptions[id])};RequestManager.prototype.clearSubscriptions=function(keepIsSyncing){var _this=this;this.subscriptions&&Object.keys(this.subscriptions).forEach(function(id){keepIsSyncing&&"syncing"===_this.subscriptions[id].name||_this.removeSubscription(id)});this.provider.reset&&this.provider.reset()};module.exports={Manager:RequestManager,BatchManager:global}}
//# sourceMappingURL=module$node_modules$web3_core_requestmanager$src$index.js.map
