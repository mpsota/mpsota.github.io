{
"version":3,
"file":"module$node_modules$swarm_js$lib$swarm.js",
"lineCount":20,
"mappings":"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",
"sources":["node_modules/swarm-js/lib/swarm.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$swarm_js$lib$swarm\"] = function(global,require,module,exports) {\n// TODO: this is a temporary fix to hide those libraries from the browser. A\n// slightly better long-term solution would be to split this file into two,\n// separating the functions that are used on Node.js from the functions that\n// are used only on the browser.\nmodule.exports = function (_ref) {\n  var fs = _ref.fs,\n      files = _ref.files,\n      os = _ref.os,\n      path = _ref.path,\n      child_process = _ref.child_process,\n      mimetype = _ref.mimetype,\n      defaultArchives = _ref.defaultArchives,\n      request = _ref.request,\n      downloadUrl = _ref.downloadUrl,\n      bytes = _ref.bytes,\n      hash = _ref.hash,\n      pick = _ref.pick;\n\n  // \u2200 a . String -> JSON -> Map String a -o Map String a\n  //   Inserts a key/val pair in an object impurely.\n  var impureInsert = function impureInsert(key) {\n    return function (val) {\n      return function (map) {\n        return map[key] = val, map;\n      };\n    };\n  }; // String -> JSON -> Map String JSON\n  //   Merges an array of keys and an array of vals into an object.\n\n\n  var toMap = function toMap(keys) {\n    return function (vals) {\n      var map = {};\n\n      for (var i = 0, l = keys.length; i < l; ++i) {\n        map[keys[i]] = vals[i];\n      }\n\n      return map;\n    };\n  }; // \u2200 a . Map String a -> Map String a -> Map String a\n  //   Merges two maps into one.\n\n\n  var merge = function merge(a) {\n    return function (b) {\n      var map = {};\n\n      for (var key in a) {\n        map[key] = a[key];\n      }\n\n      for (var _key in b) {\n        map[_key] = b[_key];\n      }\n\n      return map;\n    };\n  }; // \u2200 a . [a] -> [a] -> Bool\n\n\n  var equals = function equals(a) {\n    return function (b) {\n      if (a.length !== b.length) {\n        return false;\n      } else {\n        for (var i = 0, l = a.length; i < l; ++i) {\n          if (a[i] !== b[i]) return false;\n        }\n      }\n\n      return true;\n    };\n  }; // String -> String -> String\n\n\n  var rawUrl = function rawUrl(swarmUrl) {\n    return function (hash) {\n      return \"\".concat(swarmUrl, \"/bzzr:/\").concat(hash);\n    };\n  }; // String -> String -> Promise Uint8Array\n  //   Gets the raw contents of a Swarm hash address.\n\n\n  var downloadData = function downloadData(swarmUrl) {\n    return function (hash) {\n      return request(rawUrl(swarmUrl)(hash), {\n        responseType: \"arraybuffer\"\n      }).then(function (arrayBuffer) {\n        var uint8Array = new Uint8Array(arrayBuffer);\n        var error404 = [52, 48, 52, 32, 112, 97, 103, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10];\n        if (equals(uint8Array)(error404)) throw \"Error 404.\";\n        return uint8Array;\n      });\n    };\n  }; // type Entry = {\"type\": String, \"hash\": String}\n  // type File = {\"type\": String, \"data\": Uint8Array}\n  // String -> String -> Promise (Map String Entry)\n  //   Solves the manifest of a Swarm address recursively.\n  //   Returns a map from full paths to entries.\n\n\n  var downloadEntries = function downloadEntries(swarmUrl) {\n    return function (hash) {\n      var search = function search(hash) {\n        return function (path) {\n          return function (routes) {\n            // Formats an entry to the Swarm.js type.\n            var format = function format(entry) {\n              return {\n                type: entry.contentType,\n                hash: entry.hash\n              };\n            }; // To download a single entry:\n            //   if type is bzz-manifest, go deeper\n            //   if not, add it to the routing table\n\n\n            var downloadEntry = function downloadEntry(entry) {\n              if (entry.path === undefined) {\n                return Promise.resolve();\n              } else {\n                return entry.contentType === \"application/bzz-manifest+json\" ? search(entry.hash)(path + entry.path)(routes) : Promise.resolve(impureInsert(path + entry.path)(format(entry))(routes));\n              }\n            }; // Downloads the initial manifest and then each entry.\n\n\n            return downloadData(swarmUrl)(hash).then(function (text) {\n              return JSON.parse(toString(text)).entries;\n            }).then(function (entries) {\n              return Promise.all(entries.map(downloadEntry));\n            }).then(function () {\n              return routes;\n            });\n          };\n        };\n      };\n\n      return search(hash)(\"\")({});\n    };\n  }; // String -> String -> Promise (Map String String)\n  //   Same as `downloadEntries`, but returns only hashes (no types).\n\n\n  var downloadRoutes = function downloadRoutes(swarmUrl) {\n    return function (hash) {\n      return downloadEntries(swarmUrl)(hash).then(function (entries) {\n        return toMap(Object.keys(entries))(Object.keys(entries).map(function (route) {\n          return entries[route].hash;\n        }));\n      });\n    };\n  }; // String -> String -> Promise (Map String File)\n  //   Gets the entire directory tree in a Swarm address.\n  //   Returns a promise mapping paths to file contents.\n\n\n  var downloadDirectory = function downloadDirectory(swarmUrl) {\n    return function (hash) {\n      return downloadEntries(swarmUrl)(hash).then(function (entries) {\n        var paths = Object.keys(entries);\n        var hashs = paths.map(function (path) {\n          return entries[path].hash;\n        });\n        var types = paths.map(function (path) {\n          return entries[path].type;\n        });\n        var datas = hashs.map(downloadData(swarmUrl));\n\n        var files = function files(datas) {\n          return datas.map(function (data, i) {\n            return {\n              type: types[i],\n              data: data\n            };\n          });\n        };\n\n        return Promise.all(datas).then(function (datas) {\n          return toMap(paths)(files(datas));\n        });\n      });\n    };\n  }; // String -> String -> String -> Promise String\n  //   Gets the raw contents of a Swarm hash address.\n  //   Returns a promise with the downloaded file path.\n\n\n  var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {\n    return function (hash) {\n      return function (filePath) {\n        return files.download(rawUrl(swarmUrl)(hash))(filePath);\n      };\n    };\n  }; // String -> String -> String -> Promise (Map String String)\n  //   Gets the entire directory tree in a Swarm address.\n  //   Returns a promise mapping paths to file contents.\n\n\n  var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {\n    return function (hash) {\n      return function (dirPath) {\n        return downloadRoutes(swarmUrl)(hash).then(function (routingTable) {\n          var downloads = [];\n\n          for (var route in routingTable) {\n            if (route.length > 0) {\n              var filePath = path.join(dirPath, route);\n              downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));\n            }\n\n            ;\n          }\n\n          ;\n          return Promise.all(downloads).then(function () {\n            return dirPath;\n          });\n        });\n      };\n    };\n  }; // String -> Uint8Array -> Promise String\n  //   Uploads raw data to Swarm.\n  //   Returns a promise with the uploaded hash.\n\n\n  var uploadData = function uploadData(swarmUrl) {\n    return function (data) {\n      return request(\"\".concat(swarmUrl, \"/bzzr:/\"), {\n        body: typeof data === \"string\" ? fromString(data) : data,\n        method: \"POST\"\n      });\n    };\n  }; // String -> String -> String -> File -> Promise String\n  //   Uploads a file to the Swarm manifest at a given hash, under a specific\n  //   route. Returns a promise containing the uploaded hash.\n  //   FIXME: for some reasons Swarm-Gateways is sometimes returning\n  //   error 404\u00a0(bad request), so we retry up to 3 times. Why?\n\n\n  var uploadToManifest = function uploadToManifest(swarmUrl) {\n    return function (hash) {\n      return function (route) {\n        return function (file) {\n          var attempt = function attempt(n) {\n            var slashRoute = route[0] === \"/\" ? route : \"/\" + route;\n            var url = \"\".concat(swarmUrl, \"/bzz:/\").concat(hash).concat(slashRoute);\n            var opt = {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": file.type\n              },\n              body: file.data\n            };\n            return request(url, opt).then(function (response) {\n              if (response.indexOf(\"error\") !== -1) {\n                throw response;\n              }\n\n              return response;\n            }).catch(function (e) {\n              return n > 0 && attempt(n - 1);\n            });\n          };\n\n          return attempt(3);\n        };\n      };\n    };\n  }; // String -> {type: String, data: Uint8Array} -> Promise String\n\n\n  var uploadFile = function uploadFile(swarmUrl) {\n    return function (file) {\n      return uploadDirectory(swarmUrl)({\n        \"\": file\n      });\n    };\n  }; // String -> String -> Promise String\n\n\n  var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {\n    return function (filePath) {\n      return fs.readFile(filePath).then(function (data) {\n        return uploadFile(swarmUrl)({\n          type: mimetype.lookup(filePath),\n          data: data\n        });\n      });\n    };\n  }; // String -> Map String File -> Promise String\n  //   Uploads a directory to Swarm. The directory is\n  //   represented as a map of routes and files.\n  //   A default path is encoded by having a \"\" route.\n\n\n  var uploadDirectory = function uploadDirectory(swarmUrl) {\n    return function (directory) {\n      return uploadData(swarmUrl)(\"{}\").then(function (hash) {\n        var uploadRoute = function uploadRoute(route) {\n          return function (hash) {\n            return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);\n          };\n        };\n\n        var uploadToHash = function uploadToHash(hash, route) {\n          return hash.then(uploadRoute(route));\n        };\n\n        return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));\n      });\n    };\n  }; // String -> Promise String\n\n\n  var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {\n    return function (filePath) {\n      return fs.readFile(filePath).then(uploadData(swarmUrl));\n    };\n  }; // String -> Nullable String -> String -> Promise String\n\n\n  var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {\n    return function (defaultPath) {\n      return function (dirPath) {\n        return files.directoryTree(dirPath).then(function (fullPaths) {\n          return Promise.all(fullPaths.map(function (path) {\n            return fs.readFile(path);\n          })).then(function (datas) {\n            var paths = fullPaths.map(function (path) {\n              return path.slice(dirPath.length);\n            });\n            var types = fullPaths.map(function (path) {\n              return mimetype.lookup(path) || \"text/plain\";\n            });\n            return toMap(paths)(datas.map(function (data, i) {\n              return {\n                type: types[i],\n                data: data\n              };\n            }));\n          });\n        }).then(function (directory) {\n          return merge(defaultPath ? {\n            \"\": directory[defaultPath]\n          } : {})(directory);\n        }).then(uploadDirectory(swarmUrl));\n      };\n    };\n  }; // String -> UploadInfo -> Promise String\n  //   Simplified multi-type upload which calls the correct\n  //   one based on the type of the argument given.\n\n\n  var _upload = function upload(swarmUrl) {\n    return function (arg) {\n      // Upload raw data from browser\n      if (arg.pick === \"data\") {\n        return pick.data().then(uploadData(swarmUrl)); // Upload a file from browser\n      } else if (arg.pick === \"file\") {\n        return pick.file().then(uploadFile(swarmUrl)); // Upload a directory from browser\n      } else if (arg.pick === \"directory\") {\n        return pick.directory().then(uploadDirectory(swarmUrl)); // Upload directory/file from disk\n      } else if (arg.path) {\n        switch (arg.kind) {\n          case \"data\":\n            return uploadDataFromDisk(swarmUrl)(arg.path);\n\n          case \"file\":\n            return uploadFileFromDisk(swarmUrl)(arg.path);\n\n          case \"directory\":\n            return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);\n        }\n\n        ; // Upload UTF-8 string or raw data (buffer)\n      } else if (arg.length || typeof arg === \"string\") {\n        return uploadData(swarmUrl)(arg); // Upload directory with JSON\n      } else if (arg instanceof Object) {\n        return uploadDirectory(swarmUrl)(arg);\n      }\n\n      return Promise.reject(new Error(\"Bad arguments\"));\n    };\n  }; // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)\n  //   Simplified multi-type download which calls the correct function based on\n  //   the type of the argument given, and on whether the Swwarm address has a\n  //   directory or a file.\n\n\n  var _download = function download(swarmUrl) {\n    return function (hash) {\n      return function (path) {\n        return isDirectory(swarmUrl)(hash).then(function (isDir) {\n          if (isDir) {\n            return path ? downloadDirectoryToDisk(swarmUrl)(hash)(path) : downloadDirectory(swarmUrl)(hash);\n          } else {\n            return path ? downloadDataToDisk(swarmUrl)(hash)(path) : downloadData(swarmUrl)(hash);\n          }\n        });\n      };\n    };\n  }; // String -> Promise String\n  //   Downloads the Swarm binaries into a path. Returns a promise that only\n  //   resolves when the exact Swarm file is there, and verified to be correct.\n  //   If it was already there to begin with, skips the download.\n\n\n  var downloadBinary = function downloadBinary(path, archives) {\n    var system = os.platform().replace(\"win32\", \"windows\") + \"-\" + (os.arch() === \"x64\" ? \"amd64\" : \"386\");\n    var archive = (archives || defaultArchives)[system];\n    var archiveUrl = downloadUrl + archive.archive + \".tar.gz\";\n    var archiveMD5 = archive.archiveMD5;\n    var binaryMD5 = archive.binaryMD5;\n    return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path);\n  }; // type SwarmSetup = {\n  //   account : String,\n  //   password : String,\n  //   dataDir : String,\n  //   binPath : String,\n  //   ensApi : String,\n  //   onDownloadProgress : Number ~> (),\n  //   archives : [{\n  //     archive: String,\n  //     binaryMD5: String,\n  //     archiveMD5: String\n  //   }]\n  // }\n  // SwarmSetup ~> Promise Process\n  //   Starts the Swarm process.\n\n\n  var startProcess = function startProcess(swarmSetup) {\n    return new Promise(function (resolve, reject) {\n      var spawn = child_process.spawn;\n\n      var hasString = function hasString(str) {\n        return function (buffer) {\n          return ('' + buffer).indexOf(str) !== -1;\n        };\n      };\n\n      var account = swarmSetup.account,\n          password = swarmSetup.password,\n          dataDir = swarmSetup.dataDir,\n          ensApi = swarmSetup.ensApi,\n          privateKey = swarmSetup.privateKey;\n      var STARTUP_TIMEOUT_SECS = 3;\n      var WAITING_PASSWORD = 0;\n      var STARTING = 1;\n      var LISTENING = 2;\n      var PASSWORD_PROMPT_HOOK = \"Passphrase\";\n      var LISTENING_HOOK = \"Swarm http proxy started\";\n      var state = WAITING_PASSWORD;\n      var swarmProcess = spawn(swarmSetup.binPath, ['--bzzaccount', account || privateKey, '--datadir', dataDir, '--ens-api', ensApi]);\n\n      var handleProcessOutput = function handleProcessOutput(data) {\n        if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {\n          setTimeout(function () {\n            state = STARTING;\n            swarmProcess.stdin.write(password + '\\n');\n          }, 500);\n        } else if (hasString(LISTENING_HOOK)(data)) {\n          state = LISTENING;\n          clearTimeout(timeout);\n          resolve(swarmProcess);\n        }\n      };\n\n      swarmProcess.stdout.on('data', handleProcessOutput);\n      swarmProcess.stderr.on('data', handleProcessOutput); //swarmProcess.on('close', () => setTimeout(restart, 2000));\n\n      var restart = function restart() {\n        return startProcess(swarmSetup).then(resolve).catch(reject);\n      };\n\n      var error = function error() {\n        return reject(new Error(\"Couldn't start swarm process.\"));\n      };\n\n      var timeout = setTimeout(error, 20000);\n    });\n  }; // Process ~> Promise ()\n  //   Stops the Swarm process.\n\n\n  var stopProcess = function stopProcess(process) {\n    return new Promise(function (resolve, reject) {\n      process.stderr.removeAllListeners('data');\n      process.stdout.removeAllListeners('data');\n      process.stdin.removeAllListeners('error');\n      process.removeAllListeners('error');\n      process.removeAllListeners('exit');\n      process.kill('SIGINT');\n      var killTimeout = setTimeout(function () {\n        return process.kill('SIGKILL');\n      }, 8000);\n      process.once('close', function () {\n        clearTimeout(killTimeout);\n        resolve();\n      });\n    });\n  }; // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()\n  //   Receives a Swarm configuration object and a callback function. It then\n  //   checks if a local Swarm node is running. If no local Swarm is found, it\n  //   downloads the Swarm binaries to the dataDir (if not there), checksums,\n  //   starts the Swarm process and calls the callback function with an API\n  //   object using the local node. That callback must return a promise which\n  //   will resolve when it is done using the API, so that this function can\n  //   close the Swarm process properly. Returns a promise that resolves when the\n  //   user is done with the API and the Swarm process is closed.\n  //   TODO: check if Swarm process is already running (improve `isAvailable`)\n\n\n  var local = function local(swarmSetup) {\n    return function (useAPI) {\n      return _isAvailable(\"http://localhost:8500\").then(function (isAvailable) {\n        return isAvailable ? useAPI(at(\"http://localhost:8500\")).then(function () {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function (data) {\n          return (swarmSetup.onProgress || function () {})(data.length);\n        }).then(function () {\n          return startProcess(swarmSetup);\n        }).then(function (process) {\n          return useAPI(at(\"http://localhost:8500\")).then(function () {\n            return process;\n          });\n        }).then(stopProcess);\n      });\n    };\n  }; // String ~> Promise Bool\n  //   Returns true if Swarm is available on `url`.\n  //   Perfoms a test upload to determine that.\n  //   TODO: improve this?\n\n\n  var _isAvailable = function isAvailable(swarmUrl) {\n    var testFile = \"test\";\n    var testHash = \"c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7\";\n    return uploadData(swarmUrl)(testFile).then(function (hash) {\n      return hash === testHash;\n    }).catch(function () {\n      return false;\n    });\n  }; // String -> String ~> Promise Bool\n  //   Returns a Promise which is true if that Swarm address is a directory.\n  //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.\n  //   TODO: improve this?\n\n\n  var isDirectory = function isDirectory(swarmUrl) {\n    return function (hash) {\n      return downloadData(swarmUrl)(hash).then(function (data) {\n        try {\n          return !!JSON.parse(toString(data)).entries;\n        } catch (e) {\n          return false;\n        }\n      });\n    };\n  }; // Uncurries a function; used to allow the f(x,y,z) style on exports.\n\n\n  var uncurry = function uncurry(f) {\n    return function (a, b, c, d, e) {\n      var p; // Hardcoded because efficiency (`arguments` is very slow).\n\n      if (typeof a !== \"undefined\") p = f(a);\n      if (typeof b !== \"undefined\") p = f(b);\n      if (typeof c !== \"undefined\") p = f(c);\n      if (typeof d !== \"undefined\") p = f(d);\n      if (typeof e !== \"undefined\") p = f(e);\n      return p;\n    };\n  }; // () -> Promise Bool\n  //   Not sure how to mock Swarm to test it properly. Ideas?\n\n\n  var test = function test() {\n    return Promise.resolve(true);\n  }; // Uint8Array -> String\n\n\n  var toString = function toString(uint8Array) {\n    return bytes.toString(bytes.fromUint8Array(uint8Array));\n  }; // String -> Uint8Array\n\n\n  var fromString = function fromString(string) {\n    return bytes.toUint8Array(bytes.fromString(string));\n  }; // String -> SwarmAPI\n  //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.\n\n\n  var at = function at(swarmUrl) {\n    return {\n      download: function download(hash, path) {\n        return _download(swarmUrl)(hash)(path);\n      },\n      downloadData: uncurry(downloadData(swarmUrl)),\n      downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),\n      downloadDirectory: uncurry(downloadDirectory(swarmUrl)),\n      downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),\n      downloadEntries: uncurry(downloadEntries(swarmUrl)),\n      downloadRoutes: uncurry(downloadRoutes(swarmUrl)),\n      isAvailable: function isAvailable() {\n        return _isAvailable(swarmUrl);\n      },\n      upload: function upload(arg) {\n        return _upload(swarmUrl)(arg);\n      },\n      uploadData: uncurry(uploadData(swarmUrl)),\n      uploadFile: uncurry(uploadFile(swarmUrl)),\n      uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),\n      uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),\n      uploadDirectory: uncurry(uploadDirectory(swarmUrl)),\n      uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),\n      uploadToManifest: uncurry(uploadToManifest(swarmUrl)),\n      pick: pick,\n      hash: hash,\n      fromString: fromString,\n      toString: toString\n    };\n  };\n\n  return {\n    at: at,\n    local: local,\n    download: _download,\n    downloadBinary: downloadBinary,\n    downloadData: downloadData,\n    downloadDataToDisk: downloadDataToDisk,\n    downloadDirectory: downloadDirectory,\n    downloadDirectoryToDisk: downloadDirectoryToDisk,\n    downloadEntries: downloadEntries,\n    downloadRoutes: downloadRoutes,\n    isAvailable: _isAvailable,\n    startProcess: startProcess,\n    stopProcess: stopProcess,\n    upload: _upload,\n    uploadData: uploadData,\n    uploadDataFromDisk: uploadDataFromDisk,\n    uploadFile: uploadFile,\n    uploadFileFromDisk: uploadFileFromDisk,\n    uploadDirectory: uploadDirectory,\n    uploadDirectoryFromDisk: uploadDirectoryFromDisk,\n    uploadToManifest: uploadToManifest,\n    pick: pick,\n    hash: hash,\n    fromString: fromString,\n    toString: toString\n  };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","_ref","fs","files","os","path","child_process","mimetype","defaultArchives","request","downloadUrl","bytes","hash","pick","impureInsert","key","val","map","toMap","keys","vals","i","l","length","merge","a","b","_key","equals","rawUrl","swarmUrl","concat","downloadData","responseType","then","arrayBuffer","uint8Array","Uint8Array","error404","downloadEntries","search","routes","downloadEntry","entry","undefined","Promise","resolve","contentType","type","text","JSON","parse","toString","entries","all","downloadRoutes","Object","route","downloadDirectory","paths","hashs","types","datas","data","downloadDataToDisk","filePath","download","downloadDirectoryToDisk","dirPath","routingTable","downloads","join","push","uploadData","body","fromString","method","uploadToManifest","file","attempt","n","slashRoute","url","opt","headers","response","indexOf","catch","e","uploadFile","uploadDirectory","uploadFileFromDisk","readFile","lookup","directory","uploadRoute","reduce","uploadToHash","uploadDataFromDisk","uploadDirectoryFromDisk","defaultPath","directoryTree","fullPaths","slice","_upload","arg","kind","defaultFile","reject","Error","_download","isDirectory","isDir","downloadBinary","archives","system","platform","replace","arch","archive","archiveMD5","binaryMD5","safeDownloadArchived","startProcess","swarmSetup","spawn","hasString","str","buffer","password","privateKey","state","WAITING_PASSWORD","swarmProcess","binPath","account","dataDir","ensApi","handleProcessOutput","PASSWORD_PROMPT_HOOK","setTimeout","STARTING","stdin","write","LISTENING_HOOK","LISTENING","clearTimeout","timeout","stdout","on","stderr","error","stopProcess","process","removeAllListeners","kill","killTimeout","once","_isAvailable","testFile","testHash","uncurry","f","c","d","p","fromUint8Array","string","toUint8Array","at","isAvailable","upload","local","useAPI","onData","onProgress"]
}
