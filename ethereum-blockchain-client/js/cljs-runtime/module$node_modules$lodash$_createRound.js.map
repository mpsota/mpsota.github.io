{
"version":3,
"file":"module$node_modules$lodash$_createRound.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAChGC,MAAAA,CAAOH,OAAA,CAAQ,kCAAR,CADyF,KAEhGI,UAAYJ,OAAA,CAAQ,sCAAR,CAFoF,CAGhGK,SAAWL,OAAA,CAAQ,qCAAR,CAHqF,CAIhGM,SAAWN,OAAA,CAAQ,qCAAR,CAJqF,CAOhGO,eAAiBJ,MAAAK,SAP+E,CAQhGC,UAAYC,IAAAC,IA2BhBV,OAAAC,QAAA,CAlBAU,QAAoB,CAACC,UAAD,CAAa,CAC/B,IAAIC,KAAOJ,IAAA,CAAKG,UAAL,CACX,OAAO,SAAQ,CAACE,MAAD,CAASC,SAAT,CAAoB,CACjCD,MAAA,CAASV,QAAA,CAASU,MAAT,CAET,OAAA,CADAC,SACA;AADyB,IAAb,EAAAA,SAAA,CAAoB,CAApB,CAAwBP,SAAA,CAAUL,SAAA,CAAUY,SAAV,CAAV,CAAgC,GAAhC,CACpC,GAAiBT,cAAA,CAAeQ,MAAf,CAAjB,EAGME,MAIG,CAJIC,CAACZ,QAAA,CAASS,MAAT,CAADG,CAAoB,GAApBA,OAAA,CAA+B,GAA/B,CAIJ,CAHHC,MAGG,CAHKL,IAAA,CAAKG,MAAA,CAAK,CAAL,CAAL,CAAe,GAAf,EAAsB,CAACA,MAAA,CAAK,CAAL,CAAvB,CAAiCD,SAAjC,EAGL,CADPC,MACO,CADAC,CAACZ,QAAA,CAASa,MAAT,CAADD,CAAmB,GAAnBA,OAAA,CAA8B,GAA9B,CACA,CAAA,EAAED,MAAA,CAAK,CAAL,CAAF,CAAY,GAAZ,EAAmB,CAACA,MAAA,CAAK,CAAL,CAApB,CAA8BD,SAA9B,EAPT,EASOF,IAAA,CAAKC,MAAL,CAZ0B,CAFJ,CAjBmE;",
"sources":["node_modules/lodash/_createRound.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_createRound\"] = function(global,require,module,exports) {\nvar root = require('./_root'),\n    toInteger = require('./toInteger'),\n    toNumber = require('./toNumber'),\n    toString = require('./toString');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite,\n    nativeMin = Math.min;\n\n/**\n * Creates a function like `_.round`.\n *\n * @private\n * @param {string} methodName The name of the `Math` method to use when rounding.\n * @returns {Function} Returns the new round function.\n */\nfunction createRound(methodName) {\n  var func = Math[methodName];\n  return function(number, precision) {\n    number = toNumber(number);\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n    if (precision && nativeIsFinite(number)) {\n      // Shift with exponential notation to avoid floating-point issues.\n      // See [MDN](https://mdn.io/round#Examples) for more details.\n      var pair = (toString(number) + 'e').split('e'),\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n      pair = (toString(value) + 'e').split('e');\n      return +(pair[0] + 'e' + (+pair[1] - precision));\n    }\n    return func(number);\n  };\n}\n\nmodule.exports = createRound;\n\n};"],
"names":["shadow$provide","global","require","module","exports","root","toInteger","toNumber","toString","nativeIsFinite","isFinite","nativeMin","Math","min","createRound","methodName","func","number","precision","pair","split","value"]
}
