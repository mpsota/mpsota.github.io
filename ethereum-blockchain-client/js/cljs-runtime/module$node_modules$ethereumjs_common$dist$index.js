shadow$provide.module$node_modules$ethereumjs_common$dist$index=function(global,require,module,exports){var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p])}return t};return __assign.apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0});var chains_1=require("module$node_modules$ethereumjs_common$dist$chains$index"),hardforks_1=
require("module$node_modules$ethereumjs_common$dist$hardforks$index");global=function(){function Common(chain,hardfork,supportedHardforks){this._chainParams=this.setChain(chain);this._hardfork=null;this._supportedHardforks=void 0===supportedHardforks?[]:supportedHardforks;hardfork&&this.setHardfork(hardfork)}Common.forCustomChain=function(baseChain,customChainParams,hardfork,supportedHardforks){baseChain=Common._getChainParams(baseChain);return new Common(__assign({},baseChain,customChainParams),
hardfork,supportedHardforks)};Common._getChainParams=function(chain){if("number"===typeof chain){if(chains_1.chains.names[chain])return chains_1.chains[chains_1.chains.names[chain]];throw Error("Chain with ID "+chain+" not supported");}if(chains_1.chains[chain])return chains_1.chains[chain];throw Error("Chain with name "+chain+" not supported");};Common.prototype.setChain=function(chain){if("number"===typeof chain||"string"===typeof chain)this._chainParams=Common._getChainParams(chain);else if("object"===
typeof chain){for(var _i=0,required_1=["networkId","genesis","hardforks","bootstrapNodes"];_i<required_1.length;_i++){var param=required_1[_i];if(void 0===chain[param])throw Error("Missing required chain parameter: "+param);}this._chainParams=chain}else throw Error("Wrong input format");return this._chainParams};Common.prototype.setHardfork=function(hardfork){if(!this._isSupportedHardfork(hardfork))throw Error("Hardfork "+hardfork+" not set as supported in supportedHardforks");for(var changed=!1,
_i=0,hardforkChanges_1=hardforks_1.hardforks;_i<hardforkChanges_1.length;_i++)hardforkChanges_1[_i][0]===hardfork&&(this._hardfork=hardfork,changed=!0);if(!changed)throw Error("Hardfork with name "+hardfork+" not supported");};Common.prototype._chooseHardfork=function(hardfork,onlySupported){if(!hardfork)if(this._hardfork)hardfork=this._hardfork;else throw Error("Method called with neither a hardfork set nor provided by param");else if((void 0===onlySupported||onlySupported)&&!this._isSupportedHardfork(hardfork))throw Error("Hardfork "+
hardfork+" not set as supported in supportedHardforks");return hardfork};Common.prototype._getHardfork=function(hardfork){for(var _i=0,hfs_1=this.hardforks();_i<hfs_1.length;_i++){var hf=hfs_1[_i];if(hf.name===hardfork)return hf}throw Error("Hardfork "+hardfork+" not defined for chain "+this.chainName());};Common.prototype._isSupportedHardfork=function(hardfork){if(0<this._supportedHardforks.length)for(var _i=0,_a=this._supportedHardforks;_i<_a.length;_i++){if(hardfork===_a[_i])return!0}else return!0;
return!1};Common.prototype.param=function(topic,name,hardfork){hardfork=this._chooseHardfork(hardfork);for(var value,_i=0,hardforkChanges_2=hardforks_1.hardforks;_i<hardforkChanges_2.length;_i++){var hfChanges=hardforkChanges_2[_i];if(!hfChanges[1][topic])throw Error("Topic "+topic+" not defined");void 0!==hfChanges[1][topic][name]&&(value=hfChanges[1][topic][name].v);if(hfChanges[0]===hardfork)break}if(void 0===value)throw Error(topic+" value for "+name+" not found");return value};Common.prototype.paramByBlock=
function(topic,name,blockNumber){blockNumber=this.activeHardforks(blockNumber);return this.param(topic,name,blockNumber[blockNumber.length-1].name)};Common.prototype.hardforkIsActiveOnBlock=function(hardfork,blockNumber,opts){opts=void 0!==opts?opts:{};hardfork=this._chooseHardfork(hardfork,void 0===opts.onlySupported?!1:opts.onlySupported);hardfork=this.hardforkBlock(hardfork);return null!==hardfork&&blockNumber>=hardfork?!0:!1};Common.prototype.activeOnBlock=function(blockNumber,opts){return this.hardforkIsActiveOnBlock(null,
blockNumber,opts)};Common.prototype.hardforkGteHardfork=function(hardfork1,hardfork2,opts){opts=void 0!==opts?opts:{};var onlyActive=void 0===opts.onlyActive?!1:opts.onlyActive;hardfork1=this._chooseHardfork(hardfork1,opts.onlySupported);var posHf1=-1,posHf2=-1,index=0,_i=0;for(opts=onlyActive?this.activeHardforks(null,opts):this.hardforks();_i<opts.length;_i++)onlyActive=opts[_i],onlyActive.name===hardfork1&&(posHf1=index),onlyActive.name===hardfork2&&(posHf2=index),index+=1;return posHf1>=posHf2};
Common.prototype.gteHardfork=function(hardfork,opts){return this.hardforkGteHardfork(null,hardfork,opts)};Common.prototype.hardforkIsActiveOnChain=function(hardfork,opts){opts=void 0!==opts?opts:{};hardfork=this._chooseHardfork(hardfork,void 0===opts.onlySupported?!1:opts.onlySupported);opts=0;for(var _a=this.hardforks();opts<_a.length;opts++){var hf=_a[opts];if(hf.name===hardfork&&null!==hf.block)return!0}return!1};Common.prototype.activeHardforks=function(blockNumber,opts){opts=void 0!==opts?opts:
{};for(var activeHardforks=[],_i=0,hfs_2=this.hardforks();_i<hfs_2.length;_i++){var hf=hfs_2[_i];if(null!==hf.block){if(void 0!==blockNumber&&null!==blockNumber&&blockNumber<hf.block)break;opts.onlySupported&&!this._isSupportedHardfork(hf.name)||activeHardforks.push(hf)}}return activeHardforks};Common.prototype.activeHardfork=function(blockNumber,opts){opts=void 0!==opts?opts:{};blockNumber=this.activeHardforks(blockNumber,opts);if(0<blockNumber.length)return blockNumber[blockNumber.length-1].name;
throw Error("No (supported) active hardfork found");};Common.prototype.hardforkBlock=function(hardfork){hardfork=this._chooseHardfork(hardfork,!1);return this._getHardfork(hardfork).block};Common.prototype.isHardforkBlock=function(blockNumber,hardfork){hardfork=this._chooseHardfork(hardfork,!1);return this.hardforkBlock(hardfork)===blockNumber?!0:!1};Common.prototype.consensus=function(hardfork){hardfork=this._chooseHardfork(hardfork);return this._getHardfork(hardfork).consensus};Common.prototype.finality=
function(hardfork){hardfork=this._chooseHardfork(hardfork);return this._getHardfork(hardfork).finality};Common.prototype.genesis=function(){return this._chainParams.genesis};Common.prototype.hardforks=function(){return this._chainParams.hardforks};Common.prototype.bootstrapNodes=function(){return this._chainParams.bootstrapNodes};Common.prototype.hardfork=function(){return this._hardfork};Common.prototype.chainId=function(){return this._chainParams.chainId};Common.prototype.chainName=function(){return chains_1.chains.names[this.chainId()]||
this._chainParams.name};Common.prototype.networkId=function(){return this._chainParams.networkId};return Common}();exports.default=global}
//# sourceMappingURL=module$node_modules$ethereumjs_common$dist$index.js.map
