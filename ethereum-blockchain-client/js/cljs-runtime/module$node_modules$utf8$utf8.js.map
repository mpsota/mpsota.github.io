{
"version":3,
"file":"module$node_modules$utf8$utf8.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/utf8/utf8.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$utf8$utf8\"] = function(global,require,module,exports) {\n/*! https://mths.be/utf8js v3.0.0 by @mathias */\n;(function(root) {\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2decode(string) {\n\t\tvar output = [];\n\t\tvar counter = 0;\n\t\tvar length = string.length;\n\t\tvar value;\n\t\tvar extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2encode(array) {\n\t\tvar length = array.length;\n\t\tvar index = -1;\n\t\tvar value;\n\t\tvar output = '';\n\t\twhile (++index < length) {\n\t\t\tvalue = array[index];\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t}\n\t\treturn output;\n\t}\n\n\tfunction checkScalarValue(codePoint) {\n\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n\t\t\tthrow Error(\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n\t\t\t\t' is not a scalar value'\n\t\t\t);\n\t\t}\n\t}\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction createByte(codePoint, shift) {\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n\t}\n\n\tfunction encodeCodePoint(codePoint) {\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n\t\t\treturn stringFromCharCode(codePoint);\n\t\t}\n\t\tvar symbol = '';\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n\t\t}\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n\t\t\tcheckScalarValue(codePoint);\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n\t\t\tsymbol += createByte(codePoint, 12);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n\t\treturn symbol;\n\t}\n\n\tfunction utf8encode(string) {\n\t\tvar codePoints = ucs2decode(string);\n\t\tvar length = codePoints.length;\n\t\tvar index = -1;\n\t\tvar codePoint;\n\t\tvar byteString = '';\n\t\twhile (++index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tbyteString += encodeCodePoint(codePoint);\n\t\t}\n\t\treturn byteString;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction readContinuationByte() {\n\t\tif (byteIndex >= byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\tif ((continuationByte & 0xC0) == 0x80) {\n\t\t\treturn continuationByte & 0x3F;\n\t\t}\n\n\t\t// If we end up here, it\u2019s not a continuation byte\n\t\tthrow Error('Invalid continuation byte');\n\t}\n\n\tfunction decodeSymbol() {\n\t\tvar byte1;\n\t\tvar byte2;\n\t\tvar byte3;\n\t\tvar byte4;\n\t\tvar codePoint;\n\n\t\tif (byteIndex > byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tif (byteIndex == byteCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read first byte\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\t// 1-byte sequence (no continuation bytes)\n\t\tif ((byte1 & 0x80) == 0) {\n\t\t\treturn byte1;\n\t\t}\n\n\t\t// 2-byte sequence\n\t\tif ((byte1 & 0xE0) == 0xC0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\n\t\t\tif (codePoint >= 0x80) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 3-byte sequence (may include unpaired surrogates)\n\t\tif ((byte1 & 0xF0) == 0xE0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\n\t\t\tif (codePoint >= 0x0800) {\n\t\t\t\tcheckScalarValue(codePoint);\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 4-byte sequence\n\t\tif ((byte1 & 0xF8) == 0xF0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tbyte4 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |\n\t\t\t\t(byte3 << 0x06) | byte4;\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n\t\t\t\treturn codePoint;\n\t\t\t}\n\t\t}\n\n\t\tthrow Error('Invalid UTF-8 detected');\n\t}\n\n\tvar byteArray;\n\tvar byteCount;\n\tvar byteIndex;\n\tfunction utf8decode(byteString) {\n\t\tbyteArray = ucs2decode(byteString);\n\t\tbyteCount = byteArray.length;\n\t\tbyteIndex = 0;\n\t\tvar codePoints = [];\n\t\tvar tmp;\n\t\twhile ((tmp = decodeSymbol()) !== false) {\n\t\t\tcodePoints.push(tmp);\n\t\t}\n\t\treturn ucs2encode(codePoints);\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\troot.version = '3.0.0';\n\troot.encode = utf8encode;\n\troot.decode = utf8decode;\n\n}(typeof exports === 'undefined' ? this.utf8 = {} : exports));\n\n};"],
"names":["shadow$provide","global","require","module","exports","root","ucs2decode","string","output","counter","length","value","extra","charCodeAt","push","checkScalarValue","codePoint","Error","toString","toUpperCase","readContinuationByte","byteIndex","byteCount","continuationByte","byteArray","decodeSymbol","byte1","byte2","byte3","byte4","stringFromCharCode","String","fromCharCode","version","encode","utf8encode","codePoints","index","byteString","symbol","shift","decode","utf8decode","tmp","utf8"]
}
