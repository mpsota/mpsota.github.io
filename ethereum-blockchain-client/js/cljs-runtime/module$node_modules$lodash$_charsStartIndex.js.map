{
"version":3,
"file":"module$node_modules$lodash$_charsStartIndex.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACxG,IAAIC,YAAcH,OAAA,CAAQ,yCAAR,CAmBlBC,OAAAC,QAAA,CARAE,QAAwB,CAACC,UAAD,CAAaC,UAAb,CAAyB,CAI/C,IAJ+C,IAC3CC,MAAS,EADkC,CAE3CC,OAASH,UAAAG,OAEb,CAAO,EAAED,KAAT,CAAiBC,MAAjB,EAA4E,EAA5E,CAA2BL,WAAA,CAAYG,UAAZ,CAAwBD,UAAA,CAAWE,KAAX,CAAxB,CAA2C,CAA3C,CAA3B,CAAA,EACA,MAAOA,MALwC,CAZuD;",
"sources":["node_modules/lodash/_charsStartIndex.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_charsStartIndex\"] = function(global,require,module,exports) {\nvar baseIndexOf = require('./_baseIndexOf');\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\nmodule.exports = charsStartIndex;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseIndexOf","charsStartIndex","strSymbols","chrSymbols","index","length"]
}
