shadow$provide.module$node_modules$ethereumjs_tx$dist$transaction=function(global,require,module,exports){var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p])}return t};return __assign.apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0});var ethereumjs_util_1=require("module$node_modules$ethereumjs_util$dist$index"),ethereumjs_common_1=
require("module$node_modules$ethereumjs_common$dist$index"),buffer_1=require("module$node_modules$buffer$index"),N_DIV_2=new ethereumjs_util_1.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16);global=function(){function Transaction(data,opts){void 0===data&&(data={});void 0===opts&&(opts={});if(opts.common){if(opts.chain||opts.hardfork)throw Error("Instantiation with both opts.common, and opts.chain and opts.hardfork parameter not allowed!");this._common=opts.common}else this._common=
new ethereumjs_common_1.default(opts.chain?opts.chain:"mainnet",opts.hardfork?opts.hardfork:"petersburg");opts=[{name:"nonce",length:32,allowLess:!0,default:new buffer_1.Buffer([])},{name:"gasPrice",length:32,allowLess:!0,default:new buffer_1.Buffer([])},{name:"gasLimit",alias:"gas",length:32,allowLess:!0,default:new buffer_1.Buffer([])},{name:"to",allowZero:!0,length:20,default:new buffer_1.Buffer([])},{name:"value",length:32,allowLess:!0,default:new buffer_1.Buffer([])},{name:"data",alias:"input",
allowZero:!0,default:new buffer_1.Buffer([])},{name:"v",allowZero:!0,default:new buffer_1.Buffer([])},{name:"r",length:32,allowZero:!0,allowLess:!0,default:new buffer_1.Buffer([])},{name:"s",length:32,allowZero:!0,allowLess:!0,default:new buffer_1.Buffer([])}];ethereumjs_util_1.defineProperties(this,opts,data);Object.defineProperty(this,"from",{enumerable:!0,configurable:!0,get:this.getSenderAddress.bind(this)});this._validateV(this.v);this._overrideVSetterWithValidation()}Transaction.prototype.toCreationAddress=
function(){return""===this.to.toString("hex")};Transaction.prototype.hash=function(includeSignature){void 0===includeSignature&&(includeSignature=!0);includeSignature=includeSignature?this.raw:this._implementsEIP155()?this.raw.slice(0,6).concat([ethereumjs_util_1.toBuffer(this.getChainId()),ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)),ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0))]):this.raw.slice(0,6);return ethereumjs_util_1.rlphash(includeSignature)};Transaction.prototype.getChainId=
function(){return this._common.chainId()};Transaction.prototype.getSenderAddress=function(){if(this._from)return this._from;var pubkey=this.getSenderPublicKey();return this._from=ethereumjs_util_1.publicToAddress(pubkey)};Transaction.prototype.getSenderPublicKey=function(){if(!this.verifySignature())throw Error("Invalid Signature");return this._senderPubKey};Transaction.prototype.verifySignature=function(){var msgHash=this.hash(!1);if(this._common.gteHardfork("homestead")&&1===(new ethereumjs_util_1.BN(this.s)).cmp(N_DIV_2))return!1;
try{var v=ethereumjs_util_1.bufferToInt(this.v),useChainIdWhileRecoveringPubKey=v>=2*this.getChainId()+35&&this._common.gteHardfork("spuriousDragon");this._senderPubKey=ethereumjs_util_1.ecrecover(msgHash,v,this.r,this.s,useChainIdWhileRecoveringPubKey?this.getChainId():void 0)}catch(e){return!1}return!!this._senderPubKey};Transaction.prototype.sign=function(privateKey){this.v=new buffer_1.Buffer([]);this.s=new buffer_1.Buffer([]);this.r=new buffer_1.Buffer([]);var msgHash=this.hash(!1);privateKey=
ethereumjs_util_1.ecsign(msgHash,privateKey);this._implementsEIP155()&&(privateKey.v+=2*this.getChainId()+8);Object.assign(this,privateKey)};Transaction.prototype.getDataFee=function(){for(var data=this.raw[5],cost=new ethereumjs_util_1.BN(0),i=0;i<data.length;i++)0===data[i]?cost.iaddn(this._common.param("gasPrices","txDataZero")):cost.iaddn(this._common.param("gasPrices","txDataNonZero"));return cost};Transaction.prototype.getBaseFee=function(){var fee=this.getDataFee().iaddn(this._common.param("gasPrices",
"tx"));this._common.gteHardfork("homestead")&&this.toCreationAddress()&&fee.iaddn(this._common.param("gasPrices","txCreation"));return fee};Transaction.prototype.getUpfrontCost=function(){return(new ethereumjs_util_1.BN(this.gasLimit)).imul(new ethereumjs_util_1.BN(this.gasPrice)).iadd(new ethereumjs_util_1.BN(this.value))};Transaction.prototype.validate=function(stringError){void 0===stringError&&(stringError=!1);var errors=[];this.verifySignature()||errors.push("Invalid Signature");0<this.getBaseFee().cmp(new ethereumjs_util_1.BN(this.gasLimit))&&
errors.push(["gas limit is too low. Need at least "+this.getBaseFee()]);return!1===stringError?0===errors.length:errors.join(" ")};Transaction.prototype.serialize=function(){return ethereumjs_util_1.rlp.encode(this.raw)};Transaction.prototype.toJSON=function(labels){return{}};Transaction.prototype._validateV=function(v){if(void 0!==v&&0!==v.length&&this._common.gteHardfork("spuriousDragon")&&(v=ethereumjs_util_1.bufferToInt(v),27!==v&&28!==v&&v!==2*this.getChainId()+35&&v!==2*this.getChainId()+36))throw Error("Incompatible EIP155-based V "+
v+" and chain id "+this.getChainId()+". See the second parameter of the Transaction constructor to set the chain id.");};Transaction.prototype._isSigned=function(){return 0<this.v.length&&0<this.r.length&&0<this.s.length};Transaction.prototype._overrideVSetterWithValidation=function(){var _this=this,vDescriptor=Object.getOwnPropertyDescriptor(this,"v");Object.defineProperty(this,"v",__assign({},vDescriptor,{set:function(v){void 0!==v&&_this._validateV(ethereumjs_util_1.toBuffer(v));vDescriptor.set(v)}}))};
Transaction.prototype._implementsEIP155=function(){var onEIP155BlockOrLater=this._common.gteHardfork("spuriousDragon");if(!this._isSigned())return onEIP155BlockOrLater;var v=ethereumjs_util_1.bufferToInt(this.v);return(v===2*this.getChainId()+35||v===2*this.getChainId()+36)&&onEIP155BlockOrLater};return Transaction}();exports.default=global}
//# sourceMappingURL=module$node_modules$ethereumjs_tx$dist$transaction.js.map
