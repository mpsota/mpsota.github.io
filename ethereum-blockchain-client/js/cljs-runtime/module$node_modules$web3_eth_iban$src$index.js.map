{
"version":3,
"file":"module$node_modules$web3_eth_iban$src$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/web3-eth-iban/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$web3_eth_iban$src$index\"] = function(global,require,module,exports) {\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\n\"use strict\";\n\nvar utils = require('web3-utils');\nvar BigNumber = require('bn.js');\n\n\nvar leftPad = function (string, bytes) {\n    var result = string;\n    while (result.length < bytes * 2) {\n        result = '0' + result;\n    }\n    return result;\n};\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nvar iso13616Prepare = function (iban) {\n    var A = 'A'.charCodeAt(0);\n    var Z = 'Z'.charCodeAt(0);\n\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0,4);\n\n    return iban.split('').map(function(n){\n        var code = n.charCodeAt(0);\n        if (code >= A && code <= Z){\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        } else {\n            return n;\n        }\n    }).join('');\n};\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nvar mod9710 = function (iban) {\n    var remainder = iban,\n        block;\n\n    while (remainder.length > 2){\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n\n    return parseInt(remainder, 10) % 97;\n};\n\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nvar Iban = function Iban(iban) {\n    this._iban = iban;\n};\n\n/**\n * This method should be used to create an ethereum address from a direct iban address\n *\n * @method toAddress\n * @param {String} iban address\n * @return {String} the ethereum address\n */\nIban.toAddress = function (ib) {\n    ib = new Iban(ib);\n\n    if(!ib.isDirect()) {\n        throw new Error('IBAN is indirect and can\\'t be converted');\n    }\n\n    return ib.toAddress();\n};\n\n/**\n * This method should be used to create iban address from an ethereum address\n *\n * @method toIban\n * @param {String} address\n * @return {String} the IBAN address\n */\nIban.toIban = function (address) {\n    return Iban.fromAddress(address).toString();\n};\n\n/**\n * This method should be used to create iban object from an ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\nIban.fromAddress = function (address) {\n    if(!utils.isAddress(address)){\n        throw new Error('Provided address is not a valid address: '+ address);\n    }\n\n    address = address.replace('0x','').replace('0X','');\n\n    var asBn = new BigNumber(address, 16);\n    var base36 = asBn.toString(36);\n    var padded = leftPad(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n};\n\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\nIban.fromBban = function (bban) {\n    var countryCode = 'XE';\n\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);\n\n    return new Iban(countryCode + checkDigit + bban);\n};\n\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\nIban.createIndirect = function (options) {\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n\n/**\n * This method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\nIban.isValid = function (iban) {\n    var i = new Iban(iban);\n    return i.isValid();\n};\n\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isValid = function () {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n        mod9710(iso13616Prepare(this._iban)) === 1;\n};\n\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isDirect = function () {\n    return this._iban.length === 34 || this._iban.length === 35;\n};\n\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isIndirect = function () {\n    return this._iban.length === 20;\n};\n\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\nIban.prototype.checksum = function () {\n    return this._iban.substr(2, 2);\n};\n\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\nIban.prototype.institution = function () {\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\nIban.prototype.client = function () {\n    return this.isIndirect() ? this._iban.substr(11) : '';\n};\n\n/**\n * Should be called to get client direct address\n *\n * @method toAddress\n * @returns {String} ethereum address\n */\nIban.prototype.toAddress = function () {\n    if (this.isDirect()) {\n        var base36 = this._iban.substr(4);\n        var asBn = new BigNumber(base36, 36);\n        return utils.toChecksumAddress(asBn.toString(16, 20));\n    }\n\n    return '';\n};\n\nIban.prototype.toString = function () {\n    return this._iban;\n};\n\nmodule.exports = Iban;\n\n};"],
"names":["shadow$provide","global","require","module","exports","utils","BigNumber","iso13616Prepare","iban","toUpperCase","substr","split","map","n","code","charCodeAt","A","Z","join","mod9710","block","remainder","length","slice","parseInt","Iban","_iban","toAddress","Iban.toAddress","ib","isDirect","Error","toIban","Iban.toIban","address","fromAddress","toString","Iban.fromAddress","isAddress","replace","result","asBn","base36","fromBban","Iban.fromBban","bban","checkDigit","countryCode","createIndirect","Iban.createIndirect","options","institution","identifier","isValid","Iban.isValid","i","prototype","Iban.prototype.isValid","test","Iban.prototype.isDirect","isIndirect","Iban.prototype.isIndirect","checksum","Iban.prototype.checksum","Iban.prototype.institution","client","Iban.prototype.client","Iban.prototype.toAddress","toChecksumAddress","Iban.prototype.toString"]
}
