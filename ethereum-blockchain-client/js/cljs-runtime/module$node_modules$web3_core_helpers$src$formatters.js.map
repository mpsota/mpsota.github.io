{
"version":3,
"file":"module$node_modules$web3_core_helpers$src$formatters.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/web3-core-helpers/src/formatters.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$web3_core_helpers$src$formatters\"] = function(global,require,module,exports) {\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n\n/**\n * Will format the given storage key array values to hex strings.\n *\n * @method inputStorageKeysFormatter\n *\n * @param {Array<Number|String|BN|BigNumber>} keys\n *\n * @returns {Array<String>}\n */\nvar inputStorageKeysFormatter = function (keys) {\n    return keys.map(utils.numberToHex);\n};\n\n/**\n * Will format the given proof response from the node.\n *\n * @method outputProofFormatter\n *\n * @param {object} proof\n *\n * @returns {object}\n */\nvar outputProofFormatter = function (proof) {\n    proof.address = utils.toChecksumAddress(proof.address);\n    proof.nonce = utils.hexToNumberString(proof.nonce);\n    proof.balance = utils.hexToNumberString(proof.balance);\n\n    return proof;\n};\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n *\n * @param {String|Number|BigNumber|BN} number\n *\n * @returns {BN} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\n/**\n * Returns true if the given blockNumber is 'latest', 'pending', or 'earliest.\n *\n * @method isPredefinedBlockNumber\n *\n * @param {String} blockNumber\n *\n * @returns {Boolean}\n */\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\n/**\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n *\n * @method inputDefaultBlockNumberFormatter\n *\n * @param {String|Number|BN|BigNumber} blockNumber\n *\n * @returns {String}\n */\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return inputBlockNumberFormatter(this.defaultBlock);\n    }\n\n    return inputBlockNumberFormatter(blockNumber);\n};\n\n/**\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n *\n * @param {String|Number|BN|BigNumber} blockNumber\n *\n * @returns {String}\n */\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    }\n\n    if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n\n    if (blockNumber === 'genesis') {\n        return '0x0';\n    }\n\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options) {\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if (options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function (key) {\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar inputCallFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n */\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n */\nvar outputTransactionFormatter = function (tx) {\n    if (tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if (tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if (tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if (tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n */\nvar outputTransactionReceiptFormatter = function (receipt) {\n    if (typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: ' + receipt);\n    }\n\n    if (receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if (receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if (_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if (receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if (typeof receipt.status !== 'undefined' && receipt.status !== null) {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n */\nvar outputBlockFormatter = function (block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if (block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if (block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function (item) {\n            if (!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\nvar inputLogFormatter = function (options) {\n    var toTopic = function (value) {\n\n        if (value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if (value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    if (options.fromBlock || options.fromBlock === 0)\n        options.fromBlock = inputBlockNumberFormatter(options.fromBlock);\n\n    if (options.toBlock || options.toBlock === 0)\n        options.toBlock = inputBlockNumberFormatter(options.toBlock);\n\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function (topic) {\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\nvar outputLogFormatter = function (log) {\n\n    // generate a custom log id\n    if (typeof log.blockHash === 'string' &&\n        typeof log.transactionHash === 'string' &&\n        typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''));\n        log.id = 'log_' + shaId.replace('0x', '').substr(0, 8);\n    } else if (!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n */\nvar inputPostFormatter = function (post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function (topic) {\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function (post) {\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function (topic) {\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x', '');\n    }\n    throw new Error('Provided address \"' + address + '\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function (result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    inputStorageKeysFormatter: inputStorageKeysFormatter,\n    outputProofFormatter: outputProofFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n\n};"],
"names":["shadow$provide","global","require","module","exports","_","utils","Iban","outputBigNumberFormatter","number","toBN","toString","inputBlockNumberFormatter","blockNumber","undefined","isHexStrict","isString","toLowerCase","numberToHex","_txInputFormatter","options","to","inputAddressFormatter","data","input","Error","isHex","gas","gasLimit","filter","key","forEach","outputTransactionFormatter","tx","hexToNumber","transactionIndex","nonce","gasPrice","value","isAddress","toChecksumAddress","from","outputLogFormatter","log","blockHash","transactionHash","logIndex","shaId","sha3","replace","id","substr","address","iban","isValid","isDirect","toAddress","inputDefaultBlockNumberFormatter","defaultBlock","inputCallFormatter","defaultAccount","inputTransactionFormatter","isNumber","isObject","inputPostFormatter","post","ttl","workToProve","priority","isArray","topics","map","topic","indexOf","fromUtf8","inputLogFormatter","toTopic","String","fromBlock","toBlock","addr","inputSignFormatter","utf8ToHex","inputStorageKeysFormatter","keys","outputProofFormatter","proof","hexToNumberString","balance","outputTransactionReceiptFormatter","receipt","cumulativeGasUsed","gasUsed","logs","contractAddress","status","parseInt","outputBlockFormatter","block","size","timestamp","difficulty","totalDifficulty","transactions","item","miner","outputPostFormatter","expiry","sent","workProved","toUtf8","outputSyncingFormatter","result","startingBlock","currentBlock","highestBlock","knownStates","pulledStates"]
}
