{
"version":3,
"file":"module$node_modules$eth_lib$lib$array.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAClG,IAAIC,SAAWA,QAAiB,CAACC,GAAD,CAAMC,EAAN,CAAU,CAExC,IADA,IAAIC,EAAI,EAAR,CACSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,GAApB,CAAyB,EAAEG,CAA3B,CACED,CAAAE,KAAA,CAAOH,EAAA,CAAGE,CAAH,CAAP,CACD,OAAOD,EAJgC,CAiC1CL,OAAAC,QAAA,CAAiB,CACfC,SAAUA,QADK,CAEfM,UA5BcA,QAAkB,CAACL,GAAD,CAAMM,GAAN,CAAW,CAC3C,MAAOP,SAAA,CAASC,GAAT,CAAc,QAAS,EAAG,CAC/B,MAAOM,IADwB,CAA1B,CADoC,CA0B5B,CAGfC,OAvBWA,QAAe,CAACL,CAAD,CAAIM,CAAJ,CAAO,CACjC,MAAON,EAAAK,OAAA,CAASC,CAAT,CAD0B,CAoBlB,CAIfC,QApBYA,QAAgB,CAACP,CAAD,CAAI,CAEhC,IADA,IAAIQ,EAAI,EAAR,CACSC,EAAI,CADb,CACgBC,EAAIV,CAAAW,OAApB,CAA8BF,CAA9B,CAAkCC,CAAlC,CAAqC,EAAED,CAAvC,CACE,IADwC,IAC/BR,EAAI,CAD2B,CACxBW,EAAIZ,CAAA,CAAES,CAAF,CAAAE,OAApB,CAAiCV,CAAjC,CAAqCW,CAArC,CAAwC,EAAEX,CAA1C,CACEO,CAAAN,KAAA,CAAOF,CAAA,CAAES,CAAF,CAAA,CAAKR,CAAL,CAAP,CAEH,OAAOO,EANwB,CAgBjB,CAKfK,SAZaA,QAAiB,CAACC,CAAD,CAAId,CAAJ,CAAO,CAErC,IADA,IAAIM,EAAI,EAAR,CACSL,EAAI,CADb,CACgBc,EAAIf,CAAAW,OAApB,CAA8BV,CAA9B,CAAkCc,CAAlC,CAAqCd,CAArC,EAA0Ca,CAA1C,CACER,CAAAJ,KAAA,CAAOF,CAAAgB,MAAA,CAAQf,CAAR;AAAWA,CAAX,CAAea,CAAf,CAAP,CACD,OAAOR,EAJ6B,CAOtB,CAlCiF;",
"sources":["node_modules/eth-lib/lib/array.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_lib$lib$array\"] = function(global,require,module,exports) {\nvar generate = function generate(num, fn) {\n  var a = [];\n  for (var i = 0; i < num; ++i) {\n    a.push(fn(i));\n  }return a;\n};\n\nvar replicate = function replicate(num, val) {\n  return generate(num, function () {\n    return val;\n  });\n};\n\nvar concat = function concat(a, b) {\n  return a.concat(b);\n};\n\nvar flatten = function flatten(a) {\n  var r = [];\n  for (var j = 0, J = a.length; j < J; ++j) {\n    for (var i = 0, I = a[j].length; i < I; ++i) {\n      r.push(a[j][i]);\n    }\n  }return r;\n};\n\nvar chunksOf = function chunksOf(n, a) {\n  var b = [];\n  for (var i = 0, l = a.length; i < l; i += n) {\n    b.push(a.slice(i, i + n));\n  }return b;\n};\n\nmodule.exports = {\n  generate: generate,\n  replicate: replicate,\n  concat: concat,\n  flatten: flatten,\n  chunksOf: chunksOf\n};\n};"],
"names":["shadow$provide","global","require","module","exports","generate","num","fn","a","i","push","replicate","val","concat","b","flatten","r","j","J","length","I","chunksOf","n","l","slice"]
}
