{
"version":3,
"file":"module$node_modules$lodash$fp$convert.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,sCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAC9FC,YAAcH,OAAA,CAAQ,4CAAR,CADgF,CAE9FI,KAAOJ,OAAA,CAAQ,qCAAR,CAgBXC,OAAAC,QAAA,CAJAG,QAAgB,CAACC,IAAD,CAAOC,IAAP,CAAaC,OAAb,CAAsB,CACpC,MAAOL,YAAA,CAAYC,IAAZ,CAAkBE,IAAlB,CAAwBC,IAAxB,CAA8BC,OAA9B,CAD6B,CAd4D;",
"sources":["node_modules/lodash/fp/convert.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$fp$convert\"] = function(global,require,module,exports) {\nvar baseConvert = require('./_baseConvert'),\n    util = require('./_util');\n\n/**\n * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last\n * version with conversion `options` applied. If `name` is an object its methods\n * will be converted.\n *\n * @param {string} name The name of the function to wrap.\n * @param {Function} [func] The function to wrap.\n * @param {Object} [options] The options object. See `baseConvert` for more details.\n * @returns {Function|Object} Returns the converted function or object.\n */\nfunction convert(name, func, options) {\n  return baseConvert(util, name, func, options);\n}\n\nmodule.exports = convert;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseConvert","util","convert","name","func","options"]
}
