{
"version":3,
"file":"module$node_modules$lodash$_baseInverter.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,yCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACrG,IAAIC,WAAaH,OAAA,CAAQ,wCAAR,CAoBjBC,OAAAC,QAAA,CAPAE,QAAqB,CAACC,eAAD,CAASC,MAAT,CAAiBC,QAAjB,CAA2BC,WAA3B,CAAwC,CAC3DL,UAAA,CAAWE,eAAX,CAAmB,QAAQ,CAACI,KAAD,CAAQC,GAAR,CAAaL,MAAb,CAAqB,CAC9CC,MAAA,CAAOE,WAAP,CAAoBD,QAAA,CAASE,KAAT,CAApB,CAAqCC,GAArC,CAA0CL,MAA1C,CAD8C,CAAhD,CAGA,OAAOG,YAJoD,CAdwC;",
"sources":["node_modules/lodash/_baseInverter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseInverter\"] = function(global,require,module,exports) {\nvar baseForOwn = require('./_baseForOwn');\n\n/**\n * The base implementation of `_.invert` and `_.invertBy` which inverts\n * `object` with values transformed by `iteratee` and set by `setter`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform values.\n * @param {Object} accumulator The initial inverted object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseInverter(object, setter, iteratee, accumulator) {\n  baseForOwn(object, function(value, key, object) {\n    setter(accumulator, iteratee(value), key, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseInverter;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseForOwn","baseInverter","object","setter","iteratee","accumulator","value","key"]
}
