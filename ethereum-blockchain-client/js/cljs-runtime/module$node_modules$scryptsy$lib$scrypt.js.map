{
"version":3,
"file":"module$node_modules$scryptsy$lib$scrypt.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACpG,IAAMC,OAASH,OAAA,CAAQ,6CAAR,CACT,OAAA,CAGFA,OAAA,CAAQ,wCAAR,CAFF,KAAAI,aAAA,MAAA,aAAA,CACAC,KAAA,MAAA,KAsBFJ,OAAAC,QAAA,CAlBAI,QAAsB,CAACC,GAAD,CAAMC,IAAN,CAAYC,CAAZ,CAAeC,CAAf,CAAkBC,CAAlB,CAAqBC,KAArB,CAA4BC,gBAA5B,CAA8CC,eAA9C,CAA+D,CAC7E,IAAA,0BAAA,CACJC,EADI,CAEJC,CAFI,CAGJC,GAHI,CAIJC,CAJI,CAKJC,EALI,CAMJC,CANI,CAOJC,YAPI,CAUGC,CAX0E,OAAA,QAAA,oCAAA,CAAA,QAAA,CAAA,yBAAA,CAAA,CAAA,OAAA,yBAAA,YAAA,EAAA,KAAA,CAAA,CAC7E,0BAUGA;AAFLlB,YAAA,CAAaG,GAAb,CAAkBC,IAAlB,CAAwBC,CAAxB,CAA2BC,CAA3B,CAA8BC,CAA9B,CAAiCC,KAAjC,CAAwCC,gBAAxC,CAEKS,CATPP,EASOO,CATP,0BAAA,GASOA,CARPN,CAQOM,CARP,0BAAA,EAQOA,CAPPL,GAOOK,CAPP,0BAAA,IAOOA,CANPJ,CAMOI,CANP,0BAAA,EAMOA,CALPH,EAKOG,CALP,0BAAA,GAKOA,CAJPF,CAIOE,CAJP,0BAAA,EAIOA,CAHPD,YAGOC,CAHP,0BAAA,aAGOA,CAAAA,CAAAA,CAAI,CAXsE,MAAA,CAAA,CAWnF,GAAgB,EAAAA,CAAA,CAAIX,CAAJ,CAAhB,CAAA,CAAA,yBAAA,OAAA,CAAA,CAAA,CAAA,MAAA,CACE,MAAA,0BAAA,MAAA,CAAMN,IAAA,CAAKe,CAAL,CAAY,GAAZ,CAAQE,CAAR,CAAkBZ,CAAlB,CAAqBA,CAArB,CAAwBD,CAAxB,CAA2BO,CAA3B,CAA8BD,EAA9B,CAAkCI,EAAlC,CAAsCF,GAAtC,CAA2CC,CAA3C,CAA8CG,YAA9C,CAA4DP,eAA5D,CAAN,CAAA,CAAA,CAZiF,MAAA,CAAA,CAW5DQ,CAAA,EAAvB,0BAAA,OAAA,CAAA,CAAA,CAAA;KAXmF,MAAA,CAAA,CAenF,MAAA,0BAAA,OAAA,CAAOnB,MAAAoB,WAAA,CAAkBhB,GAAlB,CAAuBa,CAAvB,CAA0B,CAA1B,CAA6BR,KAA7B,CAAoC,QAApC,CAAP,CAfmF,CAAA,CAAA,CAAA,CARe;",
"sources":["node_modules/scryptsy/lib/scrypt.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$scryptsy$lib$scrypt\"] = function(global,require,module,exports) {\nconst crypto = require('crypto')\nconst {\n  checkAndInit,\n  smix\n} = require('./utils')\n\n// N = Cpu cost, r = Memory cost, p = parallelization cost\nasync function scrypt (key, salt, N, r, p, dkLen, progressCallback, promiseInterval) {\n  const {\n    XY,\n    V,\n    B32,\n    x,\n    _X,\n    B,\n    tickCallback\n  } = checkAndInit(key, salt, N, r, p, dkLen, progressCallback)\n\n  for (var i = 0; i < p; i++) {\n    await smix(B, i * 128 * r, r, N, V, XY, _X, B32, x, tickCallback, promiseInterval)\n  }\n\n  return crypto.pbkdf2Sync(key, B, 1, dkLen, 'sha256')\n}\n\nmodule.exports = scrypt\n\n};"],
"names":["shadow$provide","global","require","module","exports","crypto","checkAndInit","smix","scrypt","key","salt","N","r","p","dkLen","progressCallback","promiseInterval","XY","V","B32","x","_X","B","tickCallback","i","pbkdf2Sync"]
}
