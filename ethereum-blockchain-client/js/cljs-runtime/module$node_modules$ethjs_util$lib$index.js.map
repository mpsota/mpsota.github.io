{
"version":3,
"file":"module$node_modules$ethjs_util$lib$index.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/ethjs-util/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethjs_util$lib$index\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\n\nvar isHexPrefixed = require('is-hex-prefixed');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Pads a `String` to have an even length\n * @param {String} value\n * @return {String} output\n */\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');\n  }\n\n  if (a.length % 2) {\n    a = '0' + a;\n  }\n\n  return a;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return '0x' + hex;\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n\n  return new Buffer(padToEven(hex.slice(2)), 'hex');\n}\n\n/**\n * Get the binary size of a string\n * @param {String} str\n * @return {Number}\n */\nfunction getBinarySize(str) {\n  if (typeof str !== 'string') {\n    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \\'str\\' to be type String, got \\'' + typeof str + '\\'.');\n  }\n\n  return Buffer.byteLength(str, 'utf8');\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param {array} superset\n * @param {array} subset\n *\n * @returns {boolean}\n */\nfunction arrayContainsArray(superset, subset, some) {\n  if (Array.isArray(superset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'superset\\' to be an array got type \\'' + typeof superset + '\\'');\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'subset\\' to be an array got type \\'' + typeof subset + '\\'');\n  }\n\n  return subset[Boolean(some) && 'some' || 'every'](function (value) {\n    return superset.indexOf(value) >= 0;\n  });\n}\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toUtf8(hex) {\n  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');\n\n  return bufferValue.toString('utf8');\n}\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toAscii(hex) {\n  var str = ''; // eslint-disable-line\n  var i = 0,\n      l = hex.length; // eslint-disable-line\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n\n  return str;\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n  var str = new Buffer(stringValue, 'utf8');\n\n  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromAscii(stringValue) {\n  var hex = ''; // eslint-disable-line\n  for (var i = 0; i < stringValue.length; i++) {\n    // eslint-disable-line\n    var code = stringValue.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n\n  return '0x' + hex;\n}\n\n/**\n * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]\n *\n * @method getKeys get specific key from inner object array of objects\n * @param {String} params\n * @param {String} key\n * @param {Boolean} allowEmpty\n * @returns {Array} output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n  if (!Array.isArray(params)) {\n    throw new Error('[ethjs-util] method getKeys expecting type Array as \\'params\\' input, got \\'' + typeof params + '\\'');\n  }\n  if (typeof key !== 'string') {\n    throw new Error('[ethjs-util] method getKeys expecting type String for input \\'key\\' got \\'' + typeof key + '\\'.');\n  }\n\n  var result = []; // eslint-disable-line\n\n  for (var i = 0; i < params.length; i++) {\n    // eslint-disable-line\n    var value = params[i][key]; // eslint-disable-line\n    if (allowEmpty && !value) {\n      value = '';\n    } else if (typeof value !== 'string') {\n      throw new Error('invalid abi');\n    }\n    result.push(value);\n  }\n\n  return result;\n}\n\n/**\n * Is the string a hex string.\n *\n * @method check if string is hex string of specific length\n * @param {String} value\n * @param {Number} length\n * @returns {Boolean} output the string is a hex string\n */\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  arrayContainsArray: arrayContainsArray,\n  intToBuffer: intToBuffer,\n  getBinarySize: getBinarySize,\n  isHexPrefixed: isHexPrefixed,\n  stripHexPrefix: stripHexPrefix,\n  padToEven: padToEven,\n  intToHex: intToHex,\n  fromAscii: fromAscii,\n  fromUtf8: fromUtf8,\n  toAscii: toAscii,\n  toUtf8: toUtf8,\n  getKeys: getKeys,\n  isHexString: isHexString\n};\n};"],
"names":["shadow$provide","global","require","module","exports","padToEven","value","a","Error","length","intToHex","i","toString","hex","Buffer","isHexPrefixed","stripHexPrefix","arrayContainsArray","superset","subset","some","Array","isArray","indexOf","intToBuffer","slice","getBinarySize","str","byteLength","fromAscii","stringValue","n","charCodeAt","code","fromUtf8","replace","toAscii","l","substring","parseInt","substr","String","fromCharCode","toUtf8","bufferValue","getKeys","params","key","allowEmpty","result","push","isHexString","match"]
}
