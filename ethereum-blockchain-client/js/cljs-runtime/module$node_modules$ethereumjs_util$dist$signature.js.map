{
"version":3,
"file":"module$node_modules$ethereumjs_util$dist$signature.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/ethereumjs-util/dist/signature.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereumjs_util$dist$signature\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar secp256k1 = require('secp256k1');\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\n/**\n * Returns the ECDSA signature of a message hash.\n */\nexports.ecsign = function (msgHash, privateKey, chainId) {\n    var sig = secp256k1.sign(msgHash, privateKey);\n    var recovery = sig.recovery;\n    var ret = {\n        r: sig.signature.slice(0, 32),\n        s: sig.signature.slice(32, 64),\n        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,\n    };\n    return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n    var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nexports.toRpcSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nexports.fromRpcSig = function (sig) {\n    var buf = bytes_1.toBuffer(sig);\n    // NOTE: with potential introduction of chainId this might need to be updated\n    if (buf.length !== 65) {\n        throw new Error('Invalid signature length');\n    }\n    var v = buf[64];\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: buf.slice(0, 32),\n        s: buf.slice(32, 64),\n    };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\n    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    var rBN = new BN(r);\n    var sBN = new BN(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexports.hashPersonalMessage = function (message) {\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n    return hash_1.keccak(Buffer.concat([prefix, message]));\n};\nfunction calculateSigRecovery(v, chainId) {\n    return chainId ? v - (2 * chainId + 35) : v - 27;\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === 0 || recovery === 1;\n}\n//# sourceMappingURL=signature.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","secp256k1","BN","bytes_1","hash_1","ecsign","exports.ecsign","msgHash","privateKey","chainId","sig","sign","recovery","ret","r","signature","slice","s","v","ecrecover","exports.ecrecover","concat","setLength","Error","senderPubKey","recover","publicKeyConvert","toRpcSig","exports.toRpcSig","bufferToHex","setLengthLeft","toBuffer","fromRpcSig","exports.fromRpcSig","buf","length","isValidSignature","exports.isValidSignature","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","isZero","gt","cmp","hashPersonalMessage","exports.hashPersonalMessage","message","prefix","from","toString","keccak"]
}
