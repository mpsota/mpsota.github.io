{
"version":3,
"file":"module$node_modules$eth_lib$lib$rlp.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/eth-lib/lib/rlp.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_lib$lib$rlp\"] = function(global,require,module,exports) {\n// The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\n\nvar encode = function encode(tree) {\n  var padEven = function padEven(str) {\n    return str.length % 2 === 0 ? str : \"0\" + str;\n  };\n\n  var uint = function uint(num) {\n    return padEven(num.toString(16));\n  };\n\n  var length = function length(len, add) {\n    return len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n  };\n\n  var dataTree = function dataTree(tree) {\n    if (typeof tree === \"string\") {\n      var hex = tree.slice(2);\n      var pre = hex.length != 2 || hex >= \"80\" ? length(hex.length / 2, 128) : \"\";\n      return pre + hex;\n    } else {\n      var _hex = tree.map(dataTree).join(\"\");\n      var _pre = length(_hex.length / 2, 192);\n      return _pre + _hex;\n    }\n  };\n\n  return \"0x\" + dataTree(tree);\n};\n\nvar decode = function decode(hex) {\n  var i = 2;\n\n  var parseTree = function parseTree() {\n    if (i >= hex.length) throw \"\";\n    var head = hex.slice(i, i + 2);\n    return head < \"80\" ? (i += 2, \"0x\" + head) : head < \"c0\" ? parseHex() : parseList();\n  };\n\n  var parseLength = function parseLength() {\n    var len = parseInt(hex.slice(i, i += 2), 16) % 64;\n    return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n  };\n\n  var parseHex = function parseHex() {\n    var len = parseLength();\n    return \"0x\" + hex.slice(i, i += len * 2);\n  };\n\n  var parseList = function parseList() {\n    var lim = parseLength() * 2 + i;\n    var list = [];\n    while (i < lim) {\n      list.push(parseTree());\n    }return list;\n  };\n\n  try {\n    return parseTree();\n  } catch (e) {\n    return [];\n  }\n};\n\nmodule.exports = { encode: encode, decode: decode };\n};"],
"names":["shadow$provide","global","require","module","exports","encode","tree","padEven","str","length","len","add","toString","dataTree","hex","slice","pre","_hex","map","join","_pre","decode","i","parseTree","head","parseLength","lim","list","push","parseInt","e"]
}
