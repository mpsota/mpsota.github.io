{"version":3,"sources":["ebc/contract.cljs"],"mappings":";;;;;AAQA,AAAA,AAAKA;AACL,AAAA,AAAKC;AACL,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAASC;;AACT,AAAA,AAAAH,AAAAC,AAAAG;AAAA;AAAA,AAAA,AAAA,AAASC;;AACT,AAAA,AAAKC;AAeL,AAAA,AAAMC,AAAyBC,AAAKC,AAAOC;AAA3C,AACM,AAAMC,AAAI,AAAOH;AAAjB,AACK,AAAcA,AAAKI;;AACnB,AAAA,AAAK,AAAYD,AAAKE,AAAad,AAA4BU,AACDC;;AAGzE;;;AAAA,AAAMI,AAECN,AAAKC,AAAOM,AAAOL,AAAUM,AAAoBC,AAAWC;AAFnE,AAGM,AAACC,AAAeV,AAAOM,AAAOL;;AAC9B,AAAMU,AAAS,AAACb,AAAwBC,AAAKC,AAAOC;AAC9CW,AAAQ,AAAO,AAAU,AAAWD,AAAUtB,AAAyBiB;AAD7E,AAEK,AAAAO,AAAMD;AAAN,AAAA,AAAAC,AAAA,AAC6BN;;AAD7B,AAAAM,AAAA,AAEqBL;;AAFrB,AAAAK,AAAA,AAGmBJ;;AAHnBI;;AAKX,AAAA,AAAMC,AAAiBf,AAAKC,AAAOC,AAAUc;AAA7C,AAAA;AAEM,AAAMJ,AAAS,AAACb,AAAwBC,AAAKC,AAAOC;AAApD,AACK,AAAO,AAAY,AAAWU,AAAUX,AAAQe;;AAI3D,AAAA,AAAMC,AAAuBjB;AAA7B,AACM,AAAMG,AAAI,AAAOH;AAAjB,AACK,AAAcA,AAAKI;;AACnB,AAAK,AAAYD,AAAKe,AAAY5B;;AAG7C,AAAA,AAAM6B,AAAuBnB,AAAKC,AAAOmB,AAASC,AAAQC,AAAeC,AAASf,AAAoBC,AAAWC;AAAjH,AAEM,AAAMc,AAAU,AAACC,AAAW,AAAA,AAAG,AAAU,AAAKC;AACxCC,AAAW,AAAGH,AAAU,AAACI,AAAUN;AACnCO,AAAS,AAAG,AAACD,AAAUL,AAAUI;AAFvC,AAGK,AAAChB,AAAeU,AAAQM,AAAWE;;AACnC,AAAMhB,AAAQ,AAAA,AAAO,AAAe,AAAW,AAACI,AAAsBjB,AAClCoB,AAASC,AAAQ9B,AAAkBoC,AAAWE,AACnD5B,AAAYH;AAF3C,AAGK,AAAAgC,AAAMjB;AAAN,AAAA,AAAAiB,AAAA,AAC6BtB;;AAD7B,AAAAsB,AAAA,AAEqBrB;;AAFrB,AAAAqB,AAAA,AAGmBpB;;AAHnBoB;;AAOhB,AAAA,AAAKC;AAEL,AAAA,AAAMC,AAAsBhC;AAA5B,AACM,AAAA,AAAAiC,AAAAC,AAAO,AAAA,AAAA,AAAqB,AAAW,AAACjB,AAAsBjB;AAA9D,AAGQ,AAAAkC,AAACvB;;;AAEf,AAAA,AAAMwB,AAAmBnC,AAAKoC;AAA9B,AACM,AAAA,AAAAC,AAAAC,AAAO,AAAA,AAAY,AAAW,AAACrB,AAAsBjB,AAEzBoC;AAF5B,AAGQ,AAAAE,AAAC3B;;;AAEf,AAAA,AAAM4B,AAAUvC,AAAKwC;AAArB,AACM,AAAA,AAAAC,AAAAC,AAAO,AAAU,AAAW,AAACzB,AAAsBjB,AAChCwC;AADnB,AAEQ,AAAAE,AAAC/B","names":["ebc.contract/sablier-contract-address","ebc.contract/dai-token-address","js/ebc","js/ebc.contract","js/ebc.contract.receiver","ebc.contract/receiver","js/ebc.contract.address","ebc.contract/address","ebc.contract/gas-limit","ebc.contract/make-dai-token-contract","web3","sender","gas-limit","eth","js/module$node_modules$web3$src$index.givenProvider","ebc.sablier/test-dai-abi","ebc.contract/approve-dai-sablier-contract","amount","transaction-hash-fn","receipt-fn","error-fn","js/console.log","contract","promise","G__28166","ebc.contract/get-dai-balance","callback-fn","ebc.contract/make-sablier-contract","ebc.sablier/sablier-abi","ebc.contract/create-sablier-stream","receiver","deposit","time-since-now","duration","epoch-now","Math/round","js/Date.","start-time","js/Number","end-time","G__28169","ebc.contract/tx","ebc.contract/withdraw-from-stream","p1__28171#","p2__28170#","ebc.contract/balance-of-stream","owner","p1__28173#","p2__28172#","ebc.contract/delta-of","id","p1__28175#","p2__28174#"],"sourcesContent":["(ns ebc.contract\n  (:require [ebc.sablier :refer [sablier-abi test-dai-abi]]\n            [\"web3\" :as Web3]\n            [promesa.core :as p]))\n\n;; To get free test DAI you should mint contract at https://rinkeby.etherscan.io/address/0xc3dbf84abb494ce5199d5d4d815b10ec29529ff8#writeContract\n;; source: https://twitter.com/PaulRBerg/status/1198276654566723584\n\n(def sablier-contract-address \"0xc04Ad234E01327b24a831e3718DBFcbE245904CC\") ;;sablier contract address\n(def dai-token-address \"0xc3dbf84Abb494ce5199D5d4D815b10EC29529ff8\")\n(defonce receiver \"0xE15cEDc7fBe317eE989B57d7229149bE3210DF71\") ;; debug only\n(defonce address \"0xDF769Af9BEEB64c8F2e9682867061129E94B0fB2\") ;; debug only\n(def gas-limit 10000000)\n\n;;Create Stream  <250K\n;Withdraw from Stream ;<90K\n;Cancel Stream <120K\n;Create \"Compounding\" Stream <475K\n;Withdraw from \"Compounding\" Stream <280K\n;Cancel \"Compounding\" Stream <200K\n\n; (def contract (.-Contract (.-eth web3) contract-abi contract-address))\n; (.methods contract)\n; (.call (.name ..\n\n;; DAI token to approve send\n\n(defn make-dai-token-contract [web3 sender gas-limit]\n      (let [eth (.-eth web3)]\n           (.setProvider web3 Web3/givenProvider)\n           (new (.-Contract eth) test-dai-abi dai-token-address #js{:from sender\n                                                                    :gas gas-limit})))\n\n\n(defn approve-dai-sablier-contract\n      \"Approves `amount` of dai tokens to be send from `sender` account to sablier-contract-address\"\n      [web3 sender amount gas-limit transaction-hash-fn receipt-fn error-fn]\n      (js/console.log sender amount gas-limit)\n      (let [contract (make-dai-token-contract web3 sender gas-limit)\n            promise (.send (.approve (.-methods contract) sablier-contract-address amount))]\n           (doto promise\n                 (.on \"transactionHash\" transaction-hash-fn)\n                 (.on \"receipt\" receipt-fn)\n                 (.on \"error\" error-fn))))\n\n(defn get-dai-balance [web3 sender gas-limit callback-fn]\n      \"Return balance (DAI tokens)\"\n      (let [contract (make-dai-token-contract web3 sender gas-limit)]\n           (.call (.balanceOf (.-methods contract) sender) callback-fn)))\n\n;; Stream using Sablier protocol\n\n(defn make-sablier-contract [web3]\n      (let [eth (.-eth web3)]\n           (.setProvider web3 Web3/givenProvider)\n           (new (.-Contract eth) sablier-abi sablier-contract-address)\n           ))\n\n(defn create-sablier-stream [web3 sender receiver deposit time-since-now duration transaction-hash-fn receipt-fn error-fn]\n      ;; deposit must be a multiple of the difference between the stop time and the start time,\n      (let [epoch-now (Math/round (/ (.getTime (new js/Date.)) 1000))\n            start-time (+ epoch-now (js/Number time-since-now))\n            end-time (+ (js/Number duration) start-time)]\n           (js/console.log deposit start-time end-time)\n           (let [promise (.send (.createStream (.-methods (make-sablier-contract web3))\n                                               receiver deposit dai-token-address start-time end-time)\n                                #js{:from sender :gas gas-limit})]\n                (doto promise\n                      (.on \"transactionHash\" transaction-hash-fn)\n                      (.on \"receipt\" receipt-fn)\n                      (.on \"error\" error-fn)))))\n\n;; debug functions\n\n(def tx \"0x047dabc9d3ed35d2d5e29f8e760e73a81b54bdb51a05ac4dce958bedee57b863\")\n\n(defn withdraw-from-stream [web3]\n      (.call (.withdrawFromStream (.-methods (make-sablier-contract web3))\n                                  \"22\"\n                                  \"360000060\")\n             #(js/console.log %2)))\n\n(defn balance-of-stream [web3 owner]\n      (.call (.balanceOf (.-methods (make-sablier-contract web3))\n                                  \"22\"\n                                  owner)\n             #(js/console.log %2)))\n\n(defn delta-of [web3 id]\n      (.call (.deltaOf (.-methods (make-sablier-contract web3))\n                         id)\n             #(js/console.log %2)))\n"]}