{"version":3,"sources":["ebc/client.cljs"],"mappings":";;;;;;;AAQA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAK,AAAA,AAACC;;AACf,AAAA,AAAAJ,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAQ,AAAA,AAACF;;AAClB,AAAA,AAAAJ,AAAAC,AAAAM;AAAA;AAAA,AAAA,AAASC,AAAe,AAAA,AAACJ;;AAWzB,AAAA,AAAAJ,AAAAC,AAAAQ;AAAA;AAAA,AAAA,AAAA,AAASC;;AACT,AAAA,AAAAV,AAAAC,AAAAU;AAAA;AAAA,AAAA,AAAA,AAASC;;AAST,AAAA,AAAMC,AAAcC;AAApB,AACM,AAAc,AAAA,AAAAC,AAAQZ,AAAMW;;AAKlC,AAAA,AAAME;AAAN,AACM,AAACC,AAAAA,AAAAA;;AACD,AAACJ,AAAa,AAAKK,AAAGC;AAAR,AACI,AAACC,AAAMD,AAASD;;AAChB,AAACG,AAAOb,AAAeW","names":["js/ebc","js/ebc.client","js/ebc.client.web3","ebc.client/web3","cljs.core.atom","js/ebc.client.balance","ebc.client/balance","js/ebc.client.local-accounts","ebc.client/local-accounts","js/ebc.client.receiver","ebc.client/receiver","js/ebc.client.address","ebc.client/address","ebc.client/get-accounts","fn","cljs.core/deref","ebc.client/start","ebc.client/connect","_e","accounts","cljs.core.print","cljs.core/reset!"],"sourcesContent":["(ns ebc.client\n  (:require\n    [ebc.devtools :as devtools]\n    [re-frame.core :as rf]\n    [\"web3\" :as Web3]\n    [\"web3-eth-personal\" :as w3-personal]\n    [\"web3-eth\" :as w3-eth]))\n\n(defonce web3 (atom nil))\n(defonce balance (atom nil))\n(defonce local-accounts (atom []))\n\n\n(defmacro inline-resource [resource-path]\n          (slurp resource-path))\n\n\n;(defonce web3 (atom nil))\n\n\n\n(defonce receiver \"0xE15cEDc7fBe317eE989B57d7229149bE3210DF71\") ;; debug only\n(defonce address \"0xDF769Af9BEEB64c8F2e9682867061129E94B0fB2\") ;; debug only\n\n\n\n\n#_(client/send-transaction (:web3 @re-frame.db/app-db) (:current-account @re-frame.db/app-db)\n                           (:receiver (:send-directly-form @re-frame.db/app-db))\n                           (:amount (:send-directly-form @re-frame.db/app-db)))\n\n(defn get-accounts [fn]\n      (.getAccounts (.-eth @web3) fn))\n\n\n; (.getBalance (.-eth web3) address (fn [e v] (js/console.log (.fromWei (.-utils web3) v))))\n\n(defn start []\n      (connect)\n      (get-accounts (fn [_e accounts]\n                        (print accounts _e)\n                        (reset! local-accounts accounts))))\n\n#_(def f (w3/eth web3 address (fn [_e bal]\n                                 (println bal)\n                                 #_(reset! @balance bal))))\n"]}