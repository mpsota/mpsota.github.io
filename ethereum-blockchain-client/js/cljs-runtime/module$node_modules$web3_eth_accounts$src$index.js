shadow$provide.module$node_modules$web3_eth_accounts$src$index=function(global,require,module,exports){function Wallet(accounts){this._accounts=accounts;this.length=0;this.defaultKeyName="web3js_wallet"}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";var _=require("module$node_modules$underscore$underscore"),core=require("module$node_modules$web3_core$src$index"),Method=require("module$node_modules$web3_core_method$src$index"),Promise=require("module$node_modules$any_promise$index"),
Account=require("module$node_modules$eth_lib$lib$account"),Hash=require("module$node_modules$eth_lib$lib$hash"),RLP=require("module$node_modules$eth_lib$lib$rlp"),Bytes=require("module$node_modules$eth_lib$lib$bytes"),cryp=require("module$node_modules$crypto_browserify$index"),scrypt=require("module$node_modules$$web3_js$scrypt_shim$src$browser"),uuid=require("module$node_modules$uuid$index"),utils=require("module$node_modules$web3_utils$src$index"),helpers=require("module$node_modules$web3_core_helpers$src$index"),
Transaction=require("module$node_modules$ethereumjs_tx$dist$index").Transaction,Common=require("module$node_modules$ethereumjs_common$dist$index").default,isNot=function(value){return _.isUndefined(value)||_.isNull(value)};global=function(){var _this=this;core.packageInit(this,arguments);delete this.BatchRequest;delete this.extend;var _ethereumCall=[new Method({name:"getNetworkId",call:"net_version",params:0,outputFormatter:parseInt}),new Method({name:"getChainId",call:"eth_chainId",params:0,outputFormatter:utils.hexToNumber}),
new Method({name:"getGasPrice",call:"eth_gasPrice",params:0}),new Method({name:"getTransactionCount",call:"eth_getTransactionCount",params:2,inputFormatter:[function(address){if(utils.isAddress(address))return address;throw Error("Address "+address+' is not a valid address to get the "transactionCount".');},function(){return"latest"}]})];this._ethereumCall={};_.each(_ethereumCall,function(method){method.attachToObject(_this._ethereumCall);method.setRequestManager(_this._requestManager)});this.wallet=
new Wallet(this)};global.prototype._addAccountFunctions=function(account){var _this=this;account.signTransaction=function(tx,callback){return _this.signTransaction(tx,account.privateKey,callback)};account.sign=function(data){return _this.sign(data,account.privateKey)};account.encrypt=function(password,options){return _this.encrypt(account.privateKey,password,options)};return account};global.prototype.create=function(entropy){return this._addAccountFunctions(Account.create(entropy||utils.randomHex(32)))};
global.prototype.privateKeyToAccount=function(privateKey){return this._addAccountFunctions(Account.fromPrivate(privateKey))};global.prototype.signTransaction=function(tx$jscomp$0,privateKey,callback){function signed(tx){tx.common&&tx.chain&&tx.hardfork&&(error=Error("Please provide the ethereumjs-common object or the chain and hardfork property but not all together."));if(tx.chain&&!tx.hardfork||tx.hardfork&&!tx.chain)error=Error('When specifying chain and hardfork, both values must be defined. Received "chain": '+
tx.chain+', "hardfork": '+tx.hardfork);tx.gas||tx.gasLimit||(error=Error('"gas" is missing'));if(0>tx.nonce||0>tx.gas||0>tx.gasPrice||0>tx.chainId)error=Error("Gas, gasPrice, nonce or chainId is lower than 0");if(error)return callback(error),Promise.reject(error);try{var transaction=helpers.formatters.inputCallFormatter(_.clone(tx));transaction.to=transaction.to||"0x";transaction.data=transaction.data||"0x";transaction.value=transaction.value||"0x";transaction.chainId=utils.numberToHex(transaction.chainId);
hasTxSigningOptions?(transaction.common&&(transactionOptions.common=Common.forCustomChain(transaction.common.baseChain||"mainnet",{name:transaction.common.customChain.name||"custom-network",networkId:transaction.common.customChain.networkId,chainId:transaction.common.customChain.chainId},transaction.common.hardfork||"petersburg"),delete transaction.common),transaction.chain&&(transactionOptions.chain=transaction.chain,delete transaction.chain),transaction.hardfork&&(transactionOptions.hardfork=transaction.hardfork,
delete transaction.hardfork)):(transactionOptions.common=Common.forCustomChain("mainnet",{name:"custom-network",networkId:transaction.networkId,chainId:transaction.chainId},"petersburg"),delete transaction.networkId);privateKey.startsWith("0x")&&(privateKey=privateKey.substring(2));var ethTx=new Transaction(transaction,transactionOptions);ethTx.sign(Buffer.from(privateKey,"hex"));var validationResult=ethTx.validate(!0);if(""!==validationResult)throw Error("Signer Error: "+validationResult);var rawTransaction=
"0x"+ethTx.serialize().toString("hex"),transactionHash=utils.keccak256(rawTransaction),result={messageHash:"0x"+Buffer.from(ethTx.hash(!1)).toString("hex"),v:"0x"+Buffer.from(ethTx.v).toString("hex"),r:"0x"+Buffer.from(ethTx.r).toString("hex"),s:"0x"+Buffer.from(ethTx.s).toString("hex"),rawTransaction:rawTransaction,transactionHash:transactionHash};callback(null,result);return result}catch(e){return callback(e),Promise.reject(e)}}var error=!1,transactionOptions={},hasTxSigningOptions=!(!tx$jscomp$0||
!(tx$jscomp$0.chain&&tx$jscomp$0.hardfork||tx$jscomp$0.common));callback=callback||function(){};return tx$jscomp$0?void 0!==tx$jscomp$0.nonce&&void 0!==tx$jscomp$0.chainId&&void 0!==tx$jscomp$0.gasPrice&&hasTxSigningOptions?Promise.resolve(signed(tx$jscomp$0)):Promise.all([isNot(tx$jscomp$0.chainId)?this._ethereumCall.getChainId():tx$jscomp$0.chainId,isNot(tx$jscomp$0.gasPrice)?this._ethereumCall.getGasPrice():tx$jscomp$0.gasPrice,isNot(tx$jscomp$0.nonce)?this._ethereumCall.getTransactionCount(this.privateKeyToAccount(privateKey).address):
tx$jscomp$0.nonce,isNot(hasTxSigningOptions)?this._ethereumCall.getNetworkId():1]).then(function(args){if(isNot(args[0])||isNot(args[1])||isNot(args[2])||isNot(args[3]))throw Error('One of the values "chainId", "networkId", "gasPrice", or "nonce" couldn\'t be fetched: '+JSON.stringify(args));return signed(_.extend(tx$jscomp$0,{chainId:args[0],gasPrice:args[1],nonce:args[2],networkId:args[3]}))}):(error=Error("No transaction object given!"),callback(error),Promise.reject(error))};global.prototype.recoverTransaction=
function(rawTx){var values=RLP.decode(rawTx);rawTx=Account.encodeSignature(values.slice(6,9));var recovery=Bytes.toNumber(values[6]);recovery=35>recovery?[]:[Bytes.fromNumber(recovery-35>>1),"0x","0x"];values=values.slice(0,6).concat(recovery);values=RLP.encode(values);return Account.recover(Hash.keccak256(values),rawTx)};global.prototype.hashMessage=function(data){var message=utils.isHexStrict(data)?utils.hexToBytes(data):data;data=Buffer.from(message);message=Buffer.from("Ethereum Signed Message:\n"+
message.length);data=Buffer.concat([message,data]);return Hash.keccak256s(data)};global.prototype.sign=function(data,privateKey){var hash=this.hashMessage(data);privateKey=Account.sign(hash,privateKey);var vrs=Account.decodeSignature(privateKey);return{message:data,messageHash:hash,v:vrs[0],r:vrs[1],s:vrs[2],signature:privateKey}};global.prototype.recover=function(message,signature,preFixed){var args=[].slice.apply(arguments);if(_.isObject(message))return this.recover(message.messageHash,Account.encodeSignature([message.v,
message.r,message.s]),!0);preFixed||(message=this.hashMessage(message));return 4<=args.length?(preFixed=args.slice(-1)[0],preFixed=_.isBoolean(preFixed)?!!preFixed:!1,this.recover(message,Account.encodeSignature(args.slice(1,4)),preFixed)):Account.recover(message,signature)};global.prototype.decrypt=function(v3Keystore,password,nonStrict){if(!_.isString(password))throw Error("No password given.");v3Keystore=_.isObject(v3Keystore)?v3Keystore:JSON.parse(nonStrict?v3Keystore.toLowerCase():v3Keystore);
if(3!==v3Keystore.version)throw Error("Not a valid V3 wallet");if("scrypt"===v3Keystore.crypto.kdf)nonStrict=v3Keystore.crypto.kdfparams,nonStrict=scrypt(Buffer.from(password),Buffer.from(nonStrict.salt,"hex"),nonStrict.n,nonStrict.r,nonStrict.p,nonStrict.dklen);else if("pbkdf2"===v3Keystore.crypto.kdf){nonStrict=v3Keystore.crypto.kdfparams;if("hmac-sha256"!==nonStrict.prf)throw Error("Unsupported parameters to PBKDF2");nonStrict=cryp.pbkdf2Sync(Buffer.from(password),Buffer.from(nonStrict.salt,"hex"),
nonStrict.c,nonStrict.dklen,"sha256")}else throw Error("Unsupported key derivation scheme");password=Buffer.from(v3Keystore.crypto.ciphertext,"hex");if(utils.sha3(Buffer.concat([nonStrict.slice(16,32),password])).replace("0x","")!==v3Keystore.crypto.mac)throw Error("Key derivation failed - possibly wrong password");v3Keystore=cryp.createDecipheriv(v3Keystore.crypto.cipher,nonStrict.slice(0,16),Buffer.from(v3Keystore.crypto.cipherparams.iv,"hex"));password="0x"+Buffer.concat([v3Keystore.update(password),
v3Keystore.final()]).toString("hex");return this.privateKeyToAccount(password)};global.prototype.encrypt=function(privateKey,password,options){privateKey=this.privateKeyToAccount(privateKey);options=options||{};var salt=options.salt||cryp.randomBytes(32),iv=options.iv||cryp.randomBytes(16),kdf=options.kdf||"scrypt";salt={dklen:options.dklen||32,salt:salt.toString("hex")};if("pbkdf2"===kdf)salt.c=options.c||262144,salt.prf="hmac-sha256",password=cryp.pbkdf2Sync(Buffer.from(password),Buffer.from(salt.salt,
"hex"),salt.c,salt.dklen,"sha256");else if("scrypt"===kdf)salt.n=options.n||8192,salt.r=options.r||8,salt.p=options.p||1,password=scrypt(Buffer.from(password),Buffer.from(salt.salt,"hex"),salt.n,salt.r,salt.p,salt.dklen);else throw Error("Unsupported kdf");var cipher=cryp.createCipheriv(options.cipher||"aes-128-ctr",password.slice(0,16),iv);if(!cipher)throw Error("Unsupported cipher");cipher=Buffer.concat([cipher.update(Buffer.from(privateKey.privateKey.replace("0x",""),"hex")),cipher.final()]);password=
utils.sha3(Buffer.concat([password.slice(16,32),Buffer.from(cipher,"hex")])).replace("0x","");return{version:3,id:uuid.v4({random:options.uuid||cryp.randomBytes(16)}),address:privateKey.address.toLowerCase().replace("0x",""),crypto:{ciphertext:cipher.toString("hex"),cipherparams:{iv:iv.toString("hex")},cipher:options.cipher||"aes-128-ctr",kdf:kdf,kdfparams:salt,mac:password.toString("hex")}}};Wallet.prototype._findSafeIndex=function(pointer){pointer=pointer||0;return _.has(this,pointer)?this._findSafeIndex(pointer+
1):pointer};Wallet.prototype._currentIndexes=function(){return Object.keys(this).map(function(key){return parseInt(key)}).filter(function(n){return 9E20>n})};Wallet.prototype.create=function(numberOfAccounts,entropy){for(var i=0;i<numberOfAccounts;++i)this.add(this._accounts.create(entropy).privateKey);return this};Wallet.prototype.add=function(account){_.isString(account)&&(account=this._accounts.privateKeyToAccount(account));if(this[account.address])return this[account.address];account=this._accounts.privateKeyToAccount(account.privateKey);
account.index=this._findSafeIndex();this[account.index]=account;this[account.address]=account;this[account.address.toLowerCase()]=account;this.length++;return account};Wallet.prototype.remove=function(addressOrIndex){return(addressOrIndex=this[addressOrIndex])&&addressOrIndex.address?(this[addressOrIndex.address].privateKey=null,delete this[addressOrIndex.address],this[addressOrIndex.address.toLowerCase()].privateKey=null,delete this[addressOrIndex.address.toLowerCase()],this[addressOrIndex.index].privateKey=
null,delete this[addressOrIndex.index],this.length--,!0):!1};Wallet.prototype.clear=function(){var _this=this;this._currentIndexes().forEach(function(index){_this.remove(index)});return this};Wallet.prototype.encrypt=function(password,options){var _this=this;return this._currentIndexes().map(function(index){return _this[index].encrypt(password,options)})};Wallet.prototype.decrypt=function(encryptedWallet,password){var _this=this;encryptedWallet.forEach(function(keystore){if(keystore=_this._accounts.decrypt(keystore,
password))_this.add(keystore);else throw Error("Couldn't decrypt accounts. Password wrong?");});return this};Wallet.prototype.save=function(password,keyName){localStorage.setItem(keyName||this.defaultKeyName,JSON.stringify(this.encrypt(password)));return!0};Wallet.prototype.load=function(password,keyName){if(keyName=localStorage.getItem(keyName||this.defaultKeyName))try{keyName=JSON.parse(keyName)}catch(e){}return this.decrypt(keyName||[],password)};(function(type){try{var storage=window[type];storage.setItem("__storage_test__",
"__storage_test__");storage.removeItem("__storage_test__");return!0}catch(e){return e&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&storage&&0!==storage.length}})("localStorage")||(delete Wallet.prototype.save,delete Wallet.prototype.load);module.exports=global}
//# sourceMappingURL=module$node_modules$web3_eth_accounts$src$index.js.map
