{
"version":3,
"file":"module$node_modules$lodash$_baseIntersection.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IACrGC,SAAWH,OAAA,CAAQ,sCAAR,CAD0F,CAErGI,cAAgBJ,OAAA,CAAQ,2CAAR,CAFqF,CAGrGK,kBAAoBL,OAAA,CAAQ,+CAAR,CAHiF,CAIrGM,SAAWN,OAAA,CAAQ,sCAAR,CAJ0F,CAKrGO,UAAYP,OAAA,CAAQ,uCAAR,CALyF,CAMrGQ,SAAWR,OAAA,CAAQ,sCAAR,CAN0F,CASrGS,UAAYC,IAAAC,IAiEhBV,OAAAC,QAAA;AArDAU,QAAyB,CAACC,MAAD,CAASC,QAAT,CAAmBC,UAAnB,CAA+B,CAStD,IATsD,IAClDC,SAAWD,UAAA,CAAaV,iBAAb,CAAiCD,aADM,CAElDa,OAASJ,MAAA,CAAO,CAAP,CAAAI,OAFyC,CAGlDC,UAAYL,MAAAI,OAHsC,CAIlDE,SAAWD,SAJuC,CAKlDE,OAASC,KAAA,CAAMH,SAAN,CALyC,CAMlDI,UAAYC,QANsC,CAOlDC,OAAS,EAEb,CAAOL,QAAA,EAAP,CAAA,CAAmB,CACjB,IAAIM,MAAQZ,MAAA,CAAOM,QAAP,CACRA,SAAJ,EAAgBL,QAAhB,GACEW,KADF,CACUnB,QAAA,CAASmB,KAAT,CAAgBlB,SAAA,CAAUO,QAAV,CAAhB,CADV,CAGAQ,UAAA,CAAYb,SAAA,CAAUgB,KAAAR,OAAV,CAAwBK,SAAxB,CACZF,OAAA,CAAOD,QAAP,CAAA,CAAmB,CAACJ,UAAD,GAAgBD,QAAhB,EAAuC,GAAvC,EAA6BG,MAA7B,EAA8D,GAA9D,EAA8CQ,KAAAR,OAA9C,EACf,IAAId,QAAJ,CAAagB,QAAb,EAAyBM,KAAzB,CADe,CAEfC,IAAAA,EARa,CAUnBD,KAAA,CAAQZ,MAAA,CAAO,CAAP,CAnB8C,KAqBlDc;AAAS,EArByC,CAsBlDC,KAAOR,MAAA,CAAO,CAAP,CAEX,EAAA,CACA,IAAA,CAAO,EAAEO,KAAT,CAAiBV,MAAjB,EAA2BO,MAAAP,OAA3B,CAA2CK,SAA3C,CAAA,CAAsD,CAAA,IAChDO,MAAQJ,KAAA,CAAME,KAAN,CADwC,CAEhDG,SAAWhB,QAAA,CAAWA,QAAA,CAASe,KAAT,CAAX,CAA6BA,KAE5CA,MAAA,CAASd,UAAD,EAAyB,CAAzB,GAAec,KAAf,CAA8BA,KAA9B,CAAsC,CAC9C,IAAMD,IAAA,CACE,CAAApB,QAAA,CAASoB,IAAT,CAAeE,QAAf,CADF,CAEE,CAAAd,QAAA,CAASQ,MAAT,CAAiBM,QAAjB,CAA2Bf,UAA3B,CAFR,CAGO,CAEL,IADAI,QACA,CADWD,SACX,CAAO,EAAEC,QAAT,CAAA,CAAmB,CACjB,IAAIY,MAAQX,MAAA,CAAOD,QAAP,CACZ,IAAMY,KAAA,CACE,CAAAvB,QAAA,CAASuB,KAAT,CAAgBD,QAAhB,CADF,CAEE,CAAAd,QAAA,CAASH,MAAA,CAAOM,QAAP,CAAT,CAA2BW,QAA3B,CAAqCf,UAArC,CAFR,CAIE,SAAS,CANM,CASfa,IAAJ,EACEA,IAAAI,KAAA,CAAUF,QAAV,CAEFN,OAAAQ,KAAA,CAAYH,KAAZ,CAdK,CAR6C,CAyBtD,MAAOL,OAlD+C,CArBiD;",
"sources":["node_modules/lodash/_baseIntersection.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseIntersection\"] = function(global,require,module,exports) {\nvar SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */\nfunction baseIntersection(arrays, iteratee, comparator) {\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\n      length = arrays[0].length,\n      othLength = arrays.length,\n      othIndex = othLength,\n      caches = Array(othLength),\n      maxLength = Infinity,\n      result = [];\n\n  while (othIndex--) {\n    var array = arrays[othIndex];\n    if (othIndex && iteratee) {\n      array = arrayMap(array, baseUnary(iteratee));\n    }\n    maxLength = nativeMin(array.length, maxLength);\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined;\n  }\n  array = arrays[0];\n\n  var index = -1,\n      seen = caches[0];\n\n  outer:\n  while (++index < length && result.length < maxLength) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength;\n      while (--othIndex) {\n        var cache = caches[othIndex];\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer;\n        }\n      }\n      if (seen) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseIntersection;\n\n};"],
"names":["shadow$provide","global","require","module","exports","SetCache","arrayIncludes","arrayIncludesWith","arrayMap","baseUnary","cacheHas","nativeMin","Math","min","baseIntersection","arrays","iteratee","comparator","includes","length","othLength","othIndex","caches","Array","maxLength","Infinity","result","array","undefined","index","seen","value","computed","cache","push"]
}
