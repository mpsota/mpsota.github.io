{
"version":3,
"file":"module$node_modules$ethereumjs_common$dist$hardforks$chainstart_json.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/ethereumjs-common/dist/hardforks/chainstart.json"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereumjs_common$dist$hardforks$chainstart_json\"] = function(global,require,module,exports) {\nmodule.exports=({\n    \"name\": \"chainstart\",\n    \"comment\": \"Start of the Ethereum main chain\",\n    \"eip\": {\n        \"url\": \"\",\n        \"status\": \"\"\n    },\n    \"status\": \"\",\n    \"gasConfig\": {\n        \"minGasLimit\": {\n            \"v\": 5000,\n            \"d\": \"Minimum the gas limit may ever be\"\n        },\n        \"gasLimitBoundDivisor\": {\n            \"v\": 1024,\n            \"d\": \"The bound divisor of the gas limit, used in update calculations\"\n        }\n    },\n    \"gasPrices\": {\n        \"base\": {\n            \"v\": 2,\n            \"d\": \"Gas base cost, used e.g. for ChainID opcode (Istanbul)\"\n        },\n        \"tierStep\": {\n            \"v\": [0, 2, 3, 5, 8, 10, 20],\n            \"d\": \"Once per operation, for a selection of them\"\n        },\n        \"exp\": {\n            \"v\": 10,\n            \"d\": \"Once per EXP instuction\"\n        },\n        \"expByte\": {\n            \"v\": 10,\n            \"d\": \"Times ceil(log256(exponent)) for the EXP instruction\"\n        },\n        \"sha3\": {\n            \"v\": 30,\n            \"d\": \"Once per SHA3 operation\"\n        },\n        \"sha3Word\": {\n            \"v\": 6,\n            \"d\": \"Once per word of the SHA3 operation's data\"\n        },\n        \"sload\": {\n            \"v\": 50,\n            \"d\": \"Once per SLOAD operation\"\n        },\n        \"sstoreSet\": {\n            \"v\": 20000,\n            \"d\": \"Once per SSTORE operation if the zeroness changes from zero\"\n        },\n        \"sstoreReset\": {\n            \"v\": 5000,\n            \"d\": \"Once per SSTORE operation if the zeroness does not change from zero\"\n        },\n        \"sstoreRefund\": {\n            \"v\": 15000,\n            \"d\": \"Once per SSTORE operation if the zeroness changes to zero\"\n        },\n        \"jumpdest\": {\n            \"v\": 1,\n            \"d\": \"Refunded gas, once per SSTORE operation if the zeroness changes to zero\"\n        },\n        \"log\": {\n            \"v\": 375,\n            \"d\": \"Per LOG* operation\"\n        },\n        \"logData\": {\n            \"v\": 8,\n            \"d\": \"Per byte in a LOG* operation's data\"\n        },\n        \"logTopic\": {\n            \"v\": 375,\n            \"d\": \"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas\"\n        },\n        \"create\": {\n            \"v\": 32000,\n            \"d\": \"Once per CREATE operation & contract-creation transaction\"\n        },\n        \"call\": {\n            \"v\": 40,\n            \"d\": \"Once per CALL operation & message call transaction\"\n        },\n        \"callStipend\": {\n            \"v\": 2300,\n            \"d\": \"Free gas given at beginning of call\"\n        },\n        \"callValueTransfer\": {\n            \"v\": 9000,\n            \"d\": \"Paid for CALL when the value transfor is non-zero\"\n        },\n        \"callNewAccount\": {\n            \"v\": 25000,\n            \"d\": \"Paid for CALL when the destination address didn't exist prior\"\n        },\n        \"selfdestructRefund\": {\n            \"v\": 24000,\n            \"d\": \"Refunded following a selfdestruct operation\"\n        },\n        \"memory\": {\n            \"v\": 3,\n            \"d\": \"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL\"\n        },\n        \"quadCoeffDiv\": {\n            \"v\": 512,\n            \"d\": \"Divisor for the quadratic particle of the memory cost equation\"\n        },\n        \"createData\": {\n            \"v\": 200,\n            \"d\": \"\"\n        },\n        \"tx\": {\n            \"v\": 21000,\n            \"d\": \"Per transaction. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"txCreation\": {\n            \"v\": 32000,\n            \"d\": \"The cost of creating a contract via tx\"\n        },\n        \"txDataZero\": {\n            \"v\": 4,\n            \"d\": \"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"txDataNonZero\": {\n            \"v\": 68,\n            \"d\": \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"copy\": {\n            \"v\": 3,\n            \"d\": \"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added\"\n        },\n        \"ecRecover\": {\n            \"v\": 3000,\n            \"d\": \"\"\n        },\n        \"sha256\": {\n            \"v\": 60,\n            \"d\": \"\"\n        },\n        \"sha256Word\": {\n            \"v\": 12,\n            \"d\": \"\"\n        },\n        \"ripemd160\": {\n            \"v\": 600,\n            \"d\": \"\"\n        },\n        \"ripemd160Word\": {\n            \"v\": 120,\n            \"d\": \"\"\n        },\n        \"identity\": {\n            \"v\": 15,\n            \"d\": \"\"\n        },\n        \"identityWord\": {\n            \"v\": 3,\n            \"d\": \"\"\n        }\n    },\n    \"vm\": {\n        \"stackLimit\": {\n            \"v\": 1024,\n            \"d\": \"Maximum size of VM stack allowed\"\n        },\n        \"callCreateDepth\": {\n            \"v\": 1024,\n            \"d\": \"Maximum depth of call/create stack\"\n        },\n        \"maxExtraDataSize\": {\n            \"v\": 32,\n            \"d\": \"Maximum size extra data may be after Genesis\"\n        }\n    },\n    \"pow\": {\n        \"minimumDifficulty\": {\n            \"v\": 131072,\n            \"d\": \"The minimum that the difficulty may ever be\"\n        },\n        \"difficultyBoundDivisor\": {\n            \"v\": 2048,\n            \"d\": \"The bound divisor of the difficulty, used in the update calculations\"\n        },\n        \"durationLimit\": {\n            \"v\": 13,\n            \"d\": \"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not\"\n        },\n        \"epochDuration\": {\n            \"v\": 30000,\n            \"d\": \"Duration between proof-of-work epochs\"\n        },\n        \"timebombPeriod\": {\n            \"v\": 100000,\n            \"d\": \"Exponential difficulty timebomb period\"\n        },\n        \"minerReward\": {\n            \"v\": \"5000000000000000000\",\n            \"d\": \"the amount a miner get rewarded for mining a block\"\n        }\n    },\n    \"casper\": {},\n    \"sharding\": {}\n}\n);\n};"],
"names":["shadow$provide","global","require","module","exports"]
}
