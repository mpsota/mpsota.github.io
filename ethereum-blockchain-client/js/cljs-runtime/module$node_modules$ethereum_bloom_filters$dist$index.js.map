{
"version":3,
"file":"module$node_modules$ethereum_bloom_filters$dist$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/ethereum-bloom-filters/dist/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereum_bloom_filters$dist$index\"] = function(global,require,module,exports) {\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n * Returns true if the bloom is a valid bloom\r\n * @param bloom The bloom\r\n */\r\nfunction isBloom(bloom) {\r\n    if (typeof bloom !== 'string') {\r\n        return false;\r\n    }\r\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\r\n        return false;\r\n    }\r\n    if (/^(0x)?[0-9a-f]{512}$/.test(bloom) ||\r\n        /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isBloom = isBloom;\r\n/**\r\n * Returns true if the value is part of the given bloom\r\n * note: false positives are possible.\r\n * @param bloom encoded bloom\r\n * @param value The value\r\n */\r\nfunction isInBloom(bloom, value) {\r\n    if (typeof value === 'object' && value.constructor === Uint8Array) {\r\n        value = utils_1.bytesToHex(value);\r\n    }\r\n    const hash = utils_1.keccak256(value).replace('0x', '');\r\n    for (let i = 0; i < 12; i += 4) {\r\n        // calculate bit position in bloom filter that must be active\r\n        const bitpos = ((parseInt(hash.substr(i, 2), 16) << 8) +\r\n            parseInt(hash.substr(i + 2, 2), 16)) &\r\n            2047;\r\n        // test if bitpos in bloom is active\r\n        const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));\r\n        const offset = 1 << bitpos % 4;\r\n        if ((code & offset) !== offset) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexports.isInBloom = isInBloom;\r\n/**\r\n * Code points to int\r\n * @param codePoint The code point\r\n */\r\nfunction codePointToInt(codePoint) {\r\n    if (codePoint >= 48 && codePoint <= 57) {\r\n        /* ['0'..'9'] -> [0..9] */\r\n        return codePoint - 48;\r\n    }\r\n    if (codePoint >= 65 && codePoint <= 70) {\r\n        /* ['A'..'F'] -> [10..15] */\r\n        return codePoint - 55;\r\n    }\r\n    if (codePoint >= 97 && codePoint <= 102) {\r\n        /* ['a'..'f'] -> [10..15] */\r\n        return codePoint - 87;\r\n    }\r\n    throw new Error('invalid bloom');\r\n}\r\n/**\r\n * Returns true if the ethereum users address is part of the given bloom.\r\n * note: false positives are possible.\r\n * @param bloom encoded bloom\r\n * @param address the address to test\r\n */\r\nfunction isUserEthereumAddressInBloom(bloom, ethereumAddress) {\r\n    if (!isBloom(bloom)) {\r\n        throw new Error('Invalid bloom given');\r\n    }\r\n    if (!isAddress(ethereumAddress)) {\r\n        throw new Error(`Invalid ethereum address given: \"${ethereumAddress}\"`);\r\n    }\r\n    // you have to pad the ethereum address to 32 bytes\r\n    // else the bloom filter does not work\r\n    // this is only if your matching the USERS\r\n    // ethereum address. Contract address do not need this\r\n    // hence why we have 2 methods\r\n    // (0x is not in the 2nd parameter of padleft so 64 chars is fine)\r\n    const address = utils_1.padLeft(ethereumAddress, 64);\r\n    return isInBloom(bloom, address);\r\n}\r\nexports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;\r\n/**\r\n * Returns true if the contract address is part of the given bloom.\r\n * note: false positives are possible.\r\n * @param bloom encoded bloom\r\n * @param contractAddress the contract address to test\r\n */\r\nfunction isContractAddressInBloom(bloom, contractAddress) {\r\n    if (!isBloom(bloom)) {\r\n        throw new Error('Invalid bloom given');\r\n    }\r\n    if (!isAddress(contractAddress)) {\r\n        throw new Error(`Invalid contract address given: \"${contractAddress}\"`);\r\n    }\r\n    return isInBloom(bloom, contractAddress);\r\n}\r\nexports.isContractAddressInBloom = isContractAddressInBloom;\r\n/**\r\n * Returns true if the topic is part of the given bloom.\r\n * note: false positives are possible.\r\n * @param bloom encoded bloom\r\n * @param topic the topic encoded hex\r\n */\r\nfunction isTopicInBloom(bloom, topic) {\r\n    if (!isBloom(bloom)) {\r\n        throw new Error('Invalid bloom given');\r\n    }\r\n    if (!isTopic(topic)) {\r\n        throw new Error('Invalid topic');\r\n    }\r\n    return isInBloom(bloom, topic);\r\n}\r\nexports.isTopicInBloom = isTopicInBloom;\r\n/**\r\n * Checks if its a valid topic\r\n * @param topic encoded hex topic\r\n */\r\nfunction isTopic(topic) {\r\n    if (typeof topic !== 'string') {\r\n        return false;\r\n    }\r\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\r\n        return false;\r\n    }\r\n    else if (/^(0x)?[0-9a-f]{64}$/.test(topic) ||\r\n        /^(0x)?[0-9A-F]{64}$/.test(topic)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isTopic = isTopic;\r\n/**\r\n * Is valid address\r\n * @param address The address\r\n */\r\nfunction isAddress(address) {\r\n    if (typeof address !== 'string') {\r\n        return false;\r\n    }\r\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\r\n        return true;\r\n    }\r\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isAddress = isAddress;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","isBloom","bloom","test","isInBloom","value","constructor","Uint8Array","utils_1","bytesToHex","hash","keccak256","replace","i","bitpos","parseInt","substr","charCodeAt","length","Math","floor","codePoint","Error","offset","code","isTopic","topic","isAddress","address","match","Object","defineProperty","isUserEthereumAddressInBloom","ethereumAddress","padLeft","isContractAddressInBloom","contractAddress","isTopicInBloom"]
}
