{
"version":3,
"file":"module$node_modules$lodash$_updateWrapDetails.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IACtGC,UAAYH,OAAA,CAAQ,uCAAR,CAD0F,CAEtGI,cAAgBJ,OAAA,CAAQ,2CAAR,CAFsF,CAgBtGK,UAAY,CACd,CAAC,KAAD,CANkBC,GAMlB,CADc,CAEd,CAAC,MAAD,CAbmBC,CAanB,CAFc,CAGd,CAAC,SAAD,CAbuBC,CAavB,CAHc,CAId,CAAC,OAAD,CAboBC,CAapB,CAJc,CAKd,CAAC,YAAD,CAb0BC,EAa1B,CALc,CAMd,CAAC,MAAD,CATmBC,GASnB,CANc,CAOd,CAAC,SAAD,CAdsBC,EActB,CAPc,CAQd,CAAC,cAAD,CAd4BC,EAc5B,CARc,CASd,CAAC,OAAD,CAboBC,GAapB,CATc,CA8BhBb,OAAAC,QAAA,CAVAa,QAA0B,CAACC,OAAD,CAAUC,OAAV,CAAmB,CAC3Cd,SAAA,CAAUE,SAAV,CAAqB,QAAQ,CAACa,IAAD,CAAO,CAClC,IAAIC,MAAQ,IAARA,CAAeD,IAAA,CAAK,CAAL,CACdD,QAAL,CAAeC,IAAA,CAAK,CAAL,CAAf,EAA2B,CAACd,aAAA,CAAcY,OAAd;AAAuBG,KAAvB,CAA5B,EACEH,OAAAI,KAAA,CAAaD,KAAb,CAHgC,CAApC,CAMA,OAAOH,QAAAK,KAAA,EAPoC,CApC6D;",
"sources":["node_modules/lodash/_updateWrapDetails.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_updateWrapDetails\"] = function(global,require,module,exports) {\nvar arrayEach = require('./_arrayEach'),\n    arrayIncludes = require('./_arrayIncludes');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256,\n    WRAP_FLIP_FLAG = 512;\n\n/** Used to associate wrap methods with their bit flags. */\nvar wrapFlags = [\n  ['ary', WRAP_ARY_FLAG],\n  ['bind', WRAP_BIND_FLAG],\n  ['bindKey', WRAP_BIND_KEY_FLAG],\n  ['curry', WRAP_CURRY_FLAG],\n  ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n  ['flip', WRAP_FLIP_FLAG],\n  ['partial', WRAP_PARTIAL_FLAG],\n  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n  ['rearg', WRAP_REARG_FLAG]\n];\n\n/**\n * Updates wrapper `details` based on `bitmask` flags.\n *\n * @private\n * @returns {Array} details The details to modify.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Array} Returns `details`.\n */\nfunction updateWrapDetails(details, bitmask) {\n  arrayEach(wrapFlags, function(pair) {\n    var value = '_.' + pair[0];\n    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n      details.push(value);\n    }\n  });\n  return details.sort();\n}\n\nmodule.exports = updateWrapDetails;\n\n};"],
"names":["shadow$provide","global","require","module","exports","arrayEach","arrayIncludes","wrapFlags","WRAP_ARY_FLAG","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_FLIP_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","WRAP_REARG_FLAG","updateWrapDetails","details","bitmask","pair","value","push","sort"]
}
