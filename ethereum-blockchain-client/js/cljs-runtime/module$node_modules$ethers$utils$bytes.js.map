{
"version":3,
"file":"module$node_modules$ethers$utils$bytes.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/ethers/utils/bytes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethers$utils$bytes\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n *  Conversion Utilities\n *\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors = __importStar(require(\"../errors\"));\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nexports.isHexable = isHexable;\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        var args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nfunction isArrayish(value) {\n    if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {\n        return false;\n    }\n    for (var i = 0; i < value.length; i++) {\n        var v = value[i];\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isArrayish = isArrayish;\nfunction arrayify(value) {\n    if (value == null) {\n        errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (typeof (value) === 'string') {\n        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n        if (!match) {\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (match[1] !== '0x') {\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        value = value.substring(2);\n        if (value.length % 2) {\n            value = '0' + value;\n        }\n        var result = [];\n        for (var i = 0; i < value.length; i += 2) {\n            result.push(parseInt(value.substr(i, 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isArrayish(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    errors.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });\n    return null;\n}\nexports.arrayify = arrayify;\nfunction concat(objects) {\n    var arrays = [];\n    var length = 0;\n    for (var i = 0; i < objects.length; i++) {\n        var object = arrayify(objects[i]);\n        arrays.push(object);\n        length += object.length;\n    }\n    var result = new Uint8Array(length);\n    var offset = 0;\n    for (var i = 0; i < arrays.length; i++) {\n        result.set(arrays[i], offset);\n        offset += arrays[i].length;\n    }\n    return addSlice(result);\n}\nexports.concat = concat;\nfunction stripZeros(value) {\n    var result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    var start = 0;\n    while (result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexports.stripZeros = stripZeros;\nfunction padZeros(value, length) {\n    value = arrayify(value);\n    if (length < value.length) {\n        throw new Error('cannot pad');\n    }\n    var result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexports.padZeros = padZeros;\nfunction isHexString(value, length) {\n    if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nexports.isHexString = isHexString;\nvar HexCharacters = '0123456789abcdef';\nfunction hexlify(value) {\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (typeof (value) === 'number') {\n        if (value < 0) {\n            errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        // @TODO: Roll this into the above error as a numeric fault (overflow); next version, not backward compatible\n        // We can about (value == MAX_INT) to as well, since that may indicate we underflowed already\n        if (value >= 9007199254740991) {\n            errors.throwError(\"out-of-range\", errors.NUMERIC_FAULT, {\n                operartion: \"hexlify\",\n                fault: \"out-of-safe-range\"\n            });\n        }\n        var hex = '';\n        while (value) {\n            hex = HexCharacters[value & 0x0f] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = '0' + hex;\n            }\n            return '0x' + hex;\n        }\n        return '0x00';\n    }\n    if (typeof (value) === 'string') {\n        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n        if (!match) {\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (match[1] !== '0x') {\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (value.length % 2) {\n            value = '0x0' + value.substring(2);\n        }\n        return value;\n    }\n    if (isArrayish(value)) {\n        var result = [];\n        for (var i = 0; i < value.length; i++) {\n            var v = value[i];\n            result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);\n        }\n        return '0x' + result.join('');\n    }\n    errors.throwError('invalid hexlify value', null, { arg: 'value', value: value });\n    return 'never';\n}\nexports.hexlify = hexlify;\nfunction hexDataLength(data) {\n    if (!isHexString(data) || (data.length % 2) !== 0) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexports.hexDataLength = hexDataLength;\nfunction hexDataSlice(data, offset, endOffset) {\n    if (!isHexString(data)) {\n        errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, { arg: 'value', value: data });\n    }\n    if ((data.length % 2) !== 0) {\n        errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, { arg: 'value', value: data });\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return '0x' + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return '0x' + data.substring(offset);\n}\nexports.hexDataSlice = hexDataSlice;\nfunction hexStripZeros(value) {\n    if (!isHexString(value)) {\n        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    while (value.length > 3 && value.substring(0, 3) === '0x0') {\n        value = '0x' + value.substring(3);\n    }\n    return value;\n}\nexports.hexStripZeros = hexStripZeros;\nfunction hexZeroPad(value, length) {\n    if (!isHexString(value)) {\n        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    while (value.length < 2 * length + 2) {\n        value = '0x0' + value.substring(2);\n    }\n    return value;\n}\nexports.hexZeroPad = hexZeroPad;\nfunction isSignature(value) {\n    return (value && value.r != null && value.s != null);\n}\nfunction splitSignature(signature) {\n    var v = 0;\n    var r = '0x', s = '0x';\n    if (isSignature(signature)) {\n        if (signature.v == null && signature.recoveryParam == null) {\n            errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, { argument: 'signature', value: signature });\n        }\n        r = hexZeroPad(signature.r, 32);\n        s = hexZeroPad(signature.s, 32);\n        v = signature.v;\n        if (typeof (v) === 'string') {\n            v = parseInt(v, 16);\n        }\n        var recoveryParam = signature.recoveryParam;\n        if (recoveryParam == null && signature.v != null) {\n            recoveryParam = 1 - (v % 2);\n        }\n        v = 27 + recoveryParam;\n    }\n    else {\n        var bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            throw new Error('invalid signature');\n        }\n        r = hexlify(bytes.slice(0, 32));\n        s = hexlify(bytes.slice(32, 64));\n        v = bytes[64];\n        if (v !== 27 && v !== 28) {\n            v = 27 + (v % 2);\n        }\n    }\n    return {\n        r: r,\n        s: s,\n        recoveryParam: (v - 27),\n        v: v\n    };\n}\nexports.splitSignature = splitSignature;\nfunction joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? '0x1c' : '0x1b')\n    ]));\n}\nexports.joinSignature = joinSignature;\n\n};"],
"names":["shadow$provide","global","require","module","exports","addSlice","array","slice","array.slice","args","Array","prototype","call","arguments","Uint8Array","apply","isArrayish","value","parseInt","String","length","i","v","arrayify","errors","throwError","INVALID_ARGUMENT","arg","toHexString","match","substring","result","push","substr","type","concat","objects","arrays","object","offset","set","isHexString","hexlify","NUMERIC_FAULT","operartion","fault","hex","HexCharacters","Math","floor","join","hexZeroPad","splitSignature","signature","r","s","recoveryParam","argument","bytes","Error","__importStar","mod","__esModule","k","Object","hasOwnProperty","defineProperty","isHexable","stripZeros","start","padZeros","hexDataLength","data","hexDataSlice","endOffset","hexStripZeros","joinSignature"]
}
