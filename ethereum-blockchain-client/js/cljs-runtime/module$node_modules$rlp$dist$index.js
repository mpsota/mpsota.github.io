shadow$provide.module$node_modules$rlp$dist$index=function(global,require,module,exports){function encode(input){if(Array.isArray(input)){for(var output=[],i=0;i<input.length;i++)output.push(encode(input[i]));input=Buffer.concat(output);return Buffer.concat([encodeLength(input.length,192),input])}input=toBuffer(input);return 1===input.length&&128>input[0]?input:Buffer.concat([encodeLength(input.length,128),input])}function safeParseInt(v,base){if("00"===v.slice(0,2))throw Error("invalid RLP: extra zeros");
return parseInt(v,base)}function encodeLength(len,offset){if(56>len)return Buffer.from([len+offset]);len=intToHex(len);offset=intToHex(offset+55+len.length/2);return Buffer.from(offset+len,"hex")}function _decode(input){var data=[];var llength=input[0];if(127>=llength)return{data:input.slice(0,1),remainder:input.slice(1)};if(183>=llength){var length=llength-127;data=128===llength?Buffer.from([]):input.slice(1,length);if(2===length&&128>data[0])throw Error("invalid rlp encoding: byte must be less 0x80");
return{data:data,remainder:input.slice(length)}}if(191>=llength){llength-=182;length=safeParseInt(input.slice(1,llength).toString("hex"),16);data=input.slice(llength,length+llength);if(data.length<length)throw Error("invalid RLP");return{data:data,remainder:input.slice(length+llength)}}if(247>=llength){length=llength-191;for(llength=input.slice(1,length);llength.length;)llength=_decode(llength),data.push(llength.data),llength=llength.remainder;return{data:data,remainder:input.slice(length)}}llength-=
246;length=safeParseInt(input.slice(1,llength).toString("hex"),16);length=llength+length;if(length>input.length)throw Error("invalid rlp: total length is larger than the data");llength=input.slice(llength,length);if(0===llength.length)throw Error("invalid rlp, List has a invalid length");for(;llength.length;)llength=_decode(llength),data.push(llength.data),llength=llength.remainder;return{data:data,remainder:input.slice(length)}}function stripHexPrefix(str){return"string"!==typeof str?str:"0x"===
str.slice(0,2)?str.slice(2):str}function intToHex(integer){if(0>integer)throw Error("Invalid integer as argument, must be unsigned!");integer=integer.toString(16);return integer.length%2?"0"+integer:integer}function padToEven(a){return a.length%2?"0"+a:a}function toBuffer(v){if(!Buffer.isBuffer(v)){if("string"===typeof v)return"0x"===v.slice(0,2)?Buffer.from(padToEven(stripHexPrefix(v)),"hex"):Buffer.from(v);if("number"===typeof v)return v?(v=intToHex(v),Buffer.from(v,"hex")):Buffer.from([]);if(null===
v||void 0===v)return Buffer.from([]);if(v instanceof Uint8Array)return Buffer.from(v);if(BN.isBN(v))return Buffer.from(v.toArray());throw Error("invalid type");}return v}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var BN=require("module$node_modules$bn_DOT_js$lib$bn");exports.encode=encode;exports.decode=function(input,stream){void 0===stream&&(stream=!1);if(!input||0===input.length)return Buffer.from([]);input=
toBuffer(input);input=_decode(input);if(stream)return input;if(0!==input.remainder.length)throw Error("invalid remainder");return input.data};exports.getLength=function(input){if(!input||0===input.length)return Buffer.from([]);input=toBuffer(input);var firstByte=input[0];if(127>=firstByte)return input.length;if(183>=firstByte)return firstByte-127;if(191>=firstByte)return firstByte-182;if(247>=firstByte)return firstByte-191;firstByte-=246;input=safeParseInt(input.slice(1,firstByte).toString("hex"),
16);return firstByte+input}}
//# sourceMappingURL=module$node_modules$rlp$dist$index.js.map
