{
"version":3,
"file":"module$node_modules$ethereum_bloom_filters$dist$utils.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/ethereum-bloom-filters/dist/utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereum_bloom_filters$dist$utils\"] = function(global,require,module,exports) {\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst sha3 = require(\"js-sha3\");\r\n/**\r\n * Keccak256 hash\r\n * @param data The data\r\n */\r\nfunction keccak256(data) {\r\n    return '0x' + sha3.keccak_256(toByteArray(data));\r\n}\r\nexports.keccak256 = keccak256;\r\n/**\r\n * Adding padding to string on the left\r\n * @param value The value\r\n * @param chars The chars\r\n */\r\nexports.padLeft = (value, chars) => {\r\n    const hasPrefix = /^0x/i.test(value) || typeof value === 'number';\r\n    value = value.toString().replace(/^0x/i, '');\r\n    const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;\r\n    return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;\r\n};\r\n/**\r\n * Convert bytes to hex\r\n * @param bytes The bytes\r\n */\r\nfunction bytesToHex(bytes) {\r\n    let hex = [];\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        hex.push((bytes[i] >>> 4).toString(16));\r\n        hex.push((bytes[i] & 0xf).toString(16));\r\n    }\r\n    return `0x${hex.join('').replace(/^0+/, '')}`;\r\n}\r\nexports.bytesToHex = bytesToHex;\r\n/**\r\n * To byte array\r\n * @param value The value\r\n */\r\nfunction toByteArray(value) {\r\n    if (value == null) {\r\n        throw new Error('cannot convert null value to array');\r\n    }\r\n    if (typeof value === 'string') {\r\n        let match = value.match(/^(0x)?[0-9a-fA-F]*$/);\r\n        if (!match) {\r\n            throw new Error('invalid hexidecimal string');\r\n        }\r\n        if (match[1] !== '0x') {\r\n            throw new Error('hex string must have 0x prefix');\r\n        }\r\n        value = value.substring(2);\r\n        if (value.length % 2) {\r\n            value = '0' + value;\r\n        }\r\n        const result = [];\r\n        for (let i = 0; i < value.length; i += 2) {\r\n            result.push(parseInt(value.substr(i, 2), 16));\r\n        }\r\n        return addSlice(new Uint8Array(result));\r\n    }\r\n    if (isByteArray(value)) {\r\n        return addSlice(new Uint8Array(value));\r\n    }\r\n    throw new Error('invalid arrayify value');\r\n}\r\nexports.toByteArray = toByteArray;\r\n/**\r\n * Is byte array\r\n * @param value The value\r\n */\r\nfunction isByteArray(value) {\r\n    if (!value ||\r\n        parseInt(String(value.length)) != value.length ||\r\n        typeof value === 'string') {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < value.length; i++) {\r\n        const v = value[i];\r\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Add slice to array\r\n * @param array The array\r\n */\r\nfunction addSlice(array) {\r\n    if (array.slice) {\r\n        return array;\r\n    }\r\n    array.slice = function () {\r\n        const args = Array.prototype.slice.call(arguments);\r\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\r\n    };\r\n    return array;\r\n}\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","toByteArray","value","Error","match","substring","length","result","i","push","parseInt","substr","addSlice","Uint8Array","String","v","array","slice","array.slice","args","Array","prototype","call","arguments","apply","Object","defineProperty","sha3","keccak256","data","keccak_256","padLeft","exports.padLeft","chars","hasPrefix","test","toString","replace","padding","join","bytesToHex","bytes","hex"]
}
