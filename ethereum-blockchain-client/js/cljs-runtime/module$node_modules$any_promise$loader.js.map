{
"version":3,
"file":"module$node_modules$any_promise$loader.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnG,IAEIC,WAAa,IAgCjBF,OAAAC,QAAA,CAAiBE,QAAQ,CAACC,IAAD,CAAOC,kBAAP,CAA0B,CACjD,MAAOC,SAAiB,CAACC,cAAD,CAAiBC,IAAjB,CAAsB,CAC5CD,cAAA,CAAiBA,cAAjB,EAAmC,IACnCC,KAAA,CAAOA,IAAP,EAAe,EAEf,KAAIC,eAAiC,CAAA,CAAjCA,GAAiBD,IAAAV,OAGH,KAAlB,GAAGI,UAAH,EAA0BO,cAA1B,GACEP,UADF,CACeE,IAAA,CA3CIM,4BA2CJ,CADf,EACyC,IADzC,CAIA,IAAkB,IAAlB,GAAGR,UAAH,EAC0B,IAD1B,GACOK,cADP,EAEOL,UAAAK,eAFP,GAEqCA,cAFrC,CAIE,KAAUI,MAAJ,CAAU,kCAAV;AAA6CT,UAAAK,eAA7C,CACJ,sIADI,CAAN,CAKgB,IAAlB,GAAGL,UAAH,GAGIA,UASF,CAVsB,IAAtB,GAAGK,cAAH,EAAsD,WAAtD,GAA8B,MAAOC,KAAAI,QAArC,CACe,CACXA,QAASJ,IAAAI,QADE,CAEXL,eAAgBA,cAFL,CADf,CAOeF,kBAAA,CAAmBE,cAAnB,CAGf,CAAGE,cAAH,GAEEL,IAAA,CArEeM,4BAqEf,CAFF,CAE2BR,UAF3B,CAZF,CAkBA,OAAOA,WAtCqC,CADG,CArCgD;",
"sources":["node_modules/any-promise/loader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$any_promise$loader\"] = function(global,require,module,exports) {\n\"use strict\"\n    // global key for user preferred registration\nvar REGISTRATION_KEY = '@@any-promise/REGISTRATION',\n    // Prior registration (preferred or detected)\n    registered = null\n\n/**\n * Registers the given implementation.  An implementation must\n * be registered prior to any call to `require(\"any-promise\")`,\n * typically on application load.\n *\n * If called with no arguments, will return registration in\n * following priority:\n *\n * For Node.js:\n *\n * 1. Previous registration\n * 2. global.Promise if node.js version >= 0.12\n * 3. Auto detected promise based on first sucessful require of\n *    known promise libraries. Note this is a last resort, as the\n *    loaded library is non-deterministic. node.js >= 0.12 will\n *    always use global.Promise over this priority list.\n * 4. Throws error.\n *\n * For Browser:\n *\n * 1. Previous registration\n * 2. window.Promise\n * 3. Throws error.\n *\n * Options:\n *\n * Promise: Desired Promise constructor\n * global: Boolean - Should the registration be cached in a global variable to\n * allow cross dependency/bundle registration?  (default true)\n */\nmodule.exports = function(root, loadImplementation){\n  return function register(implementation, opts){\n    implementation = implementation || null\n    opts = opts || {}\n    // global registration unless explicitly  {global: false} in options (default true)\n    var registerGlobal = opts.global !== false;\n\n    // load any previous global registration\n    if(registered === null && registerGlobal){\n      registered = root[REGISTRATION_KEY] || null\n    }\n\n    if(registered !== null\n        && implementation !== null\n        && registered.implementation !== implementation){\n      // Throw error if attempting to redefine implementation\n      throw new Error('any-promise already defined as \"'+registered.implementation+\n        '\".  You can only register an implementation before the first '+\n        ' call to require(\"any-promise\") and an implementation cannot be changed')\n    }\n\n    if(registered === null){\n      // use provided implementation\n      if(implementation !== null && typeof opts.Promise !== 'undefined'){\n        registered = {\n          Promise: opts.Promise,\n          implementation: implementation\n        }\n      } else {\n        // require implementation if implementation is specified but not provided\n        registered = loadImplementation(implementation)\n      }\n\n      if(registerGlobal){\n        // register preference globally in case multiple installations\n        root[REGISTRATION_KEY] = registered\n      }\n    }\n\n    return registered\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","registered","module.exports","root","loadImplementation","register","implementation","opts","registerGlobal","REGISTRATION_KEY","Error","Promise"]
}
