shadow$provide.module$node_modules$lodash$fp$_baseConvert=function(global,require,module,exports){function baseArity(func,n){return 2==n?function(a,b){return func.apply(void 0,arguments)}:function(a){return func.apply(void 0,arguments)}}function baseAry(func,n){return 2==n?function(a,b){return func(a,b)}:function(a){return func(a)}}function cloneArray(array){for(var length=array?array.length:0,result=Array(length);length--;)result[length]=array[length];return result}function createCloner(func){return function(object){return func({},
object)}}function flatSpread(func,start){return function(){for(var length=arguments.length,lastIndex=length-1,args=Array(length);length--;)args[length]=arguments[length];length=args[start];var otherArgs=args.slice(0,start);length&&push.apply(otherArgs,length);start!=lastIndex&&push.apply(otherArgs,args.slice(start+1));return func.apply(this,otherArgs)}}function wrapImmutable(func,cloner){return function(){var length=arguments.length;if(length){for(var args=Array(length);length--;)args[length]=arguments[length];
length=args[0]=cloner.apply(void 0,args);func.apply(void 0,args);return length}}}function baseConvert(util,name$jscomp$0,func$jscomp$1,options$jscomp$0){function castFixed(name,func,n){return!config.fixed||!forceFixed&&mapping.skipFixed[name]?func:(name=(name=mapping.methodSpread[name])&&name.start,void 0===name?ary(func,n):flatSpread(func,name))}function castRearg(name,func,n){return config.rearg&&1<n&&(forceRearg||!mapping.skipRearg[name])?rearg(func,mapping.methodRearg[name]||mapping.aryRearg[n]):
func}function cloneByPath(object,path){path=toPath(path);for(var index=-1,length=path.length,lastIndex=length-1,nested=object=clone(Object(object));null!=nested&&++index<length;){var key=path[index],value=nested[key];null==value||isFunction(value)||isError(value)||isWeakMap(value)||(nested[key]=clone(index==lastIndex?value:Object(value)));nested=nested[key]}return object}function createConverter(name,func){var realName=mapping.aliasToReal[name]||name,methodName=mapping.remap[realName]||realName,oldOptions=
options$jscomp$0;return function(options){var newUtil=isLib?pristine:helpers,newFunc=isLib?pristine[methodName]:func;options=assign(assign({},oldOptions),options);return baseConvert(newUtil,realName,newFunc,options)}}function iterateeAry(func$jscomp$0,n){return overArg(func$jscomp$0,function(func){return"function"==typeof func?baseAry(func,n):func})}function iterateeRearg(func$jscomp$0,indexes){return overArg(func$jscomp$0,function(func){var n=indexes.length;return baseArity(rearg(baseAry(func,n),
indexes),n)})}function overArg(func,transform){return function(){var length=arguments.length;if(!length)return func();for(var args=Array(length);length--;)args[length]=arguments[length];length=config.rearg?0:length-1;args[length]=transform(args[length]);return func.apply(void 0,args)}}function wrap(name,func,placeholder){var result,realName=mapping.aliasToReal[name]||name,wrapped=func;(name=wrappers[realName])?wrapped=name(func):config.immutable&&(mapping.mutate.array[realName]?wrapped=wrapImmutable(func,
cloneArray):mapping.mutate.object[realName]?wrapped=wrapImmutable(func,createCloner(func)):mapping.mutate.set[realName]&&(wrapped=wrapImmutable(func,cloneByPath)));each(aryMethodKeys,function(aryKey){each(mapping.aryMethod[aryKey],function(otherName){if(realName==otherName){result=(otherName=mapping.methodSpread[realName])&&otherName.afterRearg?castFixed(realName,castRearg(realName,wrapped,aryKey),aryKey):castRearg(realName,castFixed(realName,wrapped,aryKey),aryKey);a:{otherName=result;if(config.cap){var indexes=
mapping.iterateeRearg[realName];if(indexes){result=iterateeRearg(otherName,indexes);break a}if(indexes=!isLib&&mapping.iterateeAry[realName]){result=iterateeAry(otherName,indexes);break a}}result=otherName}otherName=result;result=forceCurry||config.curry&&1<aryKey?curry(otherName,aryKey):otherName;return!1}});return!result});result||(result=wrapped);result==func&&(result=forceCurry?curry(result,1):function(){return func.apply(this,arguments)});result.convert=createConverter(realName,func);result.placeholder=
func.placeholder=placeholder;return result}var isLib="function"==typeof name$jscomp$0,isObj=name$jscomp$0===Object(name$jscomp$0);isObj&&(options$jscomp$0=func$jscomp$1,func$jscomp$1=name$jscomp$0,name$jscomp$0=void 0);if(null==func$jscomp$1)throw new TypeError;options$jscomp$0||(options$jscomp$0={});var config={cap:"cap"in options$jscomp$0?options$jscomp$0.cap:!0,curry:"curry"in options$jscomp$0?options$jscomp$0.curry:!0,fixed:"fixed"in options$jscomp$0?options$jscomp$0.fixed:!0,immutable:"immutable"in
options$jscomp$0?options$jscomp$0.immutable:!0,rearg:"rearg"in options$jscomp$0?options$jscomp$0.rearg:!0},defaultHolder=isLib?func$jscomp$1:fallbackHolder,forceCurry="curry"in options$jscomp$0&&options$jscomp$0.curry,forceFixed="fixed"in options$jscomp$0&&options$jscomp$0.fixed,forceRearg="rearg"in options$jscomp$0&&options$jscomp$0.rearg,pristine=isLib?func$jscomp$1.runInContext():void 0,helpers=isLib?func$jscomp$1:{ary:util.ary,assign:util.assign,clone:util.clone,curry:util.curry,forEach:util.forEach,
isArray:util.isArray,isError:util.isError,isFunction:util.isFunction,isWeakMap:util.isWeakMap,iteratee:util.iteratee,keys:util.keys,rearg:util.rearg,toInteger:util.toInteger,toPath:util.toPath},ary=helpers.ary,assign=helpers.assign,clone=helpers.clone,curry=helpers.curry,each=helpers.forEach,isArray=helpers.isArray,isError=helpers.isError,isFunction=helpers.isFunction,isWeakMap=helpers.isWeakMap,keys=helpers.keys,rearg=helpers.rearg,toInteger=helpers.toInteger,toPath=helpers.toPath,aryMethodKeys=
keys(mapping.aryMethod),wrappers={castArray:function(castArray){return function(){var value=arguments[0];return isArray(value)?castArray(cloneArray(value)):castArray.apply(void 0,arguments)}},iteratee:function(iteratee){return function(JSCompiler_OptimizeArgumentsArray_p6,JSCompiler_OptimizeArgumentsArray_p7){JSCompiler_OptimizeArgumentsArray_p6=iteratee(JSCompiler_OptimizeArgumentsArray_p6,JSCompiler_OptimizeArgumentsArray_p7);var length=JSCompiler_OptimizeArgumentsArray_p6.length;return config.cap&&
"number"==typeof JSCompiler_OptimizeArgumentsArray_p7?(JSCompiler_OptimizeArgumentsArray_p7=2<JSCompiler_OptimizeArgumentsArray_p7?JSCompiler_OptimizeArgumentsArray_p7-2:1,length&&length<=JSCompiler_OptimizeArgumentsArray_p7?JSCompiler_OptimizeArgumentsArray_p6:baseAry(JSCompiler_OptimizeArgumentsArray_p6,JSCompiler_OptimizeArgumentsArray_p7)):JSCompiler_OptimizeArgumentsArray_p6}},mixin:function(mixin){return function(source){var func=this;if(!isFunction(func))return mixin(func,Object(source));var pairs=
[];each(keys(source),function(key){isFunction(source[key])&&pairs.push([key,func.prototype[key]])});mixin(func,Object(source));each(pairs,function(pair){var value=pair[1];isFunction(value)?func.prototype[pair[0]]=value:delete func.prototype[pair[0]]});return func}},nthArg:function(nthArg){return function(n){var arity=0>n?1:toInteger(n)+1;return curry(nthArg(n),arity)}},rearg:function(rearg){return function(func,indexes){var arity=indexes?indexes.length:0;return curry(rearg(func,indexes),arity)}},
runInContext:function(runInContext){return function(context){return baseConvert(util,runInContext(context),options$jscomp$0)}}};if(!isObj)return wrap(name$jscomp$0,func$jscomp$1,defaultHolder);var _=func$jscomp$1,pairs$jscomp$0=[];each(aryMethodKeys,function(aryKey){each(mapping.aryMethod[aryKey],function(key){var func=_[mapping.remap[key]||key];func&&pairs$jscomp$0.push([key,wrap(key,func,_)])})});each(keys(_),function(key){var func=_[key];if("function"==typeof func){for(var length=pairs$jscomp$0.length;length--;)if(pairs$jscomp$0[length][0]==
key)return;func.convert=createConverter(key,func);pairs$jscomp$0.push([key,func])}});each(pairs$jscomp$0,function(pair){_[pair[0]]=pair[1]});_.convert=function(options){return _.runInContext.convert(options)(void 0)};_.placeholder=_;each(keys(_),function(key){each(mapping.realToAlias[key]||[],function(alias){_[alias]=_[key]})});return _}var mapping=require("module$node_modules$lodash$fp$_mapping"),fallbackHolder=require("module$node_modules$lodash$fp$placeholder"),push=Array.prototype.push;module.exports=
baseConvert}
//# sourceMappingURL=module$node_modules$lodash$fp$_baseConvert.js.map
