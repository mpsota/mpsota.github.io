{
"version":3,
"file":"module$node_modules$lodash$_createFlow.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAC/FC,cAAgBH,OAAA,CAAQ,2CAAR,CAD+E,CAE/FI,SAAWJ,OAAA,CAAQ,sCAAR,CAFoF,CAG/FK,QAAUL,OAAA,CAAQ,qCAAR,CAHqF,CAI/FM,YAAcN,OAAA,CAAQ,yCAAR,CAJiF,CAK/FO,QAAUP,OAAA,CAAQ,oCAAR,CALqF,CAM/FQ,WAAaR,OAAA,CAAQ,wCAAR,CAwEjBC,OAAAC,QAAA,CAtDAO,QAAmB,CAACC,SAAD,CAAY,CAC7B,MAAON,SAAA,CAAS,QAAQ,CAACO,KAAD,CAAQ,CAAA,IAC1BC;AAASD,KAAAC,OADiB,CAE1BC,eAAQD,MAFkB,CAG1BE,OAASX,aAAAY,UAAAC,KAKb,KAHIN,SAGJ,EAFEC,KAAAM,QAAA,EAEF,CAAOJ,cAAA,EAAP,CAAA,CAAgB,CACd,IAAIK,KAAOP,KAAA,CAAME,cAAN,CACX,IAAmB,UAAnB,EAAI,MAAOK,KAAX,CACE,KAAM,KAAIC,SAAJ,CA3BQC,qBA2BR,CAAN,CAEF,GAAIN,MAAJ,EAAc,CAACO,OAAf,EAA+C,SAA/C,EAA0Bf,WAAA,CAAYY,IAAZ,CAA1B,CACE,IAAIG,QAAU,IAAIlB,aAAJ,CAAkB,EAAlB,CAAsB,CAAA,CAAtB,CANF,CAUhB,IADAU,cACA,CADQQ,OAAA,CAAUR,cAAV,CAAkBD,MAC1B,CAAO,EAAEC,cAAT,CAAiBD,MAAjB,CAAA,CAAyB,CACvBM,IAAA,CAAOP,KAAA,CAAME,cAAN,CAEHS,OAAAA,CAAWhB,WAAA,CAAYY,IAAZ,CAAf,KACIK,KAAmB,SAAZ,EAAAD,MAAA,CAAwBjB,OAAA,CAAQa,IAAR,CAAxB,CAAwCM,IAAAA,EAMjDH,QAAA,CAJEE,IAAJ,EAAYf,UAAA,CAAWe,IAAA,CAAK,CAAL,CAAX,CAAZ;AACkB,GADlB,EACMA,IAAA,CAAK,CAAL,CADN,EAEM,CAACA,IAAA,CAAK,CAAL,CAAAX,OAFP,EAEoC,CAFpC,EAEyBW,IAAA,CAAK,CAAL,CAFzB,CAIYF,OAAA,CAAQf,WAAA,CAAYiB,IAAA,CAAK,CAAL,CAAZ,CAAR,CAAAE,MAAA,CAAoCJ,OAApC,CAA6CE,IAAA,CAAK,CAAL,CAA7C,CAJZ,CAM4B,CAAhB,EAACL,IAAAN,OAAD,EAAqBJ,UAAA,CAAWU,IAAX,CAArB,CACNG,OAAA,CAAQC,MAAR,CAAA,EADM,CAEND,OAAAL,KAAA,CAAaE,IAAb,CAdiB,CAiBzB,MAAO,SAAQ,EAAG,CAAA,IACZQ,KAAOC,SADK,CAEZC,MAAQF,IAAA,CAAK,CAAL,CAEZ,IAAIL,OAAJ,EAA8B,CAA9B,EAAeK,IAAAd,OAAf,EAAmCL,OAAA,CAAQqB,KAAR,CAAnC,CACE,MAAOP,QAAAQ,MAAA,CAAcD,KAAd,CAAAA,MAAA,EALO,KAOZf,MAAQ,CAGZ,KAFIiB,IAEJ,CAFalB,MAAA,CAASD,KAAA,CAAME,KAAN,CAAAY,MAAA,CAAmB,IAAnB,CAAyBC,IAAzB,CAAT,CAA0CE,KAEvD,CAAO,EAAEf,KAAT,CAAiBD,MAAjB,CAAA,CACEkB,IAAA,CAASnB,KAAA,CAAME,KAAN,CAAAkB,KAAA,CAAkB,IAAlB,CAAwBD,IAAxB,CAEX,OAAOA,KAbS,CAnCY,CAAzB,CADsB,CAxBoE;",
"sources":["node_modules/lodash/_createFlow.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_createFlow\"] = function(global,require,module,exports) {\nvar LodashWrapper = require('./_LodashWrapper'),\n    flatRest = require('./_flatRest'),\n    getData = require('./_getData'),\n    getFuncName = require('./_getFuncName'),\n    isArray = require('./isArray'),\n    isLaziable = require('./_isLaziable');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_CURRY_FLAG = 8,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256;\n\n/**\n * Creates a `_.flow` or `_.flowRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new flow function.\n */\nfunction createFlow(fromRight) {\n  return flatRest(function(funcs) {\n    var length = funcs.length,\n        index = length,\n        prereq = LodashWrapper.prototype.thru;\n\n    if (fromRight) {\n      funcs.reverse();\n    }\n    while (index--) {\n      var func = funcs[index];\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n        var wrapper = new LodashWrapper([], true);\n      }\n    }\n    index = wrapper ? index : length;\n    while (++index < length) {\n      func = funcs[index];\n\n      var funcName = getFuncName(func),\n          data = funcName == 'wrapper' ? getData(func) : undefined;\n\n      if (data && isLaziable(data[0]) &&\n            data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n            !data[4].length && data[9] == 1\n          ) {\n        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n      } else {\n        wrapper = (func.length == 1 && isLaziable(func))\n          ? wrapper[funcName]()\n          : wrapper.thru(func);\n      }\n    }\n    return function() {\n      var args = arguments,\n          value = args[0];\n\n      if (wrapper && args.length == 1 && isArray(value)) {\n        return wrapper.plant(value).value();\n      }\n      var index = 0,\n          result = length ? funcs[index].apply(this, args) : value;\n\n      while (++index < length) {\n        result = funcs[index].call(this, result);\n      }\n      return result;\n    };\n  });\n}\n\nmodule.exports = createFlow;\n\n};"],
"names":["shadow$provide","global","require","module","exports","LodashWrapper","flatRest","getData","getFuncName","isArray","isLaziable","createFlow","fromRight","funcs","length","index","prereq","prototype","thru","reverse","func","TypeError","FUNC_ERROR_TEXT","wrapper","funcName","data","undefined","apply","args","arguments","value","plant","result","call"]
}
