{
"version":3,
"file":"module$node_modules$web3_utils$src$index.js",
"lineCount":10,
"mappings":"AAAAA,cAAA,yCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAyBrG,IAAIC,EAAIH,OAAA,CAAQ,2CAAR,CAAR,CACII,UAAYJ,OAAA,CAAQ,0CAAR,CADhB,CAEIK,MAAQL,OAAA,CAAQ,0CAAR,CACRM,OAAAA,CAAeN,OAAA,CAAQ,iDAAR,CACnB,KAAIO,YAAcP,OAAA,CAAQ,yCAAR,CAAlB,CAqFIQ,cAAgBA,QAAQ,CAACC,YAAD,CAAeC,IAAf,CAC5B,CAEI,IAAIC,MAAQ,EAEZD,KAAAE,QAAA,CAAa,QAAQ,CAACC,KAAD,CAAQ,CACzB,GAAgC,QAAhC;AAAI,MAAOA,MAAAC,WAAX,CAA0C,CACtC,GAAmC,OAAnC,GAAID,KAAAE,KAAAC,UAAA,CAAqB,CAArB,CAAwB,CAAxB,CAAJ,CACI,KAAUC,MAAJ,CAAU,0DAAV,CAAN,CAEJ,IAAIC,OAAS,EAAb,CACIC,aAAeN,KAAAE,KAAAK,QAAA,CAAmB,GAAnB,CACC,EAApB,EAAID,YAAJ,GAAyBD,MAAzB,CAAkCL,KAAAE,KAAAC,UAAA,CAAqBG,YAArB,CAAlC,CACIE,MAAAA,CAASb,aAAA,CAAcC,YAAd,CAA4BI,KAAAC,WAA5B,CAEVX,EAAAmB,QAAA,CAAUD,KAAV,CAAH,EAAwBZ,YAAxB,CAEIE,KAAAY,KAAA,CAAW,QAAX,CAAsBF,KAAAG,KAAA,CAAY,GAAZ,CAAtB,CAAyC,GAAzC,CAA+CN,MAA/C,CAFJ,CAIST,YAAJ,CAMDE,KAAAY,KAAA,CAAW,GAAX,CAAiBF,KAAjB,CAA0B,GAA1B,CANC,CAEDV,KAAAY,KAAA,CAAW,GAAX,CAAiBF,KAAAG,KAAA,CAAY,GAAZ,CAAjB,CAAoC,GAApC,CAA0CN,MAA1C,CAfkC,CAA1C,IAuBIP,MAAAY,KAAA,CAAWV,KAAAE,KAAX,CAxBqB,CAA7B,CA4BA,OAAOJ,MAhCX,CAqDIc;OAAAA,CAAaA,QAAQ,CAACC,GAAD,CAAM,CAC3B,GAAI,CAACrB,KAAAsB,YAAA,CAAkBD,GAAlB,CAAL,CACI,KAAUT,MAAJ,CAAU,2CAAV,CAAN,CAEJ,IAAIW,IAAM,EAAV,CACIC,EAAI,CADR,CACWC,EAAIJ,GAAAK,OAIf,KAH4B,IAG5B,GAHIL,GAAAV,UAAA,CAAc,CAAd,CAAiB,CAAjB,CAGJ,GAFIa,CAEJ,CAFQ,CAER,EAAOA,CAAP,CAAWC,CAAX,CAAcD,CAAd,EAAiB,CAAjB,CAAoB,CAChB,IAAIG,KAAOC,QAAA,CAASP,GAAAQ,OAAA,CAAWL,CAAX,CAAc,CAAd,CAAT,CAA2B,EAA3B,CACXD,IAAA,EAAOO,MAAAC,aAAA,CAAoBJ,IAApB,CAFS,CAKpB,MAAOJ,IAdoB,CAwB3BS,QAAAA,CAAaA,QAAQ,CAACT,GAAD,CAAM,CAC3B,GAAG,CAACA,GAAJ,CACI,MAAO,MAEX,KADA,IAAIF,IAAM,EAAV,CACQG,EAAI,CAAZ,CAAeA,CAAf,CAAmBD,GAAAG,OAAnB,CAA+BF,CAAA,EAA/B,CAAoC,CAEhC,IAAIS,EADOV,GAAAW,WAAAP,CAAeH,CAAfG,CACHQ,SAAA,CAAc,EAAd,CACRd,IAAA,EAAkB,CAAX,CAAAY,CAAAP,OAAA,CAAe,GAAf,CAAqBO,CAArB,CAAyBA,CAHA,CAMpC,MAAO,IAAP,CAAcZ,GAVa,CAuB/B,KAAIe,aAAeA,QAAS,CAACC,IAAD,CAAO,CAC/BA,IAAA,CAAOA,IAAA,CAAOA,IAAAC,YAAA,EAAP,CAA4B,OACnC,IAAI,CAACvC,SAAAwC,QAAA,CAAkBF,IAAlB,CAAL,CACI,KAAUzB,MAAJ,CAAU,aAAV;AAAyByB,IAAzB,CAA+B,6DAA/B,CAA+FG,IAAAC,UAAA,CAAe1C,SAAAwC,QAAf,CAAkC,IAAlC,CAAwC,CAAxC,CAA/F,CAAN,CAEJ,MAAOF,KALwB,CAwGnCzC,OAAAC,QAAA,CAAiB,CACb6C,WApRaA,QAAS,CAACC,KAAD,CAAQC,OAAR,CAAiBC,MAAjB,CAAyBC,QAAzB,CAAmCC,YAAnC,CAAiD,CAIvE,GAAGjD,CAAAkD,SAAA,CAAWL,KAAX,CAAH,EAAwB,EAAEA,KAAF,WAAmB/B,MAAnB,CAAxB,EAAsD+B,KAAAM,KAAtD,CAAkE,CAC9D,GAAGnD,CAAAkD,SAAA,CAAWL,KAAAM,KAAX,CAAH,EAA6BnD,CAAAmB,QAAA,CAAU0B,KAAAM,KAAV,CAA7B,CACIN,KAAAM,KAAA,CAAaT,IAAAC,UAAA,CAAeE,KAAAM,KAAf,CAA2B,IAA3B,CAAiC,CAAjC,CAGjBN,MAAA,CAAQA,KAAAO,QAAR,CAAuB,IAAvB,CAA6BP,KAAAM,KALiC,CAQ/DnD,CAAAqD,SAAA,CAAWR,KAAX,CAAH,GACIA,KADJ,CACgB/B,KAAJ,CAAU+B,KAAV,CADZ,CAII7C,EAAAsD,WAAA,CAAaN,QAAb,CAAJ,EACIA,QAAA,CAASH,KAAT,CAAgBI,YAAhB,CAEAjD,EAAAsD,WAAA,CAAaP,MAAb,CAAJ;CAWI,CAPID,OAOJ,EANK9C,CAAAsD,WAAA,CAAaR,OAAAS,UAAb,CAML,EALIT,OAAAS,UAAA,CAAkB,OAAlB,CAAA3B,OAKJ,EAL0C5B,CAAAsD,WAAA,CAAaN,QAAb,CAK1C,GAHIF,OAAAU,MAAA,CAAc,QAAQ,EAAE,EAAxB,CAGJ,CAAAC,UAAA,CAAW,QAAS,EAAG,CACnBV,MAAA,CAAOF,KAAP,CADmB,CAAvB,CAEG,CAFH,CAXJ,CAgBGC,QAAH,EAAc9C,CAAAsD,WAAA,CAAaR,OAAAY,KAAb,CAAd,EAEID,UAAA,CAAW,QAAS,EAAG,CACnBX,OAAAY,KAAA,CAAa,OAAb,CAAsBb,KAAtB,CAA6BI,YAA7B,CACAH,QAAAa,mBAAA,EAFmB,CAAvB,CAGG,CAHH,CAMJ,OAAOb,QA3CgE,CAmR1D,CAEbc,6BAhO+BA,QAAS,CAACC,IAAD,CAAO,CAC/C,MAAI7D,EAAAkD,SAAA,CAAWW,IAAX,CAAJ,EAAwBA,IAAAC,KAAxB,EAAiE,EAAjE,GAAqCD,IAAAC,KAAA7C,QAAA,CAAkB,GAAlB,CAArC,CACW4C,IAAAC,KADX,CAIOD,IAAAC,KAJP,CAImB,GAJnB,CAIyBzD,aAAA,CAAc,CAAA,CAAd,CAAqBwD,IAAAE,OAArB,CAAA1C,KAAA,CAAuC,GAAvC,CAJzB,CAIuE,GALxB,CA8NlC,CAGbhB,cAAeA,aAHF;AAMb2D,UAxKYA,QAAQ,CAACC,IAAD,CAAO,CAC3B,MAAO,IAAP,CAAc7D,WAAA,CAAY6D,IAAZ,CAAA5B,SAAA,CAA2B,KAA3B,CADa,CAkKd,CAObrC,EAAGA,CAPU,CAQbkE,GAAIhE,KAAAgE,GARS,CASbC,KAAMjE,KAAAiE,KATO,CAUbC,YAAalE,KAAAkE,YAVA,CAWbC,MAAOnE,KAAAmE,MAXM,CAYb7C,YAAatB,KAAAsB,YAZA,CAab8C,KAAMpE,KAAAoE,KAbO,CAcbC,QAASrE,KAAAqE,QAdI,CAebC,UAAWtE,KAAAoE,KAfE,CAgBbnE,aAAcA,MAAAA,aAhBD,CAiBbsE,gBAAiBtE,MAAAsE,gBAjBJ,CAkBbC,UAAWxE,KAAAwE,UAlBE,CAmBbC,qBAAsBzE,KAAAyE,qBAnBT,CAoBbC,kBA3CoBA,QAAS,CAACC,OAAD,CAAU,CACvC,GAAuB,WAAvB,GAAI,MAAOA,QAAX,CAAoC,MAAO,EAE3C,IAAG,CAAC,sBAAAC,KAAA,CAA4BD,OAA5B,CAAJ,CACI,KAAU/D,MAAJ,CAAU,iBAAV;AAA6B+D,OAA7B,CAAsC,oCAAtC,CAAN,CAIJA,OAAA,CAAUA,OAAArC,YAAA,EAAAuC,QAAA,CAA8B,MAA9B,CAAqC,EAArC,CAIV,KAHA,IAAIC,YAAc9E,KAAAoE,KAAA,CAAWO,OAAX,CAAAE,QAAA,CAA4B,MAA5B,CAAmC,EAAnC,CAAlB,CACIE,gBAAkB,IADtB,CAGSvD,EAAI,CAAb,CAAgBA,CAAhB,CAAoBmD,OAAAjD,OAApB,CAAoCF,CAAA,EAApC,CAGQuD,eAAA,CAD+B,CAAnC,CAAInD,QAAA,CAASkD,WAAA,CAAYtD,CAAZ,CAAT,CAAyB,EAAzB,CAAJ,CACIuD,eADJ,CACuBJ,OAAA,CAAQnD,CAAR,CAAAwD,YAAA,EADvB,CAGID,eAHJ,CAGuBJ,OAAA,CAAQnD,CAAR,CAG3B,OAAOuD,gBApBgC,CAuB1B,CAqBbE,MAAOjF,KAAAiF,MArBM,CAsBbC,KAAMlF,KAAAkF,KAtBO,CAwBbC,WAAYnF,KAAAmF,WAxBC,CAyBbC,WAAYpF,KAAAoF,WAzBC,CA2BbC,kBAAmBrF,KAAAqF,kBA3BN,CA6BbC,YAAatF,KAAAsF,YA7BA,CA8BbC,UAAWvF,KAAAsF,YA9BE;AAgCbE,YAAaxF,KAAAwF,YAhCA,CAiCbC,YAAazF,KAAAwF,YAjCA,CAmCbE,UAAW1F,KAAA0F,UAnCE,CAoCbC,YAAa3F,KAAA0F,UApCA,CAqCbE,OAAQ5F,KAAA0F,UArCK,CAuCbG,UAAW7F,KAAA6F,UAvCE,CAwCbC,YAAa9F,KAAA6F,UAxCA,CAyCbE,SAAU/F,KAAA6F,UAzCG,CA2CbzE,WAAYA,OA3CC,CA4Cb4E,QAAS5E,OA5CI,CA6CbY,WAAYA,OA7CC,CA8CbiE,UAAWjE,OA9CE,CAgDbO,QAASxC,SAAAwC,QAhDI,CAiDb2D,MA5FQA,QAAQ,CAACC,MAAD,CAAS9D,IAAT,CAAe,CAC/BA,IAAA,CAAOD,YAAA,CAAaC,IAAb,CAEP,IAAG,CAACrC,KAAAiE,KAAA,CAAWkC,MAAX,CAAJ,EAA0B,CAACrG,CAAAqD,SAAA,CAAWgD,MAAX,CAA3B,CACI,KAAUvF,MAAJ,CAAU,yEAAV,CAAN,CAGJ,MAAOZ,MAAAiE,KAAA,CAAWkC,MAAX,CAAA;AAAqBpG,SAAAmG,MAAA,CAAgBC,MAAhB,CAAwB9D,IAAxB,CAArB,CAAqDtC,SAAAmG,MAAA,CAAgBC,MAAhB,CAAwB9D,IAAxB,CAAAF,SAAA,CAAuC,EAAvC,CAP7B,CA2ClB,CAkDbiE,QA7HUA,QAAQ,CAACD,MAAD,CAAS9D,IAAT,CAAe,CACjCA,IAAA,CAAOD,YAAA,CAAaC,IAAb,CAEP,IAAG,CAACrC,KAAAiE,KAAA,CAAWkC,MAAX,CAAJ,EAA0B,CAACrG,CAAAqD,SAAA,CAAWgD,MAAX,CAA3B,CACI,KAAUvF,MAAJ,CAAU,yEAAV,CAAN,CAGJ,MAAOZ,MAAAiE,KAAA,CAAWkC,MAAX,CAAA,CAAqBpG,SAAAqG,QAAA,CAAkBD,MAAlB,CAA0B9D,IAA1B,CAArB,CAAuDtC,SAAAqG,QAAA,CAAkBD,MAAlB,CAA0B9D,IAA1B,CAAAF,SAAA,CAAyC,EAAzC,CAP7B,CA2EpB,CAoDbkE,QAASrG,KAAAsG,QApDI,CAqDbA,QAAStG,KAAAsG,QArDI,CAsDbC,SAAUvG,KAAAwG,SAtDG,CAuDbA,SAAUxG,KAAAwG,SAvDG,CAwDbC,iBAAkBzG,KAAAyG,iBAxDL,CA0DbC,QAAS1G,KAAA0G,QA1DI;AA2DbC,6BAA8B3G,KAAA2G,6BA3DjB,CA4DbC,yBAA0B5G,KAAA4G,yBA5Db,CA6DbC,QAAS7G,KAAA6G,QA7DI,CA8DbC,eAAgB9G,KAAA8G,eA9DH,CA+DbC,UAAW/G,KAAA+G,UA/DE,CA/ToF;",
"sources":["node_modules/web3-utils/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$web3_utils$src$index\"] = function(global,require,module,exports) {\n/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\nvar _ = require('underscore');\nvar ethjsUnit = require('ethjs-unit');\nvar utils = require('./utils.js');\nvar soliditySha3 = require('./soliditySha3.js');\nvar randombytes = require('randombytes');\n\n\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @param {any} optionalData\n * @return {Object} the emitter\n */\nvar _fireError = function (error, emitter, reject, callback, optionalData) {\n    /*jshint maxcomplexity: 10 */\n\n    // add data if given\n    if(_.isObject(error) && !(error instanceof Error) &&  error.data) {\n        if(_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2);\n        }\n\n        error = error.message +\"\\n\"+ error.data;\n    }\n\n    if(_.isString(error)) {\n        error = new Error(error);\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error, optionalData);\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if (\n            emitter &&\n            (_.isFunction(emitter.listeners) &&\n            emitter.listeners('error').length) || _.isFunction(callback)\n        ) {\n            emitter.catch(function(){});\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function () {\n            reject(error);\n        }, 1);\n    }\n\n    if(emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function () {\n            emitter.emit('error', error, optionalData);\n            emitter.removeAllListeners();\n        }, 1);\n    }\n\n    return emitter;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\nvar _jsonInterfaceMethodToString = function (json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    return json.name + '(' + _flattenTypes(false, json.inputs).join(',') + ')';\n};\n\n\n/**\n * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings\n *\n * @method _flattenTypes\n * @param {bool} includeTuple\n * @param {Object} puts\n * @return {Array} parameters as strings\n */\nvar _flattenTypes = function(includeTuple, puts)\n{\n    // console.log(\"entered _flattenTypes. inputs/outputs: \" + puts)\n    var types = [];\n\n    puts.forEach(function(param) {\n        if (typeof param.components === 'object') {\n            if (param.type.substring(0, 5) !== 'tuple') {\n                throw new Error('components found but type is not tuple; report on GitHub');\n            }\n            var suffix = '';\n            var arrayBracket = param.type.indexOf('[');\n            if (arrayBracket >= 0) { suffix = param.type.substring(arrayBracket); }\n            var result = _flattenTypes(includeTuple, param.components);\n            // console.log(\"result should have things: \" + result)\n            if(_.isArray(result) && includeTuple) {\n                // console.log(\"include tuple word, and its an array. joining...: \" + result.types)\n                types.push('tuple(' + result.join(',') + ')' + suffix);\n            }\n            else if(!includeTuple) {\n                // console.log(\"don't include tuple, but its an array. joining...: \" + result)\n                types.push('(' + result.join(',') + ')' + suffix);\n            }\n            else {\n                // console.log(\"its a single type within a tuple: \" + result.types)\n                types.push('(' + result + ')');\n            }\n        } else {\n            // console.log(\"its a type and not directly in a tuple: \" + param.type)\n            types.push(param.type);\n        }\n    });\n\n    return types;\n};\n\n\n/**\n * Returns a random hex string by the given bytes size\n *\n * @param {Number} size\n * @returns {string}\n */\nvar randomHex = function(size) {\n    return '0x' + randombytes(size).toString('hex');\n};\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex))\n        throw new Error('The parameter must be a valid HEX string.');\n\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar asciiToHex = function(str) {\n    if(!str)\n        return \"0x00\";\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n\n\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getUnitValue = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error('This unit \"'+ unit +'\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));\n    }\n    return unit;\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar fromWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BN objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nvar toWei = function(number, unit) {\n    unit = getUnitValue(unit);\n\n    if(!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BN objects to avoid precision errors.');\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n\n\n\n\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    if(!/^(0x)?[0-9a-f]{40}$/i.test(address))\n        throw new Error('Given address \"'+ address +'\" is not a valid Ethereum address.');\n\n\n\n    address = address.toLowerCase().replace(/^0x/i,'');\n    var addressHash = utils.sha3(address).replace(/^0x/i,'');\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    _flattenTypes: _flattenTypes,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    BN: utils.BN,\n    isBN: utils.isBN,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    sha3Raw: utils.sha3Raw,\n    keccak256: utils.sha3,\n    soliditySha3: soliditySha3.soliditySha3,\n    soliditySha3Raw: soliditySha3.soliditySha3Raw,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toChecksumAddress: toChecksumAddress,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: ethjsUnit.unitMap,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement:\u00a0utils.toTwosComplement,\n\n\u00a0\u00a0\u00a0\u00a0isBloom:\u00a0utils.isBloom,\n\u00a0\u00a0\u00a0\u00a0isUserEthereumAddressInBloom:\u00a0utils.isUserEthereumAddressInBloom,\n\u00a0\u00a0\u00a0\u00a0isContractAddressInBloom:\u00a0utils.isContractAddressInBloom,\n\u00a0\u00a0\u00a0\u00a0isTopic:\u00a0utils.isTopic,\n\u00a0\u00a0\u00a0\u00a0isTopicInBloom:\u00a0utils.isTopicInBloom,\n\u00a0\u00a0\u00a0\u00a0isInBloom:\u00a0utils.isInBloom\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","_","ethjsUnit","utils","soliditySha3","randombytes","_flattenTypes","includeTuple","puts","types","forEach","param","components","type","substring","Error","suffix","arrayBracket","indexOf","result","isArray","push","join","hexToAscii","hex","isHexStrict","str","i","l","length","code","parseInt","substr","String","fromCharCode","asciiToHex","n","charCodeAt","toString","getUnitValue","unit","toLowerCase","unitMap","JSON","stringify","_fireError","error","emitter","reject","callback","optionalData","isObject","data","message","isString","isFunction","listeners","catch","setTimeout","emit","removeAllListeners","_jsonInterfaceMethodToString","json","name","inputs","randomHex","size","BN","isBN","isBigNumber","isHex","sha3","sha3Raw","keccak256","soliditySha3Raw","isAddress","checkAddressChecksum","toChecksumAddress","address","test","replace","addressHash","checksumAddress","toUpperCase","toHex","toBN","bytesToHex","hexToBytes","hexToNumberString","hexToNumber","toDecimal","numberToHex","fromDecimal","hexToUtf8","hexToString","toUtf8","utf8ToHex","stringToHex","fromUtf8","toAscii","fromAscii","toWei","number","fromWei","padLeft","leftPad","padRight","rightPad","toTwosComplement","isBloom","isUserEthereumAddressInBloom","isContractAddressInBloom","isTopic","isTopicInBloom","isInBloom"]
}
