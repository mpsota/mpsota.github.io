{
"version":3,
"file":"module$node_modules$swarm_js$lib$swarm_hash.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAExG,IAAIC,OAASH,OAAA,CAAQ,sCAAR,CAAAI,UAAb,CAEIC,MAAQL,OAAA,CAAQ,uCAAR,CAFZ,CAIIM,eAAiBA,QAAuB,CAACC,MAAD,CAASC,IAAT,CAAe,CACrDC,MAAAA,CAAgBJ,KAAAK,QAAA,CAAcL,KAAAM,IAAA,CAAU,CAAV,CAAaN,KAAAO,WAAA,CAAiBL,MAAjB,CAAb,CAAd,CAChBM,KAAAA,CAAQR,KAAAS,QAAA,CAAc,CAACL,MAAD,CAAgB,QAAhB,CAA0BD,IAA1B,CAAd,CACZ,OAAOL,OAAA,CAAOU,IAAP,CAAAE,MAAA,CAAoB,CAApB,CAHkD,CAoC3Dd,OAAAC,QAAA,CA7BgBc,QAASA,UAAS,CAACR,IAAD,CAAO,CACnB,QAApB,GAAI,MAAOA,KAAX,EAAqD,IAArD,GAAgCA,IAAAO,MAAA,CAAW,CAAX,CAAc,CAAd,CAAhC,CACEP,IADF,CACSH,KAAAY,WAAA,CAAiBT,IAAjB,CADT;AAE2B,QAF3B,GAEW,MAAOA,KAFlB,EAEuDU,IAAAA,EAFvD,GAEuCV,IAAAD,OAFvC,GAGEC,IAHF,CAGSH,KAAAc,eAAA,CAAqBX,IAArB,CAHT,CAMA,KAAID,OAASF,KAAAE,OAAA,CAAaC,IAAb,CAEb,IAAc,IAAd,EAAID,MAAJ,CACE,MAAOD,eAAA,CAAeC,MAAf,CAAuBC,IAAvB,CAKT,KAFA,IAAIY,QAAU,IAEd,CAAkB,GAAlB,CAAOA,OAAP,CAA+Bb,MAA/B,CAAA,CACEa,OAAA,EAAW,GAKb,KAFA,IAAIC,WAAa,EAAjB,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBf,MAApB,CAA4Be,CAA5B,EAAiCF,OAAjC,CAEEC,UAAAE,KAAA,CAAgBP,SAAA,CAAUX,KAAAU,MAAA,CAAYP,IAAZ,CAAkBc,CAAlB,CAAqBA,CAArB,EADfF,OAAAI,CAAUjB,MAAViB,CAAmBF,CAAnBE,CAAuBJ,OAAvBI,CAAiCjB,MAAjCiB,CAA0CF,CAC3B,EAAV,CAAhB,CAGF,OAAOhB,eAAA,CAAeC,MAAf,CAAuBF,KAAAS,QAAA,CAAcO,UAAd,CAAvB,CA1BgC,CAb+D;",
"sources":["node_modules/swarm-js/lib/swarm-hash.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$swarm_js$lib$swarm_hash\"] = function(global,require,module,exports) {\n// Thanks https://github.com/axic/swarmhash\nvar keccak = require(\"eth-lib/lib/hash\").keccak256;\n\nvar Bytes = require(\"eth-lib/lib/bytes\");\n\nvar swarmHashBlock = function swarmHashBlock(length, data) {\n  var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));\n  var bytes = Bytes.flatten([lengthEncoded, \"0x0000\", data]);\n  return keccak(bytes).slice(2);\n}; // (Bytes | Uint8Array | String) -> String\n\n\nvar swarmHash = function swarmHash(data) {\n  if (typeof data === \"string\" && data.slice(0, 2) !== \"0x\") {\n    data = Bytes.fromString(data);\n  } else if (typeof data !== \"string\" && data.length !== undefined) {\n    data = Bytes.fromUint8Array(data);\n  }\n\n  var length = Bytes.length(data);\n\n  if (length <= 4096) {\n    return swarmHashBlock(length, data);\n  }\n\n  var maxSize = 4096;\n\n  while (maxSize * (4096 / 32) < length) {\n    maxSize *= 4096 / 32;\n  }\n\n  var innerNodes = [];\n\n  for (var i = 0; i < length; i += maxSize) {\n    var size = maxSize < length - i ? maxSize : length - i;\n    innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));\n  }\n\n  return swarmHashBlock(length, Bytes.flatten(innerNodes));\n};\n\nmodule.exports = swarmHash;\n};"],
"names":["shadow$provide","global","require","module","exports","keccak","keccak256","Bytes","swarmHashBlock","length","data","lengthEncoded","reverse","pad","fromNumber","bytes","flatten","slice","swarmHash","fromString","undefined","fromUint8Array","maxSize","innerNodes","i","push","size"]
}
