shadow$provide.module$node_modules$ethereumjs_util$dist$bytes=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var ethjsUtil=require("module$node_modules$ethjs_util$lib$index"),BN=require("module$node_modules$bn_DOT_js$lib$bn");exports.zeros=function(bytes){return Buffer.allocUnsafe(bytes).fill(0)};exports.setLengthLeft=function(msg,length,right){void 0===right&&(right=!1);var buf=
exports.zeros(length);msg=exports.toBuffer(msg);return right?msg.length<length?(msg.copy(buf),buf):msg.slice(0,length):msg.length<length?(msg.copy(buf,length-msg.length),buf):msg.slice(-length)};exports.setLength=exports.setLengthLeft;exports.setLengthRight=function(msg,length){return exports.setLength(msg,length,!0)};exports.unpad=function(a){a=ethjsUtil.stripHexPrefix(a);for(var first=a[0];0<a.length&&"0"===first.toString();)a=a.slice(1),first=a[0];return a};exports.stripZeros=exports.unpad;exports.toBuffer=
function(v){if(!Buffer.isBuffer(v))if(Array.isArray(v))v=Buffer.from(v);else if("string"===typeof v)if(ethjsUtil.isHexString(v))v=Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)),"hex");else throw Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: "+v);else if("number"===typeof v)v=ethjsUtil.intToBuffer(v);else if(null===v||void 0===v)v=Buffer.allocUnsafe(0);else if(BN.isBN(v))v=v.toArrayLike(Buffer);else if(v.toArray)v=Buffer.from(v.toArray());
else throw Error("invalid type");return v};exports.bufferToInt=function(buf){return(new BN(exports.toBuffer(buf))).toNumber()};exports.bufferToHex=function(buf){buf=exports.toBuffer(buf);return"0x"+buf.toString("hex")};exports.fromSigned=function(num){return(new BN(num)).fromTwos(256)};exports.toUnsigned=function(num){return Buffer.from(num.toTwos(256).toArray())};exports.addHexPrefix=function(str){return"string"!==typeof str?str:ethjsUtil.isHexPrefixed(str)?str:"0x"+str};exports.baToJSON=function(ba){if(Buffer.isBuffer(ba))return"0x"+
ba.toString("hex");if(ba instanceof Array){for(var array=[],i=0;i<ba.length;i++)array.push(exports.baToJSON(ba[i]));return array}}}
//# sourceMappingURL=module$node_modules$ethereumjs_util$dist$bytes.js.map
