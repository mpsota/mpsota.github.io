{
"version":3,
"file":"module$node_modules$lodash$words.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,iCAAA,CAAqD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IACzFC,WAAaH,OAAA,CAAQ,wCAAR,CAD4E,CAEzFI,eAAiBJ,OAAA,CAAQ,4CAAR,CAFwE,CAGzFK,SAAWL,OAAA,CAAQ,qCAAR,CAH8E,CAIzFM,aAAeN,OAAA,CAAQ,0CAAR,CA+BnBC,OAAAC,QAAA,CAVAK,QAAc,CAACC,MAAD,CAASC,OAAT,CAAkBC,KAAlB,CAAyB,CACrCF,MAAA,CAASH,QAAA,CAASG,MAAT,CACTC,QAAA,CAAUC,KAAA,CAAQC,IAAAA,EAAR,CAAoBF,OAE9B,OAAgBE,KAAAA,EAAhB,GAAIF,OAAJ,CACSL,cAAA,CAAeI,MAAf,CAAA,CAAyBF,YAAA,CAAaE,MAAb,CAAzB;AAAgDL,UAAA,CAAWK,MAAX,CADzD,CAGOA,MAAAI,MAAA,CAAaH,OAAb,CAHP,EAGgC,EAPK,CAzBsD;",
"sources":["node_modules/lodash/words.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$words\"] = function(global,require,module,exports) {\nvar asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n\n};"],
"names":["shadow$provide","global","require","module","exports","asciiWords","hasUnicodeWord","toString","unicodeWords","words","string","pattern","guard","undefined","match"]
}
