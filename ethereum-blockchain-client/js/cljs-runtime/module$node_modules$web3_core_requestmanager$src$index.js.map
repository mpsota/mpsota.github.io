{
"version":3,
"file":"module$node_modules$web3_core_requestmanager$src$index.js",
"lineCount":7,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0BnH,IAAIC,EAAIH,OAAA,CAAQ,2CAAR,CAAR,CACII,OAASJ,OAAA,CAAQ,iDAAR,CAAAI,OADb,CAEIC,QAAUL,OAAA,CAAQ,0DAAR,CACVM,OAAAA,CAAeN,OAAA,CAAQ,wDAAR,CACfO,QAAAA,CAAgBP,OAAA,CAAQ,gEAAR,CAUpB,KAAIQ,eAAiBA,QAASA,eAAc,CAACC,QAAD,CAAW,CACnD,IAAAA,SAAA;AAAgB,IAChB,KAAAC,UAAA,CAAiBF,cAAAE,UAEjB,KAAAC,YAAA,CAAiBF,QAAjB,CACA,KAAAG,cAAA,CAAqB,EAL8B,CAUvDJ,eAAAD,cAAA,CAA+BA,OAE/BC,eAAAE,UAAA,CAA2B,CACvBG,kBAAmBb,OAAA,CAAQ,iDAAR,CADI,CAEvBc,aAAcd,OAAA,CAAQ,mDAAR,CAFS,CAGvBe,YAAaf,OAAA,CAAQ,kDAAR,CAHU,CAc3BQ,eAAAQ,UAAAL,YAAA,CAAuCM,QAAS,CAACC,CAAD,CAAIC,GAAJ,CAAS,CACrD,IAAIC,MAAQ,IAGZ,IAAGF,CAAH,EAAqB,QAArB,GAAQ,MAAOA,EAAf,EAAiC,IAAAR,UAAjC,CAGI,GAAG,iBAAAW,KAAA,CAAuBH,CAAvB,CAAH,CACIA,CAAA;AAAI,IAAI,IAAAR,UAAAI,aAAJ,CAAgCI,CAAhC,CADR,KAIO,IAAG,eAAAG,KAAA,CAAqBH,CAArB,CAAH,CACHA,CAAA,CAAI,IAAI,IAAAR,UAAAG,kBAAJ,CAAqCK,CAArC,CADD,KAIA,IAAGA,CAAH,EAAuB,QAAvB,GAAQ,MAAOC,IAAf,EAA2D,UAA3D,GAAoC,MAAOA,IAAAG,QAA3C,CACHJ,CAAA,CAAI,IAAI,IAAAR,UAAAK,YAAJ,CAA+BG,CAA/B,CAAkCC,GAAlC,CADD,KAGA,IAAGD,CAAH,CACH,KAAUK,MAAJ,CAAU,kCAAV,CAA8CL,CAA9C,CAAiD,GAAjD,CAAN,CAKL,IAAAT,SAAH,EAAoB,IAAAA,SAAAe,UAApB,EACI,IAAAC,mBAAA,EAMJ,KAHA,IAAAhB,SAGA,CAHgBS,CAGhB,EAHqB,IAGrB,GAAoB,IAAAT,SAAAiB,GAApB,CACI,IAAAjB,SAAAiB,GAAA,CAAiB,MAAjB,CAAyBC,QAAmC,CAACC,MAAD,CAASC,gBAAT,CAA0B,CAClFD,MAAA,CAASA,MAAT,EAAmBC,gBAGhBD,OAAAE,OAAH,EAAoBV,KAAAR,cAAA,CAAoBgB,MAAAG,OAAAC,aAApB,CAApB;AAAuEZ,KAAAR,cAAA,CAAoBgB,MAAAG,OAAAC,aAApB,CAAAC,SAAvE,EACIb,KAAAR,cAAA,CAAoBgB,MAAAG,OAAAC,aAApB,CAAAC,SAAA,CAAyD,IAAzD,CAA+DL,MAAAG,OAAAH,OAA/D,CAL8E,CAAtF,CAhCiD,CA0DzDpB,eAAAQ,UAAAkB,KAAA,CAAgCC,QAAS,CAACC,IAAD,CAAOH,QAAP,CAAiB,CACtDA,QAAA,CAAWA,QAAX,EAAuB,QAAQ,EAAE,EAEjC,IAAI,CAAC,IAAAxB,SAAL,CACI,MAAOwB,SAAA,CAAS7B,MAAAiC,gBAAA,EAAT,CAGX,KAAIC,QAAUjC,OAAAkC,UAAA,CAAkBH,IAAAN,OAAlB,CAA+BM,IAAAL,OAA/B,CACd,KAAAtB,SAAA,CAAc,IAAAA,SAAA+B,UAAA,CAA0B,WAA1B,CAAwC,MAAtD,CAAA,CAA8DF,OAA9D,CAAuE,QAAS,CAACG,GAAD,CAAMb,MAAN,CAAc,CAC1F,GAAGA,MAAH,EAAaA,MAAAc,GAAb,EAA0BJ,OAAAI,GAA1B,GAAyCd,MAAAc,GAAzC,CAAoD,MAAOT,SAAA,CAAaV,KAAJ,CAAU,qBAAV;AAAiCK,MAAAc,GAAjC,CAA4C,gBAA5C,CAA8DJ,OAAAI,GAA9D,CAA0E,QAA1E,CAAoFC,IAAAC,UAAA,CAAeN,OAAf,CAApF,CAAT,CAE3D,IAAIG,GAAJ,CACI,MAAOR,SAAA,CAASQ,GAAT,CAGX,IAAIb,MAAJ,EAAcA,MAAAiB,MAAd,CACI,MAAOZ,SAAA,CAAS7B,MAAA0C,cAAA,CAAqBlB,MAArB,CAAT,CAGX,IAAI,CAACvB,OAAA0C,gBAAA,CAAwBnB,MAAxB,CAAL,CACI,MAAOK,SAAA,CAAS7B,MAAA4C,gBAAA,CAAuBpB,MAAvB,CAAT,CAGXK,SAAA,CAAS,IAAT,CAAeL,MAAAA,OAAf,CAf0F,CAA9F,CARsD,CAkC1DpB,eAAAQ,UAAAiC,UAAA,CAAqCC,QAAS,CAACd,IAAD,CAAOH,QAAP,CAAiB,CAC3D,GAAI,CAAC,IAAAxB,SAAL,CACI,MAAOwB,SAAA,CAAS7B,MAAAiC,gBAAA,EAAT,CAGPC,KAAAA,CAAUjC,OAAA8C,eAAA,CAAuBf,IAAvB,CACd,KAAA3B,SAAA,CAAc,IAAAA,SAAA+B,UAAA,CAA0B,WAA1B,CAAwC,MAAtD,CAAA,CAA8DF,IAA9D;AAAuE,QAAS,CAACG,GAAD,CAAMW,OAAN,CAAe,CAC3F,GAAIX,GAAJ,CACI,MAAOR,SAAA,CAASQ,GAAT,CAGX,IAAI,CAACtC,CAAAkD,QAAA,CAAUD,OAAV,CAAL,CACI,MAAOnB,SAAA,CAAS7B,MAAA4C,gBAAA,CAAuBI,OAAvB,CAAT,CAGXnB,SAAA,CAAS,IAAT,CAAemB,OAAf,CAT2F,CAA/F,CAN2D,CA6B/D5C,eAAAQ,UAAAsC,gBAAA,CAA2CC,QAAS,CAACb,EAAD,CAAKc,IAAL,CAAWC,IAAX,CAAiBxB,QAAjB,CAA2B,CAC3E,GAAG,IAAAxB,SAAAiB,GAAH,CACI,IAAAd,cAAA,CAAmB8B,EAAnB,CAAA,CAAyB,CACrBT,SAAUA,QADW,CAErBwB,KAAMA,IAFe,CAGrBD,KAAMA,IAHe,CAD7B,KAQI,MAAUjC,MAAJ,CAAU,8CAAV,CAA2D,IAAAd,SAAAiD,YAAAF,KAA3D,CAAN,CATuE,CAoB/EhD,eAAAQ,UAAA2C,mBAAA,CAA8CC,QAAS,CAAClB,EAAD,CAAKT,QAAL,CAAe,CAG/D,IAAArB,cAAA,CAAmB8B,EAAnB,CAAH,GAEI,IAAAR,KAAA,CAAU,CACNJ,OAAQ,IAAAlB,cAAA,CAAmB8B,EAAnB,CAAAe,KAAR3B;AAAsC,cADhC,CAENC,OAAQ,CAACW,EAAD,CAFF,CAAV,CAGGT,QAHH,CAMA,CAAA,OAVQb,IAUDR,cAAA,CAAoB8B,EAApB,CARX,CAHkE,CAoBtElC,eAAAQ,UAAAS,mBAAA,CAA8CoC,QAAS,CAACC,aAAD,CAAgB,CACnE,IAAI1C,MAAQ,IAGR,KAAAR,cAAJ,EAEImD,MAAAC,KAAA,CAAY,IAAApD,cAAZ,CAAAqD,QAAA,CAAwC,QAAQ,CAACvB,EAAD,CAAI,CAC5CoB,aAAJ,EAAsD,SAAtD,GAAqB1C,KAAAR,cAAA,CAAoB8B,EAApB,CAAAc,KAArB,EACIpC,KAAAuC,mBAAA,CAAyBjB,EAAzB,CAF4C,CAApD,CAQD,KAAAjC,SAAAyD,MAAH,EACI,IAAAzD,SAAAyD,MAAA,EAf+D,CAkBvEjE,OAAAC,QAAA,CAAiB,CACbiE,QAAS3D,cADI,CAEbF,aAAcA,MAFD,CArPkG;",
"sources":["node_modules/web3-core-requestmanager/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$web3_core_requestmanager$src$index\"] = function(global,require,module,exports) {\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n\n\n\n    /**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n */\nvar RequestManager = function RequestManager(provider) {\n    this.provider = null;\n    this.providers = RequestManager.providers;\n\n    this.setProvider(provider);\n    this.subscriptions = {};\n};\n\n\n\nRequestManager.givenProvider = givenProvider;\n\nRequestManager.providers = {\n    WebsocketProvider: require('web3-providers-ws'),\n    HttpProvider: require('web3-providers-http'),\n    IpcProvider: require('web3-providers-ipc')\n};\n\n\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object} p\n */\nRequestManager.prototype.setProvider = function (p, net) {\n    var _this = this;\n\n    // autodetect provider\n    if(p && typeof p === 'string' && this.providers) {\n\n        // HTTP\n        if(/^http(s)?:\\/\\//i.test(p)) {\n            p = new this.providers.HttpProvider(p);\n\n            // WS\n        } else if(/^ws(s)?:\\/\\//i.test(p)) {\n            p = new this.providers.WebsocketProvider(p);\n\n            // IPC\n        } else if(p && typeof net === 'object'  && typeof net.connect === 'function') {\n            p = new this.providers.IpcProvider(p, net);\n\n        } else if(p) {\n            throw new Error('Can\\'t autodetect provider for \"'+ p +'\"');\n        }\n    }\n\n    // reset the old one before changing, if still connected\n    if(this.provider && this.provider.connected)\n        this.clearSubscriptions();\n\n\n    this.provider = p || null;\n\n    // listen to incoming notifications\n    if(this.provider && this.provider.on) {\n        this.provider.on('data', function requestManagerNotification(result, deprecatedResult){\n            result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n\n            // check for result.method, to prevent old providers errors to pass as result\n            if(result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {\n                _this.subscriptions[result.params.subscription].callback(null, result.params.result);\n            }\n        });\n        // TODO add error, end, timeout, connect??\n        // this.provider.on('error', function requestManagerNotification(result){\n        //     Object.keys(_this.subscriptions).forEach(function(id){\n        //         if(_this.subscriptions[id].callback)\n        //             _this.subscriptions[id].callback(err);\n        //     });\n        // }\n    }\n};\n\n\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n    callback = callback || function(){};\n\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toPayload(data.method, data.params);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, result) {\n        if(result && result.id && payload.id !== result.id) return callback(new Error('Wrong response id \"'+ result.id +'\" (expected: \"'+ payload.id +'\") in '+ JSON.stringify(payload)));\n\n        if (err) {\n            return callback(err);\n        }\n\n        if (result && result.error) {\n            return callback(errors.ErrorResponse(result));\n        }\n\n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n\n        callback(null, result.result);\n    });\n};\n\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toBatchPayload(data);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (!_.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n\n        callback(null, results);\n    });\n};\n\n\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {String} id           the subscription id\n * @param {String} name         the subscription name\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (id, name, type, callback) {\n    if(this.provider.on) {\n        this.subscriptions[id] = {\n            callback: callback,\n            type: type,\n            name: name\n        };\n\n    } else {\n        throw new Error('The provider doesn\\'t support subscriptions: '+ this.provider.constructor.name);\n    }\n};\n\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n    var _this = this;\n\n    if(this.subscriptions[id]) {\n\n        this.send({\n            method: this.subscriptions[id].type + '_unsubscribe',\n            params: [id]\n        }, callback);\n\n        // remove subscription\n        delete _this.subscriptions[id];\n    }\n};\n\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n    var _this = this;\n\n\n    if (this.subscriptions) {\n        // uninstall all subscriptions\n        Object.keys(this.subscriptions).forEach(function(id){\n            if(!keepIsSyncing || _this.subscriptions[id].name !== 'syncing')\n                _this.removeSubscription(id);\n        });\n    }\n\n\n    //  reset notification callbacks etc.\n    if(this.provider.reset)\n        this.provider.reset();\n};\n\nmodule.exports = {\n    Manager: RequestManager,\n    BatchManager: BatchManager\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","_","errors","Jsonrpc","BatchManager","givenProvider","RequestManager","provider","providers","setProvider","subscriptions","WebsocketProvider","HttpProvider","IpcProvider","prototype","RequestManager.prototype.setProvider","p","net","_this","test","connect","Error","connected","clearSubscriptions","on","requestManagerNotification","result","deprecatedResult","method","params","subscription","callback","send","RequestManager.prototype.send","data","InvalidProvider","payload","toPayload","sendAsync","err","id","JSON","stringify","error","ErrorResponse","isValidResponse","InvalidResponse","sendBatch","RequestManager.prototype.sendBatch","toBatchPayload","results","isArray","addSubscription","RequestManager.prototype.addSubscription","name","type","constructor","removeSubscription","RequestManager.prototype.removeSubscription","RequestManager.prototype.clearSubscriptions","keepIsSyncing","Object","keys","forEach","reset","Manager"]
}
