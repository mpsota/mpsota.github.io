{
"version":3,
"file":"module$node_modules$keccak$lib$api$keccak.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/keccak/lib/api/keccak.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$keccak$lib$api$keccak\"] = function(global,require,module,exports) {\n'use strict'\nconst Buffer = require('safe-buffer').Buffer\nconst Transform = require('stream').Transform\nconst inherits = require('inherits')\n\nmodule.exports = function (KeccakState) {\n  function Keccak (rate, capacity, delimitedSuffix, hashBitLength, options) {\n    Transform.call(this, options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._hashBitLength = hashBitLength\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  inherits(Keccak, Transform)\n\n  Keccak.prototype._transform = function (chunk, encoding, callback) {\n    let error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Keccak.prototype._flush = function (callback) {\n    let error = null\n    try {\n      this.push(this.digest())\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Keccak.prototype.update = function (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Digest already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  Keccak.prototype.digest = function (encoding) {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)\n    let digest = this._state.squeeze(this._hashBitLength / 8)\n    if (encoding !== undefined) digest = digest.toString(encoding)\n\n    this._resetState()\n\n    return digest\n  }\n\n  // remove result from memory\n  Keccak.prototype._resetState = function () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  // because sometimes we need hash right now and little later\n  Keccak.prototype._clone = function () {\n    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n\n  return Keccak\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Transform","inherits","module.exports","KeccakState","Keccak","rate","capacity","delimitedSuffix","hashBitLength","options","call","_rate","_capacity","_delimitedSuffix","_hashBitLength","_options","_state","initialize","_finalized","prototype","_transform","Keccak.prototype._transform","chunk","encoding","callback","error","update","err","_flush","Keccak.prototype._flush","push","digest","Keccak.prototype.update","data","isBuffer","TypeError","Error","from","absorb","Keccak.prototype.digest","absorbLastFewBits","squeeze","undefined","toString","_resetState","Keccak.prototype._resetState","_clone","Keccak.prototype._clone","clone","copy"]
}
