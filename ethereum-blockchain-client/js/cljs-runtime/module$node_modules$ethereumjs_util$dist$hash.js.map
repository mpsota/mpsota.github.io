{
"version":3,
"file":"module$node_modules$ethereumjs_util$dist$hash.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC1G,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAAG,OACb,aACAC,OAAAC,eAAA,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAAEI,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIC,iBAAmBP,OAAA,CAAQ,+BAAR,CAAvB,CACIQ,WAAaR,OAAA,CAAQ,yCAAR,CADjB,CAEIS,UAAYT,OAAA,CAAQ,0CAAR,CAFhB,CAGIU,IAAMV,OAAA,CAAQ,oCAAR,CAHV,CAIIW,QAAUX,OAAA,CAAQ,gDAAR,CAOdE;OAAAU,OAAA,CAAiBC,QAAS,CAACC,CAAD,CAAIC,IAAJ,CAAU,CACnB,IAAK,EAAlB,GAAIA,IAAJ,GAAuBA,IAAvB,CAA8B,GAA9B,CAKID,EAAA,CAJa,QAAjB,GAAI,MAAOA,EAAX,EAA8BL,SAAAO,YAAA,CAAsBF,CAAtB,CAA9B,CAIQH,OAAAM,SAAA,CAAiBH,CAAjB,CAJR,CACQX,MAAAe,KAAA,CAAYJ,CAAZ,CAAe,MAAf,CAKHC,KAAL,GACIA,IADJ,CACW,GADX,CAEA,OAAOR,iBAAA,CAAiB,QAAjB,CAA4BQ,IAA5B,CAAAI,OAAA,CACKL,CADL,CAAAM,OAAA,EAVyB,CAkBpClB,QAAAmB,UAAA,CAAoBC,QAAS,CAACR,CAAD,CAAI,CAC7B,MAAOZ,QAAAU,OAAA,CAAeE,CAAf,CADsB,CAOjCZ,QAAAqB,OAAA,CAAiBC,QAAS,CAACV,CAAD,CAAI,CAC1BA,CAAA,CAAIH,OAAAM,SAAA,CAAiBH,CAAjB,CACJ,OAAON,WAAA,CAAW,QAAX,CAAAW,OAAA,CACKL,CADL,CAAAM,OAAA,EAFmB,CAW9BlB,QAAAuB,UAAA,CAAoBC,QAAS,CAACZ,CAAD,CAAIa,MAAJ,CAAY,CACrCb,CAAA,CAAIH,OAAAM,SAAA,CAAiBH,CAAjB,CACAc,EAAAA,CAAOpB,UAAA,CAAW,QAAX,CAAAW,OAAA,CACCL,CADD,CAAAM,OAAA,EAGX,OAAe,CAAA,CAAf,GAAIO,MAAJ,CACWhB,OAAAkB,UAAA,CAAkBD,CAAlB;AAAwB,EAAxB,CADX,CAIWA,CAT0B,CAgBzC1B,QAAA4B,QAAA,CAAkBC,QAAS,CAACjB,CAAD,CAAI,CAC3B,MAAOZ,QAAAU,OAAA,CAAeF,GAAAsB,OAAA,CAAWlB,CAAX,CAAf,CADoB,CAnE2E;",
"sources":["node_modules/ethereumjs-util/dist/hash.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereumjs_util$dist$hash\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar createKeccakHash = require('keccak');\nvar createHash = require('create-hash');\nvar ethjsUtil = require('ethjs-util');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Creates Keccak hash of the input\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\n * it's interpreted as hexadecimal, otherwise as utf8.\n * @param bits The Keccak width\n */\nexports.keccak = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\n        a = Buffer.from(a, 'utf8');\n    }\n    else {\n        a = bytes_1.toBuffer(a);\n    }\n    if (!bits)\n        bits = 256;\n    return createKeccakHash(\"keccak\" + bits)\n        .update(a)\n        .digest();\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.keccak256 = function (a) {\n    return exports.keccak(a);\n};\n/**\n * Creates SHA256 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.sha256 = function (a) {\n    a = bytes_1.toBuffer(a);\n    return createHash('sha256')\n        .update(a)\n        .digest();\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n    a = bytes_1.toBuffer(a);\n    var hash = createHash('rmd160')\n        .update(a)\n        .digest();\n    if (padded === true) {\n        return bytes_1.setLength(hash, 32);\n    }\n    else {\n        return hash;\n    }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n    return exports.keccak(rlp.encode(a));\n};\n//# sourceMappingURL=hash.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","createKeccakHash","createHash","ethjsUtil","rlp","bytes_1","keccak","exports.keccak","a","bits","isHexString","toBuffer","from","update","digest","keccak256","exports.keccak256","sha256","exports.sha256","ripemd160","exports.ripemd160","padded","hash","setLength","rlphash","exports.rlphash","encode"]
}
