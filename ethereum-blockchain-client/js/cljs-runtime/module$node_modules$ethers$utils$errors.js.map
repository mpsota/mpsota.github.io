{
"version":3,
"file":"module$node_modules$ethers$utils$errors.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/ethers/utils/errors.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethers$utils$errors\"] = function(global,require,module,exports) {\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Unknown Error\nexports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';\n// Not implemented\nexports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';\n// Missing new operator to an object\n//  - name: The name of the class\nexports.MISSING_NEW = 'MISSING_NEW';\n// Call exception\n//  - transaction: the transaction\n//  - address?: the contract address\n//  - args?: The arguments passed into the function\n//  - method?: The Solidity method signature\n//  - errorSignature?: The EIP848 error signature\n//  - errorArgs?: The EIP848 error parameters\n//  - reason: The reason (only for EIP848 \"Error(string)\")\nexports.CALL_EXCEPTION = 'CALL_EXCEPTION';\n// Response from a server was invalid\n//   - response: The body of the response\n//'BAD_RESPONSE',\n// Invalid argument (e.g. value is incompatible with type) to a function:\n//   - arg: The argument name that was invalid\n//   - value: The value of the argument\nexports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';\n// Missing argument to a function:\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\nexports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';\n// Too many arguments\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\nexports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';\n// Numeric Fault\n//   - operation: the operation being executed\n//   - fault: the reason this faulted\nexports.NUMERIC_FAULT = 'NUMERIC_FAULT';\n// Unsupported operation\n//   - operation\nexports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\n// @TODO: Enum\nfunction throwError(message, code, params) {\n    if (_censorErrors) {\n        throw new Error('unknown error');\n    }\n    if (!code) {\n        code = exports.UNKNOWN_ERROR;\n    }\n    if (!params) {\n        params = {};\n    }\n    var messageDetails = [];\n    Object.keys(params).forEach(function (key) {\n        try {\n            messageDetails.push(key + '=' + JSON.stringify(params[key]));\n        }\n        catch (error) {\n            messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n        }\n    });\n    var reason = message;\n    if (messageDetails.length) {\n        message += ' (' + messageDetails.join(', ') + ')';\n    }\n    // @TODO: Any??\n    var error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n    });\n    throw error;\n}\nexports.throwError = throwError;\nfunction checkNew(self, kind) {\n    if (!(self instanceof kind)) {\n        throwError('missing new', exports.MISSING_NEW, { name: kind.name });\n    }\n}\nexports.checkNew = checkNew;\nfunction checkArgumentCount(count, expectedCount, suffix) {\n    if (!suffix) {\n        suffix = '';\n    }\n    if (count < expectedCount) {\n        throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, { count: count, expectedCount: expectedCount });\n    }\n    if (count > expectedCount) {\n        throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, { count: count, expectedCount: expectedCount });\n    }\n}\nexports.checkArgumentCount = checkArgumentCount;\nfunction setCensorship(censorship, permanent) {\n    if (_permanentCensorErrors) {\n        throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, { operation: 'setCersorship' });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n}\nexports.setCensorship = setCensorship;\n\n};"],
"names":["shadow$provide","global","require","module","exports","throwError","message","code","params","_censorErrors","Error","UNKNOWN_ERROR","messageDetails","Object","keys","forEach","key","push","JSON","stringify","error","toString","reason","length","join","defineProperty","value","NOT_IMPLEMENTED","MISSING_NEW","CALL_EXCEPTION","INVALID_ARGUMENT","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","NUMERIC_FAULT","UNSUPPORTED_OPERATION","_permanentCensorErrors","checkNew","self","kind","name","checkArgumentCount","count","expectedCount","suffix","setCensorship","censorship","permanent","operation"]
}
