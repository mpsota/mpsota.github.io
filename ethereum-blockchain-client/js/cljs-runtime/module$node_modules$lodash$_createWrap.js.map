{
"version":3,
"file":"module$node_modules$lodash$_createWrap.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/lodash/_createWrap.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_createWrap\"] = function(global,require,module,exports) {\nvar baseSetData = require('./_baseSetData'),\n    createBind = require('./_createBind'),\n    createCurry = require('./_createCurry'),\n    createHybrid = require('./_createHybrid'),\n    createPartial = require('./_createPartial'),\n    getData = require('./_getData'),\n    mergeData = require('./_mergeData'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString'),\n    toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags.\n *    1 - `_.bind`\n *    2 - `_.bindKey`\n *    4 - `_.curry` or `_.curryRight` of a bound function\n *    8 - `_.curry`\n *   16 - `_.curryRight`\n *   32 - `_.partial`\n *   64 - `_.partialRight`\n *  128 - `_.rearg`\n *  256 - `_.ary`\n *  512 - `_.flip`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = partials ? partials.length : 0;\n  if (!length) {\n    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n  arity = arity === undefined ? arity : toInteger(arity);\n  length -= holders ? holders.length : 0;\n\n  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n\n    partials = holders = undefined;\n  }\n  var data = isBindKey ? undefined : getData(func);\n\n  var newData = [\n    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n    argPos, ary, arity\n  ];\n\n  if (data) {\n    mergeData(newData, data);\n  }\n  func = newData[0];\n  bitmask = newData[1];\n  thisArg = newData[2];\n  partials = newData[3];\n  holders = newData[4];\n  arity = newData[9] = newData[9] === undefined\n    ? (isBindKey ? 0 : func.length)\n    : nativeMax(newData[9] - length, 0);\n\n  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n  }\n  if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n    var result = createBind(func, bitmask, thisArg);\n  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n    result = createCurry(func, bitmask, arity);\n  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n    result = createPartial(func, bitmask, thisArg, partials);\n  } else {\n    result = createHybrid.apply(undefined, newData);\n  }\n  var setter = data ? baseSetData : setData;\n  return setWrapToString(setter(result, newData), func, bitmask);\n}\n\nmodule.exports = createWrap;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseSetData","createBind","createCurry","createHybrid","createPartial","getData","mergeData","setData","setWrapToString","toInteger","nativeMax","Math","max","createWrap","func","bitmask","thisArg","partials","holders","argPos","ary","arity","isBindKey","WRAP_BIND_KEY_FLAG","TypeError","FUNC_ERROR_TEXT","length","undefined","WRAP_PARTIAL_RIGHT_FLAG","partialsRight","holdersRight","data","newData","result","WRAP_BIND_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_PARTIAL_FLAG","apply","setter"]
}
