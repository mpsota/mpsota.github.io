{"version":3,"sources":["ebc/ui.cljs"],"mappings":"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","names":["ebc.ui/connect-button","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Button","G__28100","re-frame.core/dispatch","cljs.core/deref","ebc.ui/accounts-dropdown","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Form.Select","G__28103","re-frame.core/subscribe","_e","v","G__28106","G__28108","p1__28110#","p2__28109#","p1__28112#","p2__28111#","ebc.ui/common-fields","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Form","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Form.Group","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Form.Input","G__28116","G__28119","G__28124","G__28125","p1__28129#","p2__28128#","ebc.ui/send-directly","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Container","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Header","G__28133","G__28134","G__28135","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Form.Button","G__28138","ebc.ui/transaction-hash-container","transaction","temp__5735__auto__","hash","G__28141","p1__28147#","p2__28146#","ebc.ui/approve-sablier-contract","G__28150","G__28151","G__28152","G__28153","p1__28155#","p2__28154#","p1__28157#","p2__28156#","p1__28159#","p2__28158#","ebc.ui/create-sablier-stream","G__28160","G__28161","G__28162","G__28163","G__28164","G__28165","G__28167","ebc.ui/make-header-sub-row","size","title","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Grid.Row","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Grid.Column","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","ebc.ui/make-left-rail","seq28168","self__4777__auto__","cljs.core/seq","text","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Rail","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Segment","cljs.core.interpose","ebc.ui/index","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Grid","js/module$node_modules$semantic_ui_react$dist$commonjs$index.Divider","cljs.core/empty?","G__28176","G__28177"],"sourcesContent":["(ns ebc.ui\n  (:require\n    [reagent.core :as r]\n    [re-frame.core :as rf]\n    [clojure.string :as str]\n    [\"semantic-ui-react\" :refer [Grid Grid.Row Grid.Column Divider Container\n                                 Segment Rail\n                                 Header Header.Content\n                                 Button Form Form.Input Form.Button Form.Group Form.Field Form.Dropdown Form.Select Input\n                                 Table Table.Body Table.Header Table.HeaderCell Table.Cell Table.Row]]\n    [clojure.string :as string]))\n\n(defn connect-button\n      \"Connects with MetaMask\"\n      []\n      [:> Button {:onClick #(rf/dispatch [:connect-web3])} \"Connect\"])\n\n(defn accounts-dropdown []\n      \"Dropdown with all available accounts, after MetaMask connected to the page\"\n      [:> Form.Select { ;:style {:width \"400px\"}\n                         :label \"Sender's account\"\n                         :search    true\n                         :fluid     true\n                         :selection true\n                         :options   @(rf/subscribe [:accounts])\n                         :onChange  (fn [_e v]\n                                        (rf/dispatch [:set-current-account (.-value v)])\n                                        (rf/dispatch [:get-balance]))}])\n(defn common-fields\n      \"Fields which are used by all other forms - Sender, Recipient and Gas limit\"\n      []\n      [:> Form [:label \"Connect\"]\n       [:> Form.Group {:widths \"equal\"}\n        [accounts-dropdown]\n        [:> Form.Input {:fluid true :label \"Receiver\"\n                        :value @(rf/subscribe [:get-db-value :receiver])\n                        :onChange #(rf/dispatch [:set-db-value :receiver (.-value %2)])}]\n        [:> Form.Input {:fluid true :label \"Gas limit\"\n                        :value @(rf/subscribe [:get-db-value :gas-limit])\n                        :onChange #(rf/dispatch [:set-db-value :gas-limit (.-value %2)])}]\n        ]]\n      )\n\n(defn send-directly []\n      \"Sends ETH directly between accounts\"\n      [:> Form\n       [:> Form.Group {:widths \"equal\"}\n        [:> Container\n         [:> Header {:as \"h5\"} \"Available ETH Amount\"]\n         [:p @(rf/subscribe [:balance])]]\n        [:> Form.Input {:fluid true :label \"Amount\"\n                        :value @(rf/subscribe [:field-value :send-directly-form :amount])\n                        :onChange #(rf/dispatch [:set-field-value :send-directly-form :amount (.-value %2)])}]]\n       [:> Form.Group {:widths \"equal\"}\n        [:> Form.Button {:onClick #(rf/dispatch [:send-form :send-directly-form]) :content \"Send eth directly!\"}]]])\n\n(defn transaction-hash-container [transaction]\n      \"Display transaction hash, after transaction is sent\"\n      (when-let [hash @(rf/subscribe [:get-db-value transaction])]\n                [:> Container\n                 [:> Header {:as \"h5\"} \"Transaction hash:\"]\n                 [:a {:target \"_blank\"\n                      :href (str \"https://rinkeby.etherscan.io/tx/\" hash)} hash]]))\n\n(defn approve-sablier-contract\n      \"Create and approve contract which sets the maximum number of tokens which may be streamd\"\n      []\n      [:> Form\n       [:> Form.Group {:widths \"equal\"}\n        [:> Container\n         [:> Header {:as \"h5\"} \"Available Amount\"]\n         [:p @(rf/subscribe [:get-db-value :dai-balance])]]\n        [:> Form.Input {:fluid true :label \"Allowed Amount\"\n                        :value @(rf/subscribe [:field-value :approve-sablier-contract-form :allowed-amount])\n                        :onChange #(rf/dispatch [:set-field-value :approve-sablier-contract-form :allowed-amount (.-value %2)])}]\n        ]\n       [:> Form.Group {:widths \"equal\"}\n        [:> Form.Button {:onClick #(rf/dispatch [:send-form :approve-sablier-contract-form]) :content \"Approve Sablier contract!\"}]]\n       [transaction-hash-container :approve-transaction-hash]])\n\n(defn create-sablier-stream []\n      \"Stream deposit at now+start-time for duration time.\"\n      [:> Form\n       [:> Form.Group {:widths \"equal\"}\n      [:> Form.Input {:fluid true :label \"deposit\"\n                      :value @(rf/subscribe [:field-value :create-sablier-stream-form :deposit])\n                      :onChange #(rf/dispatch [:set-field-value :create-sablier-stream-form :deposit (.-value %2)])}]\n      [:> Form.Input {:fluid true :label \"start-time\"\n                      :value @(rf/subscribe [:field-value :create-sablier-stream-form :time-since-now])\n                      :onChange #(rf/dispatch [:set-field-value :create-sablier-stream-form :time-since-now (.-value %2)])}]\n      [:> Form.Input {:fluid true :label \"duration\"\n                      :value @(rf/subscribe [:field-value :create-sablier-stream-form :duration])\n                      :onChange #(rf/dispatch [:set-field-value :create-sablier-stream-form :duration (.-value %2)])}]]\n        [:> Form.Group {:widths \"equal\"}\n         [:> Form.Button {:onClick #(rf/dispatch [:send-form :create-sablier-stream-form]) :content \"Create Sablier Stream!\"}]]\n       [transaction-hash-container :stream-transaction-hash]])\n\n(defn make-header-sub-row [size title]\n      [:> Grid.Row {:columns 1}\n       [:> Grid.Column\n        [:> Header {:as size} title]]])\n\n(defn make-left-rail [& text]\n      [:> Rail {:attached true :position \"left\"}\n       [:> Segment (interpose [:br] text)]])\n\n(defn index []\n      [:> Grid {:columns 3\n                ;:centered true\n                :style   {:width      \"65%\"\n                          :text-align \"center\"\n                          :margin     \"auto\"}}\n       [:> Grid.Row]\n       [:> Grid.Row\n        [:> Grid.Column]\n        [:> Grid.Column\n         [:> Container\n          [:> Header {:as \"h1\"} \"Ethereum Blockchain Client\"]\n          [:p {} \"Backend-less, server-less app using Sablier, the protocol for real-time finance on the Ethereum blockchain\" ]]]\n        [:> Grid.Column]]\n       [:> Grid.Row {:columns 1}\n        [:> Grid.Column\n         [:> Divider]]]\n       [:> Grid.Row {:columns 3}\n        [:> Grid.Column]\n        [make-left-rail \"Click the button to connect with MetaMask\"]\n        [:> Grid.Column {}\n         [connect-button]]\n        [:> Grid.Column]]\n       [make-header-sub-row \"h3\" \"Set common fields\"]\n       [:> Grid.Row {:columns 1}\n        [make-left-rail\n         \"1) Select account to use,\"\n         \"2) Input recipient address,\"\n         \"3) Input accepted gas cost (create stream action's typical cost is <250K)\"]\n        [:> Grid.Column {}\n         [common-fields]]]\n       [make-header-sub-row \"h3\" \"Approve Sablier contract\"]\n       [:> Grid.Row {:columns 3}\n        [make-left-rail \"Limit maximum number of tokens to stream and execute the contract.\"]\n        [:> Grid.Column {} ]\n        [:> Grid.Column {}\n         [approve-sablier-contract]]\n        [:Grid.Column {} ]]\n       [make-header-sub-row \"h3\" \"Create Sablier Stream\"]\n       [:> Grid.Row {:columns 1}\n        [make-left-rail \"Create stream:\"\n         \"1) Deposit - number of tokens to stream, *must* be a multiple of the duration\"\n         \"2) Start time - Number of seconds since now, when streaming is going to start\"\n         \"3) Duration - Time in which all tokens are going to be streamed\"]\n        [:> Grid.Column {}\n         [create-sablier-stream]]]\n       [:> Grid.Row {:columns 1}\n        [make-left-rail \"Here you will see (hope not) errors which occured during contract creation.\"]\n        [:> Grid.Column {}\n         [:> Header {:as \"h3\"} \"Errors: \"]\n         (when-not (empty? @(rf/subscribe [:errors]))\n                   [:p {:class \"ui negative message\"} @(rf/subscribe [:errors])])]]\n       [:> Grid.Row {:columns 1}\n        [:> Grid.Column\n         [:> Divider]]]\n       [make-header-sub-row \"h3\" \"Send ETH directly to another address\"]\n       [:> Grid.Row {:columns 1}\n        [make-left-rail \"Here you can send ETH, directly to previously defined recipient\"]\n        [:> Grid.Column {}\n         [send-directly]]]\n       ]\n      )\n"]}